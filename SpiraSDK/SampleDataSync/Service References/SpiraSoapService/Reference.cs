//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SampleDataSync.SpiraSoapService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCredentials", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCredentials : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApiKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSystemAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlugInNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApiKey {
            get {
                return this.ApiKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ApiKeyField, value) != true)) {
                    this.ApiKeyField = value;
                    this.RaisePropertyChanged("ApiKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSystemAdmin {
            get {
                return this.IsSystemAdminField;
            }
            set {
                if ((this.IsSystemAdminField.Equals(value) != true)) {
                    this.IsSystemAdminField = value;
                    this.RaisePropertyChanged("IsSystemAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlugInName {
            get {
                return this.PlugInNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlugInNameField, value) != true)) {
                    this.PlugInNameField = value;
                    this.RaisePropertyChanged("PlugInName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestConfigurationSet", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestConfigurationSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ConcurrencyDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteTestConfigurationEntry[] EntriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestConfigurationSetIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ConcurrencyDate {
            get {
                return this.ConcurrencyDateField;
            }
            set {
                if ((this.ConcurrencyDateField.Equals(value) != true)) {
                    this.ConcurrencyDateField = value;
                    this.RaisePropertyChanged("ConcurrencyDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteTestConfigurationEntry[] Entries {
            get {
                return this.EntriesField;
            }
            set {
                if ((object.ReferenceEquals(this.EntriesField, value) != true)) {
                    this.EntriesField = value;
                    this.RaisePropertyChanged("Entries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdatedDate {
            get {
                return this.LastUpdatedDateField;
            }
            set {
                if ((this.LastUpdatedDateField.Equals(value) != true)) {
                    this.LastUpdatedDateField = value;
                    this.RaisePropertyChanged("LastUpdatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestConfigurationSetId {
            get {
                return this.TestConfigurationSetIdField;
            }
            set {
                if ((this.TestConfigurationSetIdField.Equals(value) != true)) {
                    this.TestConfigurationSetIdField = value;
                    this.RaisePropertyChanged("TestConfigurationSetId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestConfigurationEntry", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestConfigurationEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteTestConfigurationParameterValue[] ParameterValuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestConfigurationEntryIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteTestConfigurationParameterValue[] ParameterValues {
            get {
                return this.ParameterValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterValuesField, value) != true)) {
                    this.ParameterValuesField = value;
                    this.RaisePropertyChanged("ParameterValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestConfigurationEntryId {
            get {
                return this.TestConfigurationEntryIdField;
            }
            set {
                if ((this.TestConfigurationEntryIdField.Equals(value) != true)) {
                    this.TestConfigurationEntryIdField = value;
                    this.RaisePropertyChanged("TestConfigurationEntryId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestConfigurationParameterValue", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestConfigurationParameterValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseParameterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseParameterId {
            get {
                return this.TestCaseParameterIdField;
            }
            set {
                if ((this.TestCaseParameterIdField.Equals(value) != true)) {
                    this.TestCaseParameterIdField = value;
                    this.RaisePropertyChanged("TestCaseParameterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
    [System.SerializableAttribute()]
    public partial struct ServiceFaultMessage : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StackTraceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace {
            get {
                return this.StackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.StackTraceField, value) != true)) {
                    this.StackTraceField = value;
                    this.RaisePropertyChanged("StackTrace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteUser", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteProjectUser))]
    public partial class RemoteUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ApprovedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DepartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LdapDnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleInitialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RssTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((this.AdminField.Equals(value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Approved {
            get {
                return this.ApprovedField;
            }
            set {
                if ((this.ApprovedField.Equals(value) != true)) {
                    this.ApprovedField = value;
                    this.RaisePropertyChanged("Approved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentField, value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress {
            get {
                return this.EmailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailAddressField, value) != true)) {
                    this.EmailAddressField = value;
                    this.RaisePropertyChanged("EmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LdapDn {
            get {
                return this.LdapDnField;
            }
            set {
                if ((object.ReferenceEquals(this.LdapDnField, value) != true)) {
                    this.LdapDnField = value;
                    this.RaisePropertyChanged("LdapDn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Locked {
            get {
                return this.LockedField;
            }
            set {
                if ((this.LockedField.Equals(value) != true)) {
                    this.LockedField = value;
                    this.RaisePropertyChanged("Locked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MiddleInitial {
            get {
                return this.MiddleInitialField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleInitialField, value) != true)) {
                    this.MiddleInitialField = value;
                    this.RaisePropertyChanged("MiddleInitial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RssToken {
            get {
                return this.RssTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.RssTokenField, value) != true)) {
                    this.RssTokenField = value;
                    this.RaisePropertyChanged("RssToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteProjectUser", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteProjectUser : SampleDataSync.SpiraSoapService.RemoteUser {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectRoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectRoleNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectRoleId {
            get {
                return this.ProjectRoleIdField;
            }
            set {
                if ((this.ProjectRoleIdField.Equals(value) != true)) {
                    this.ProjectRoleIdField = value;
                    this.RaisePropertyChanged("ProjectRoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectRoleName {
            get {
                return this.ProjectRoleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectRoleNameField, value) != true)) {
                    this.ProjectRoleNameField = value;
                    this.RaisePropertyChanged("ProjectRoleName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteFilter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.DateRange DateRangeValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IntValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.MultiValueFilter MultiValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.DateRange DateRangeValue {
            get {
                return this.DateRangeValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DateRangeValueField, value) != true)) {
                    this.DateRangeValueField = value;
                    this.RaisePropertyChanged("DateRangeValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IntValue {
            get {
                return this.IntValueField;
            }
            set {
                if ((this.IntValueField.Equals(value) != true)) {
                    this.IntValueField = value;
                    this.RaisePropertyChanged("IntValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.MultiValueFilter MultiValue {
            get {
                return this.MultiValueField;
            }
            set {
                if ((object.ReferenceEquals(this.MultiValueField, value) != true)) {
                    this.MultiValueField = value;
                    this.RaisePropertyChanged("MultiValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyName {
            get {
                return this.PropertyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyNameField, value) != true)) {
                    this.PropertyNameField = value;
                    this.RaisePropertyChanged("PropertyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateRange", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class DateRange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConsiderTimesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ConsiderTimes {
            get {
                return this.ConsiderTimesField;
            }
            set {
                if ((this.ConsiderTimesField.Equals(value) != true)) {
                    this.ConsiderTimesField = value;
                    this.RaisePropertyChanged("ConsiderTimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiValueFilter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class MultiValueFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] ValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNone {
            get {
                return this.IsNoneField;
            }
            set {
                if ((this.IsNoneField.Equals(value) != true)) {
                    this.IsNoneField = value;
                    this.RaisePropertyChanged("IsNone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSort", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSort : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SortAscendingField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyName {
            get {
                return this.PropertyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyNameField, value) != true)) {
                    this.PropertyNameField = value;
                    this.RaisePropertyChanged("PropertyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SortAscending {
            get {
                return this.SortAscendingField;
            }
            set {
                if ((this.SortAscendingField.Equals(value) != true)) {
                    this.SortAscendingField = value;
                    this.RaisePropertyChanged("SortAscending");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteAutomationHost", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteAutomationHost : SampleDataSync.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationHostIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastContactDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationHostId {
            get {
                return this.AutomationHostIdField;
            }
            set {
                if ((this.AutomationHostIdField.Equals(value) != true)) {
                    this.AutomationHostIdField = value;
                    this.RaisePropertyChanged("AutomationHostId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastContactDate {
            get {
                return this.LastContactDateField;
            }
            set {
                if ((this.LastContactDateField.Equals(value) != true)) {
                    this.LastContactDateField = value;
                    this.RaisePropertyChanged("LastContactDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteArtifact", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteManualTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestSet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDocument))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteIncident))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRelease))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirement))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteAutomationHost))]
    public partial class RemoteArtifact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ConcurrencyDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteArtifactCustomProperty[] CustomPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAttachmentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ConcurrencyDate {
            get {
                return this.ConcurrencyDateField;
            }
            set {
                if ((this.ConcurrencyDateField.Equals(value) != true)) {
                    this.ConcurrencyDateField = value;
                    this.RaisePropertyChanged("ConcurrencyDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteArtifactCustomProperty[] CustomProperties {
            get {
                return this.CustomPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertiesField, value) != true)) {
                    this.CustomPropertiesField = value;
                    this.RaisePropertyChanged("CustomProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAttachments {
            get {
                return this.IsAttachmentsField;
            }
            set {
                if ((this.IsAttachmentsField.Equals(value) != true)) {
                    this.IsAttachmentsField = value;
                    this.RaisePropertyChanged("IsAttachments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTask", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTask : SampleDataSync.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompletionPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ComponentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RemainingEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequirementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequirementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RiskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskPriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskPriorityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskTypeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualEffort {
            get {
                return this.ActualEffortField;
            }
            set {
                if ((this.ActualEffortField.Equals(value) != true)) {
                    this.ActualEffortField = value;
                    this.RaisePropertyChanged("ActualEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompletionPercent {
            get {
                return this.CompletionPercentField;
            }
            set {
                if ((this.CompletionPercentField.Equals(value) != true)) {
                    this.CompletionPercentField = value;
                    this.RaisePropertyChanged("CompletionPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ComponentId {
            get {
                return this.ComponentIdField;
            }
            set {
                if ((this.ComponentIdField.Equals(value) != true)) {
                    this.ComponentIdField = value;
                    this.RaisePropertyChanged("ComponentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedEffort {
            get {
                return this.EstimatedEffortField;
            }
            set {
                if ((this.EstimatedEffortField.Equals(value) != true)) {
                    this.EstimatedEffortField = value;
                    this.RaisePropertyChanged("EstimatedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectedEffort {
            get {
                return this.ProjectedEffortField;
            }
            set {
                if ((this.ProjectedEffortField.Equals(value) != true)) {
                    this.ProjectedEffortField = value;
                    this.RaisePropertyChanged("ProjectedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseVersionNumber {
            get {
                return this.ReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseVersionNumberField, value) != true)) {
                    this.ReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("ReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RemainingEffort {
            get {
                return this.RemainingEffortField;
            }
            set {
                if ((this.RemainingEffortField.Equals(value) != true)) {
                    this.RemainingEffortField = value;
                    this.RaisePropertyChanged("RemainingEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequirementId {
            get {
                return this.RequirementIdField;
            }
            set {
                if ((this.RequirementIdField.Equals(value) != true)) {
                    this.RequirementIdField = value;
                    this.RaisePropertyChanged("RequirementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequirementName {
            get {
                return this.RequirementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RequirementNameField, value) != true)) {
                    this.RequirementNameField = value;
                    this.RaisePropertyChanged("RequirementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RiskId {
            get {
                return this.RiskIdField;
            }
            set {
                if ((this.RiskIdField.Equals(value) != true)) {
                    this.RiskIdField = value;
                    this.RaisePropertyChanged("RiskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskFolderId {
            get {
                return this.TaskFolderIdField;
            }
            set {
                if ((this.TaskFolderIdField.Equals(value) != true)) {
                    this.TaskFolderIdField = value;
                    this.RaisePropertyChanged("TaskFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskId {
            get {
                return this.TaskIdField;
            }
            set {
                if ((this.TaskIdField.Equals(value) != true)) {
                    this.TaskIdField = value;
                    this.RaisePropertyChanged("TaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskPriorityId {
            get {
                return this.TaskPriorityIdField;
            }
            set {
                if ((this.TaskPriorityIdField.Equals(value) != true)) {
                    this.TaskPriorityIdField = value;
                    this.RaisePropertyChanged("TaskPriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskPriorityName {
            get {
                return this.TaskPriorityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskPriorityNameField, value) != true)) {
                    this.TaskPriorityNameField = value;
                    this.RaisePropertyChanged("TaskPriorityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskStatusId {
            get {
                return this.TaskStatusIdField;
            }
            set {
                if ((this.TaskStatusIdField.Equals(value) != true)) {
                    this.TaskStatusIdField = value;
                    this.RaisePropertyChanged("TaskStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskStatusName {
            get {
                return this.TaskStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskStatusNameField, value) != true)) {
                    this.TaskStatusNameField = value;
                    this.RaisePropertyChanged("TaskStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskTypeId {
            get {
                return this.TaskTypeIdField;
            }
            set {
                if ((this.TaskTypeIdField.Equals(value) != true)) {
                    this.TaskTypeIdField = value;
                    this.RaisePropertyChanged("TaskTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskTypeName {
            get {
                return this.TaskTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskTypeNameField, value) != true)) {
                    this.TaskTypeNameField = value;
                    this.RaisePropertyChanged("TaskTypeName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCase", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCase : SampleDataSync.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationAttachmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationEngineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] ComponentIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExecutionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ExecutionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExecutionStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuspectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTestStepsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCasePriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestCasePriorityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestCaseStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestCaseTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteTestStep[] TestStepsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationAttachmentId {
            get {
                return this.AutomationAttachmentIdField;
            }
            set {
                if ((this.AutomationAttachmentIdField.Equals(value) != true)) {
                    this.AutomationAttachmentIdField = value;
                    this.RaisePropertyChanged("AutomationAttachmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationEngineId {
            get {
                return this.AutomationEngineIdField;
            }
            set {
                if ((this.AutomationEngineIdField.Equals(value) != true)) {
                    this.AutomationEngineIdField = value;
                    this.RaisePropertyChanged("AutomationEngineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] ComponentIds {
            get {
                return this.ComponentIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentIdsField, value) != true)) {
                    this.ComponentIdsField = value;
                    this.RaisePropertyChanged("ComponentIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExecutionDate {
            get {
                return this.ExecutionDateField;
            }
            set {
                if ((this.ExecutionDateField.Equals(value) != true)) {
                    this.ExecutionDateField = value;
                    this.RaisePropertyChanged("ExecutionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExecutionStatusId {
            get {
                return this.ExecutionStatusIdField;
            }
            set {
                if ((this.ExecutionStatusIdField.Equals(value) != true)) {
                    this.ExecutionStatusIdField = value;
                    this.RaisePropertyChanged("ExecutionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExecutionStatusName {
            get {
                return this.ExecutionStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExecutionStatusNameField, value) != true)) {
                    this.ExecutionStatusNameField = value;
                    this.RaisePropertyChanged("ExecutionStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuspect {
            get {
                return this.IsSuspectField;
            }
            set {
                if ((this.IsSuspectField.Equals(value) != true)) {
                    this.IsSuspectField = value;
                    this.RaisePropertyChanged("IsSuspect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTestSteps {
            get {
                return this.IsTestStepsField;
            }
            set {
                if ((this.IsTestStepsField.Equals(value) != true)) {
                    this.IsTestStepsField = value;
                    this.RaisePropertyChanged("IsTestSteps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseFolderId {
            get {
                return this.TestCaseFolderIdField;
            }
            set {
                if ((this.TestCaseFolderIdField.Equals(value) != true)) {
                    this.TestCaseFolderIdField = value;
                    this.RaisePropertyChanged("TestCaseFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCasePriorityId {
            get {
                return this.TestCasePriorityIdField;
            }
            set {
                if ((this.TestCasePriorityIdField.Equals(value) != true)) {
                    this.TestCasePriorityIdField = value;
                    this.RaisePropertyChanged("TestCasePriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestCasePriorityName {
            get {
                return this.TestCasePriorityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TestCasePriorityNameField, value) != true)) {
                    this.TestCasePriorityNameField = value;
                    this.RaisePropertyChanged("TestCasePriorityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseStatusId {
            get {
                return this.TestCaseStatusIdField;
            }
            set {
                if ((this.TestCaseStatusIdField.Equals(value) != true)) {
                    this.TestCaseStatusIdField = value;
                    this.RaisePropertyChanged("TestCaseStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestCaseStatusName {
            get {
                return this.TestCaseStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TestCaseStatusNameField, value) != true)) {
                    this.TestCaseStatusNameField = value;
                    this.RaisePropertyChanged("TestCaseStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseTypeId {
            get {
                return this.TestCaseTypeIdField;
            }
            set {
                if ((this.TestCaseTypeIdField.Equals(value) != true)) {
                    this.TestCaseTypeIdField = value;
                    this.RaisePropertyChanged("TestCaseTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestCaseTypeName {
            get {
                return this.TestCaseTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TestCaseTypeNameField, value) != true)) {
                    this.TestCaseTypeNameField = value;
                    this.RaisePropertyChanged("TestCaseTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteTestStep[] TestSteps {
            get {
                return this.TestStepsField;
            }
            set {
                if ((object.ReferenceEquals(this.TestStepsField, value) != true)) {
                    this.TestStepsField = value;
                    this.RaisePropertyChanged("TestSteps");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestStep", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestStep : SampleDataSync.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ExecutionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpectedResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> LinkedTestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PreconditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestStepIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExecutionStatusId {
            get {
                return this.ExecutionStatusIdField;
            }
            set {
                if ((this.ExecutionStatusIdField.Equals(value) != true)) {
                    this.ExecutionStatusIdField = value;
                    this.RaisePropertyChanged("ExecutionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExpectedResult {
            get {
                return this.ExpectedResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpectedResultField, value) != true)) {
                    this.ExpectedResultField = value;
                    this.RaisePropertyChanged("ExpectedResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> LinkedTestCaseId {
            get {
                return this.LinkedTestCaseIdField;
            }
            set {
                if ((this.LinkedTestCaseIdField.Equals(value) != true)) {
                    this.LinkedTestCaseIdField = value;
                    this.RaisePropertyChanged("LinkedTestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Precondition {
            get {
                return this.PreconditionField;
            }
            set {
                if ((object.ReferenceEquals(this.PreconditionField, value) != true)) {
                    this.PreconditionField = value;
                    this.RaisePropertyChanged("Precondition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleData {
            get {
                return this.SampleDataField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleDataField, value) != true)) {
                    this.SampleDataField = value;
                    this.RaisePropertyChanged("SampleData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestStepId {
            get {
                return this.TestStepIdField;
            }
            set {
                if ((this.TestStepIdField.Equals(value) != true)) {
                    this.TestStepIdField = value;
                    this.RaisePropertyChanged("TestStepId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestRun", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteManualTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun))]
    public partial class RemoteTestRun : SampleDataSync.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExecutionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestConfigurationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestRunIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestRunTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetTestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TesterIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BuildId {
            get {
                return this.BuildIdField;
            }
            set {
                if ((this.BuildIdField.Equals(value) != true)) {
                    this.BuildIdField = value;
                    this.RaisePropertyChanged("BuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExecutionStatusId {
            get {
                return this.ExecutionStatusIdField;
            }
            set {
                if ((this.ExecutionStatusIdField.Equals(value) != true)) {
                    this.ExecutionStatusIdField = value;
                    this.RaisePropertyChanged("ExecutionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestConfigurationId {
            get {
                return this.TestConfigurationIdField;
            }
            set {
                if ((this.TestConfigurationIdField.Equals(value) != true)) {
                    this.TestConfigurationIdField = value;
                    this.RaisePropertyChanged("TestConfigurationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestRunId {
            get {
                return this.TestRunIdField;
            }
            set {
                if ((this.TestRunIdField.Equals(value) != true)) {
                    this.TestRunIdField = value;
                    this.RaisePropertyChanged("TestRunId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestRunTypeId {
            get {
                return this.TestRunTypeIdField;
            }
            set {
                if ((this.TestRunTypeIdField.Equals(value) != true)) {
                    this.TestRunTypeIdField = value;
                    this.RaisePropertyChanged("TestRunTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetId {
            get {
                return this.TestSetIdField;
            }
            set {
                if ((this.TestSetIdField.Equals(value) != true)) {
                    this.TestSetIdField = value;
                    this.RaisePropertyChanged("TestSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetTestCaseId {
            get {
                return this.TestSetTestCaseIdField;
            }
            set {
                if ((this.TestSetTestCaseIdField.Equals(value) != true)) {
                    this.TestSetTestCaseIdField = value;
                    this.RaisePropertyChanged("TestSetTestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TesterId {
            get {
                return this.TesterIdField;
            }
            set {
                if ((this.TesterIdField.Equals(value) != true)) {
                    this.TesterIdField = value;
                    this.RaisePropertyChanged("TesterId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteManualTestRun", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteManualTestRun : SampleDataSync.SpiraSoapService.RemoteTestRun {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteTestRunStep[] TestRunStepsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteTestRunStep[] TestRunSteps {
            get {
                return this.TestRunStepsField;
            }
            set {
                if ((object.ReferenceEquals(this.TestRunStepsField, value) != true)) {
                    this.TestRunStepsField = value;
                    this.RaisePropertyChanged("TestRunSteps");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteAutomatedTestRun", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteAutomatedTestRun : SampleDataSync.SpiraSoapService.RemoteTestRun {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationAttachmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationEngineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AutomationEngineTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationHostIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseParameter[] ParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RunnerAssertCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerStackTraceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerTestNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ScheduledDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestRunFormatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteTestRunStep[] TestRunStepsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationAttachmentId {
            get {
                return this.AutomationAttachmentIdField;
            }
            set {
                if ((this.AutomationAttachmentIdField.Equals(value) != true)) {
                    this.AutomationAttachmentIdField = value;
                    this.RaisePropertyChanged("AutomationAttachmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationEngineId {
            get {
                return this.AutomationEngineIdField;
            }
            set {
                if ((this.AutomationEngineIdField.Equals(value) != true)) {
                    this.AutomationEngineIdField = value;
                    this.RaisePropertyChanged("AutomationEngineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutomationEngineToken {
            get {
                return this.AutomationEngineTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.AutomationEngineTokenField, value) != true)) {
                    this.AutomationEngineTokenField = value;
                    this.RaisePropertyChanged("AutomationEngineToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationHostId {
            get {
                return this.AutomationHostIdField;
            }
            set {
                if ((this.AutomationHostIdField.Equals(value) != true)) {
                    this.AutomationHostIdField = value;
                    this.RaisePropertyChanged("AutomationHostId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseParameter[] Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RunnerAssertCount {
            get {
                return this.RunnerAssertCountField;
            }
            set {
                if ((this.RunnerAssertCountField.Equals(value) != true)) {
                    this.RunnerAssertCountField = value;
                    this.RaisePropertyChanged("RunnerAssertCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerMessage {
            get {
                return this.RunnerMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerMessageField, value) != true)) {
                    this.RunnerMessageField = value;
                    this.RaisePropertyChanged("RunnerMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerName {
            get {
                return this.RunnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerNameField, value) != true)) {
                    this.RunnerNameField = value;
                    this.RaisePropertyChanged("RunnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerStackTrace {
            get {
                return this.RunnerStackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerStackTraceField, value) != true)) {
                    this.RunnerStackTraceField = value;
                    this.RaisePropertyChanged("RunnerStackTrace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerTestName {
            get {
                return this.RunnerTestNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerTestNameField, value) != true)) {
                    this.RunnerTestNameField = value;
                    this.RaisePropertyChanged("RunnerTestName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ScheduledDate {
            get {
                return this.ScheduledDateField;
            }
            set {
                if ((this.ScheduledDateField.Equals(value) != true)) {
                    this.ScheduledDateField = value;
                    this.RaisePropertyChanged("ScheduledDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestRunFormatId {
            get {
                return this.TestRunFormatIdField;
            }
            set {
                if ((this.TestRunFormatIdField.Equals(value) != true)) {
                    this.TestRunFormatIdField = value;
                    this.RaisePropertyChanged("TestRunFormatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteTestRunStep[] TestRunSteps {
            get {
                return this.TestRunStepsField;
            }
            set {
                if ((object.ReferenceEquals(this.TestRunStepsField, value) != true)) {
                    this.TestRunStepsField = value;
                    this.RaisePropertyChanged("TestRunSteps");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSet", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSet : SampleDataSync.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationHostIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BuildExecuteTimeIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountCautionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountFailedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountNotApplicableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountNotRunField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DynamicQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExecutionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAutoScheduledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDynamicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PlannedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RecurrenceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecurrenceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestConfigurationSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestRunTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestSetStatusNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationHostId {
            get {
                return this.AutomationHostIdField;
            }
            set {
                if ((this.AutomationHostIdField.Equals(value) != true)) {
                    this.AutomationHostIdField = value;
                    this.RaisePropertyChanged("AutomationHostId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BuildExecuteTimeInterval {
            get {
                return this.BuildExecuteTimeIntervalField;
            }
            set {
                if ((this.BuildExecuteTimeIntervalField.Equals(value) != true)) {
                    this.BuildExecuteTimeIntervalField = value;
                    this.RaisePropertyChanged("BuildExecuteTimeInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountBlocked {
            get {
                return this.CountBlockedField;
            }
            set {
                if ((this.CountBlockedField.Equals(value) != true)) {
                    this.CountBlockedField = value;
                    this.RaisePropertyChanged("CountBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountCaution {
            get {
                return this.CountCautionField;
            }
            set {
                if ((this.CountCautionField.Equals(value) != true)) {
                    this.CountCautionField = value;
                    this.RaisePropertyChanged("CountCaution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountFailed {
            get {
                return this.CountFailedField;
            }
            set {
                if ((this.CountFailedField.Equals(value) != true)) {
                    this.CountFailedField = value;
                    this.RaisePropertyChanged("CountFailed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountNotApplicable {
            get {
                return this.CountNotApplicableField;
            }
            set {
                if ((this.CountNotApplicableField.Equals(value) != true)) {
                    this.CountNotApplicableField = value;
                    this.RaisePropertyChanged("CountNotApplicable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountNotRun {
            get {
                return this.CountNotRunField;
            }
            set {
                if ((this.CountNotRunField.Equals(value) != true)) {
                    this.CountNotRunField = value;
                    this.RaisePropertyChanged("CountNotRun");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountPassed {
            get {
                return this.CountPassedField;
            }
            set {
                if ((this.CountPassedField.Equals(value) != true)) {
                    this.CountPassedField = value;
                    this.RaisePropertyChanged("CountPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorName {
            get {
                return this.CreatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorNameField, value) != true)) {
                    this.CreatorNameField = value;
                    this.RaisePropertyChanged("CreatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DynamicQuery {
            get {
                return this.DynamicQueryField;
            }
            set {
                if ((object.ReferenceEquals(this.DynamicQueryField, value) != true)) {
                    this.DynamicQueryField = value;
                    this.RaisePropertyChanged("DynamicQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExecutionDate {
            get {
                return this.ExecutionDateField;
            }
            set {
                if ((this.ExecutionDateField.Equals(value) != true)) {
                    this.ExecutionDateField = value;
                    this.RaisePropertyChanged("ExecutionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAutoScheduled {
            get {
                return this.IsAutoScheduledField;
            }
            set {
                if ((this.IsAutoScheduledField.Equals(value) != true)) {
                    this.IsAutoScheduledField = value;
                    this.RaisePropertyChanged("IsAutoScheduled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDynamic {
            get {
                return this.IsDynamicField;
            }
            set {
                if ((this.IsDynamicField.Equals(value) != true)) {
                    this.IsDynamicField = value;
                    this.RaisePropertyChanged("IsDynamic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PlannedDate {
            get {
                return this.PlannedDateField;
            }
            set {
                if ((this.PlannedDateField.Equals(value) != true)) {
                    this.PlannedDateField = value;
                    this.RaisePropertyChanged("PlannedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RecurrenceId {
            get {
                return this.RecurrenceIdField;
            }
            set {
                if ((this.RecurrenceIdField.Equals(value) != true)) {
                    this.RecurrenceIdField = value;
                    this.RaisePropertyChanged("RecurrenceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecurrenceName {
            get {
                return this.RecurrenceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RecurrenceNameField, value) != true)) {
                    this.RecurrenceNameField = value;
                    this.RaisePropertyChanged("RecurrenceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseVersionNumber {
            get {
                return this.ReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseVersionNumberField, value) != true)) {
                    this.ReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("ReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestConfigurationSetId {
            get {
                return this.TestConfigurationSetIdField;
            }
            set {
                if ((this.TestConfigurationSetIdField.Equals(value) != true)) {
                    this.TestConfigurationSetIdField = value;
                    this.RaisePropertyChanged("TestConfigurationSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestRunTypeId {
            get {
                return this.TestRunTypeIdField;
            }
            set {
                if ((this.TestRunTypeIdField.Equals(value) != true)) {
                    this.TestRunTypeIdField = value;
                    this.RaisePropertyChanged("TestRunTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetFolderId {
            get {
                return this.TestSetFolderIdField;
            }
            set {
                if ((this.TestSetFolderIdField.Equals(value) != true)) {
                    this.TestSetFolderIdField = value;
                    this.RaisePropertyChanged("TestSetFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetId {
            get {
                return this.TestSetIdField;
            }
            set {
                if ((this.TestSetIdField.Equals(value) != true)) {
                    this.TestSetIdField = value;
                    this.RaisePropertyChanged("TestSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetStatusId {
            get {
                return this.TestSetStatusIdField;
            }
            set {
                if ((this.TestSetStatusIdField.Equals(value) != true)) {
                    this.TestSetStatusIdField = value;
                    this.RaisePropertyChanged("TestSetStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestSetStatusName {
            get {
                return this.TestSetStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TestSetStatusNameField, value) != true)) {
                    this.TestSetStatusNameField = value;
                    this.RaisePropertyChanged("TestSetStatusName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDocument", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDocument : SampleDataSync.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteLinkedArtifact[] AttachedArtifactsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AttachmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AttachmentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttachmentTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DocumentStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DocumentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EditedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EditorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EditorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilenameOrUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectAttachmentFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UploadDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteDocumentVersion[] VersionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteLinkedArtifact[] AttachedArtifacts {
            get {
                return this.AttachedArtifactsField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachedArtifactsField, value) != true)) {
                    this.AttachedArtifactsField = value;
                    this.RaisePropertyChanged("AttachedArtifacts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AttachmentId {
            get {
                return this.AttachmentIdField;
            }
            set {
                if ((this.AttachmentIdField.Equals(value) != true)) {
                    this.AttachmentIdField = value;
                    this.RaisePropertyChanged("AttachmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AttachmentTypeId {
            get {
                return this.AttachmentTypeIdField;
            }
            set {
                if ((this.AttachmentTypeIdField.Equals(value) != true)) {
                    this.AttachmentTypeIdField = value;
                    this.RaisePropertyChanged("AttachmentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttachmentTypeName {
            get {
                return this.AttachmentTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachmentTypeNameField, value) != true)) {
                    this.AttachmentTypeNameField = value;
                    this.RaisePropertyChanged("AttachmentTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentVersion {
            get {
                return this.CurrentVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentVersionField, value) != true)) {
                    this.CurrentVersionField = value;
                    this.RaisePropertyChanged("CurrentVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DocumentStatusId {
            get {
                return this.DocumentStatusIdField;
            }
            set {
                if ((this.DocumentStatusIdField.Equals(value) != true)) {
                    this.DocumentStatusIdField = value;
                    this.RaisePropertyChanged("DocumentStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentStatusName {
            get {
                return this.DocumentStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentStatusNameField, value) != true)) {
                    this.DocumentStatusNameField = value;
                    this.RaisePropertyChanged("DocumentStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DocumentTypeId {
            get {
                return this.DocumentTypeIdField;
            }
            set {
                if ((this.DocumentTypeIdField.Equals(value) != true)) {
                    this.DocumentTypeIdField = value;
                    this.RaisePropertyChanged("DocumentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentTypeName {
            get {
                return this.DocumentTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentTypeNameField, value) != true)) {
                    this.DocumentTypeNameField = value;
                    this.RaisePropertyChanged("DocumentTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EditedDate {
            get {
                return this.EditedDateField;
            }
            set {
                if ((this.EditedDateField.Equals(value) != true)) {
                    this.EditedDateField = value;
                    this.RaisePropertyChanged("EditedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EditorId {
            get {
                return this.EditorIdField;
            }
            set {
                if ((this.EditorIdField.Equals(value) != true)) {
                    this.EditorIdField = value;
                    this.RaisePropertyChanged("EditorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EditorName {
            get {
                return this.EditorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EditorNameField, value) != true)) {
                    this.EditorNameField = value;
                    this.RaisePropertyChanged("EditorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilenameOrUrl {
            get {
                return this.FilenameOrUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FilenameOrUrlField, value) != true)) {
                    this.FilenameOrUrlField = value;
                    this.RaisePropertyChanged("FilenameOrUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectAttachmentFolderId {
            get {
                return this.ProjectAttachmentFolderIdField;
            }
            set {
                if ((this.ProjectAttachmentFolderIdField.Equals(value) != true)) {
                    this.ProjectAttachmentFolderIdField = value;
                    this.RaisePropertyChanged("ProjectAttachmentFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UploadDate {
            get {
                return this.UploadDateField;
            }
            set {
                if ((this.UploadDateField.Equals(value) != true)) {
                    this.UploadDateField = value;
                    this.RaisePropertyChanged("UploadDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteDocumentVersion[] Versions {
            get {
                return this.VersionsField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionsField, value) != true)) {
                    this.VersionsField = value;
                    this.RaisePropertyChanged("Versions");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncident", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncident : SampleDataSync.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ClosedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompletionPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] ComponentIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DetectedBuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetectedBuildNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DetectedReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetectedReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FixedBuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FixedBuildNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncidentStatusOpenStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OpenerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OpenerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RemainingEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ResolvedReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResolvedReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SeverityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SeverityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] TestRunStepIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> VerifiedReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VerifiedReleaseVersionNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualEffort {
            get {
                return this.ActualEffortField;
            }
            set {
                if ((this.ActualEffortField.Equals(value) != true)) {
                    this.ActualEffortField = value;
                    this.RaisePropertyChanged("ActualEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ClosedDate {
            get {
                return this.ClosedDateField;
            }
            set {
                if ((this.ClosedDateField.Equals(value) != true)) {
                    this.ClosedDateField = value;
                    this.RaisePropertyChanged("ClosedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompletionPercent {
            get {
                return this.CompletionPercentField;
            }
            set {
                if ((this.CompletionPercentField.Equals(value) != true)) {
                    this.CompletionPercentField = value;
                    this.RaisePropertyChanged("CompletionPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] ComponentIds {
            get {
                return this.ComponentIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentIdsField, value) != true)) {
                    this.ComponentIdsField = value;
                    this.RaisePropertyChanged("ComponentIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DetectedBuildId {
            get {
                return this.DetectedBuildIdField;
            }
            set {
                if ((this.DetectedBuildIdField.Equals(value) != true)) {
                    this.DetectedBuildIdField = value;
                    this.RaisePropertyChanged("DetectedBuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetectedBuildName {
            get {
                return this.DetectedBuildNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DetectedBuildNameField, value) != true)) {
                    this.DetectedBuildNameField = value;
                    this.RaisePropertyChanged("DetectedBuildName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DetectedReleaseId {
            get {
                return this.DetectedReleaseIdField;
            }
            set {
                if ((this.DetectedReleaseIdField.Equals(value) != true)) {
                    this.DetectedReleaseIdField = value;
                    this.RaisePropertyChanged("DetectedReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetectedReleaseVersionNumber {
            get {
                return this.DetectedReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.DetectedReleaseVersionNumberField, value) != true)) {
                    this.DetectedReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("DetectedReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedEffort {
            get {
                return this.EstimatedEffortField;
            }
            set {
                if ((this.EstimatedEffortField.Equals(value) != true)) {
                    this.EstimatedEffortField = value;
                    this.RaisePropertyChanged("EstimatedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FixedBuildId {
            get {
                return this.FixedBuildIdField;
            }
            set {
                if ((this.FixedBuildIdField.Equals(value) != true)) {
                    this.FixedBuildIdField = value;
                    this.RaisePropertyChanged("FixedBuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FixedBuildName {
            get {
                return this.FixedBuildNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FixedBuildNameField, value) != true)) {
                    this.FixedBuildNameField = value;
                    this.RaisePropertyChanged("FixedBuildName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentId {
            get {
                return this.IncidentIdField;
            }
            set {
                if ((this.IncidentIdField.Equals(value) != true)) {
                    this.IncidentIdField = value;
                    this.RaisePropertyChanged("IncidentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentStatusId {
            get {
                return this.IncidentStatusIdField;
            }
            set {
                if ((this.IncidentStatusIdField.Equals(value) != true)) {
                    this.IncidentStatusIdField = value;
                    this.RaisePropertyChanged("IncidentStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentStatusName {
            get {
                return this.IncidentStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentStatusNameField, value) != true)) {
                    this.IncidentStatusNameField = value;
                    this.RaisePropertyChanged("IncidentStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IncidentStatusOpenStatus {
            get {
                return this.IncidentStatusOpenStatusField;
            }
            set {
                if ((this.IncidentStatusOpenStatusField.Equals(value) != true)) {
                    this.IncidentStatusOpenStatusField = value;
                    this.RaisePropertyChanged("IncidentStatusOpenStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentTypeId {
            get {
                return this.IncidentTypeIdField;
            }
            set {
                if ((this.IncidentTypeIdField.Equals(value) != true)) {
                    this.IncidentTypeIdField = value;
                    this.RaisePropertyChanged("IncidentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentTypeName {
            get {
                return this.IncidentTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentTypeNameField, value) != true)) {
                    this.IncidentTypeNameField = value;
                    this.RaisePropertyChanged("IncidentTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OpenerId {
            get {
                return this.OpenerIdField;
            }
            set {
                if ((this.OpenerIdField.Equals(value) != true)) {
                    this.OpenerIdField = value;
                    this.RaisePropertyChanged("OpenerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OpenerName {
            get {
                return this.OpenerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OpenerNameField, value) != true)) {
                    this.OpenerNameField = value;
                    this.RaisePropertyChanged("OpenerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PriorityId {
            get {
                return this.PriorityIdField;
            }
            set {
                if ((this.PriorityIdField.Equals(value) != true)) {
                    this.PriorityIdField = value;
                    this.RaisePropertyChanged("PriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriorityName {
            get {
                return this.PriorityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityNameField, value) != true)) {
                    this.PriorityNameField = value;
                    this.RaisePropertyChanged("PriorityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectedEffort {
            get {
                return this.ProjectedEffortField;
            }
            set {
                if ((this.ProjectedEffortField.Equals(value) != true)) {
                    this.ProjectedEffortField = value;
                    this.RaisePropertyChanged("ProjectedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RemainingEffort {
            get {
                return this.RemainingEffortField;
            }
            set {
                if ((this.RemainingEffortField.Equals(value) != true)) {
                    this.RemainingEffortField = value;
                    this.RaisePropertyChanged("RemainingEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ResolvedReleaseId {
            get {
                return this.ResolvedReleaseIdField;
            }
            set {
                if ((this.ResolvedReleaseIdField.Equals(value) != true)) {
                    this.ResolvedReleaseIdField = value;
                    this.RaisePropertyChanged("ResolvedReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResolvedReleaseVersionNumber {
            get {
                return this.ResolvedReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolvedReleaseVersionNumberField, value) != true)) {
                    this.ResolvedReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("ResolvedReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SeverityId {
            get {
                return this.SeverityIdField;
            }
            set {
                if ((this.SeverityIdField.Equals(value) != true)) {
                    this.SeverityIdField = value;
                    this.RaisePropertyChanged("SeverityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SeverityName {
            get {
                return this.SeverityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SeverityNameField, value) != true)) {
                    this.SeverityNameField = value;
                    this.RaisePropertyChanged("SeverityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] TestRunStepIds {
            get {
                return this.TestRunStepIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.TestRunStepIdsField, value) != true)) {
                    this.TestRunStepIdsField = value;
                    this.RaisePropertyChanged("TestRunStepIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> VerifiedReleaseId {
            get {
                return this.VerifiedReleaseIdField;
            }
            set {
                if ((this.VerifiedReleaseIdField.Equals(value) != true)) {
                    this.VerifiedReleaseIdField = value;
                    this.RaisePropertyChanged("VerifiedReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VerifiedReleaseVersionNumber {
            get {
                return this.VerifiedReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VerifiedReleaseVersionNumberField, value) != true)) {
                    this.VerifiedReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("VerifiedReleaseVersionNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRelease", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRelease : SampleDataSync.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AvailableEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountCautionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountFailedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountNotApplicableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountNotRunField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DaysNonWorkingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> MilestoneIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PercentCompleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PlannedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ResourceCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskActualEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskEstimatedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AvailableEffort {
            get {
                return this.AvailableEffortField;
            }
            set {
                if ((this.AvailableEffortField.Equals(value) != true)) {
                    this.AvailableEffortField = value;
                    this.RaisePropertyChanged("AvailableEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountBlocked {
            get {
                return this.CountBlockedField;
            }
            set {
                if ((this.CountBlockedField.Equals(value) != true)) {
                    this.CountBlockedField = value;
                    this.RaisePropertyChanged("CountBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountCaution {
            get {
                return this.CountCautionField;
            }
            set {
                if ((this.CountCautionField.Equals(value) != true)) {
                    this.CountCautionField = value;
                    this.RaisePropertyChanged("CountCaution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountFailed {
            get {
                return this.CountFailedField;
            }
            set {
                if ((this.CountFailedField.Equals(value) != true)) {
                    this.CountFailedField = value;
                    this.RaisePropertyChanged("CountFailed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountNotApplicable {
            get {
                return this.CountNotApplicableField;
            }
            set {
                if ((this.CountNotApplicableField.Equals(value) != true)) {
                    this.CountNotApplicableField = value;
                    this.RaisePropertyChanged("CountNotApplicable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountNotRun {
            get {
                return this.CountNotRunField;
            }
            set {
                if ((this.CountNotRunField.Equals(value) != true)) {
                    this.CountNotRunField = value;
                    this.RaisePropertyChanged("CountNotRun");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountPassed {
            get {
                return this.CountPassedField;
            }
            set {
                if ((this.CountPassedField.Equals(value) != true)) {
                    this.CountPassedField = value;
                    this.RaisePropertyChanged("CountPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorName {
            get {
                return this.CreatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorNameField, value) != true)) {
                    this.CreatorNameField = value;
                    this.RaisePropertyChanged("CreatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DaysNonWorking {
            get {
                return this.DaysNonWorkingField;
            }
            set {
                if ((this.DaysNonWorkingField.Equals(value) != true)) {
                    this.DaysNonWorkingField = value;
                    this.RaisePropertyChanged("DaysNonWorking");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> MilestoneId {
            get {
                return this.MilestoneIdField;
            }
            set {
                if ((this.MilestoneIdField.Equals(value) != true)) {
                    this.MilestoneIdField = value;
                    this.RaisePropertyChanged("MilestoneId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PercentComplete {
            get {
                return this.PercentCompleteField;
            }
            set {
                if ((this.PercentCompleteField.Equals(value) != true)) {
                    this.PercentCompleteField = value;
                    this.RaisePropertyChanged("PercentComplete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PlannedEffort {
            get {
                return this.PlannedEffortField;
            }
            set {
                if ((this.PlannedEffortField.Equals(value) != true)) {
                    this.PlannedEffortField = value;
                    this.RaisePropertyChanged("PlannedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseStatusId {
            get {
                return this.ReleaseStatusIdField;
            }
            set {
                if ((this.ReleaseStatusIdField.Equals(value) != true)) {
                    this.ReleaseStatusIdField = value;
                    this.RaisePropertyChanged("ReleaseStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseStatusName {
            get {
                return this.ReleaseStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseStatusNameField, value) != true)) {
                    this.ReleaseStatusNameField = value;
                    this.RaisePropertyChanged("ReleaseStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseTypeId {
            get {
                return this.ReleaseTypeIdField;
            }
            set {
                if ((this.ReleaseTypeIdField.Equals(value) != true)) {
                    this.ReleaseTypeIdField = value;
                    this.RaisePropertyChanged("ReleaseTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseTypeName {
            get {
                return this.ReleaseTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseTypeNameField, value) != true)) {
                    this.ReleaseTypeNameField = value;
                    this.RaisePropertyChanged("ReleaseTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal ResourceCount {
            get {
                return this.ResourceCountField;
            }
            set {
                if ((this.ResourceCountField.Equals(value) != true)) {
                    this.ResourceCountField = value;
                    this.RaisePropertyChanged("ResourceCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((this.SummaryField.Equals(value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskActualEffort {
            get {
                return this.TaskActualEffortField;
            }
            set {
                if ((this.TaskActualEffortField.Equals(value) != true)) {
                    this.TaskActualEffortField = value;
                    this.RaisePropertyChanged("TaskActualEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskCount {
            get {
                return this.TaskCountField;
            }
            set {
                if ((this.TaskCountField.Equals(value) != true)) {
                    this.TaskCountField = value;
                    this.RaisePropertyChanged("TaskCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskEstimatedEffort {
            get {
                return this.TaskEstimatedEffortField;
            }
            set {
                if ((this.TaskEstimatedEffortField.Equals(value) != true)) {
                    this.TaskEstimatedEffortField = value;
                    this.RaisePropertyChanged("TaskEstimatedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionNumber {
            get {
                return this.VersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionNumberField, value) != true)) {
                    this.VersionNumberField = value;
                    this.RaisePropertyChanged("VersionNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirement", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirement : SampleDataSync.SpiraSoapService.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ComponentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountCautionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountFailedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountTotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> EstimatePointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> GoalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ImportanceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportanceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PercentCompleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequirementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequirementTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequirementTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteRequirementStep[] StepsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskActualEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskEstimatedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ThemeIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ComponentId {
            get {
                return this.ComponentIdField;
            }
            set {
                if ((this.ComponentIdField.Equals(value) != true)) {
                    this.ComponentIdField = value;
                    this.RaisePropertyChanged("ComponentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountBlocked {
            get {
                return this.CoverageCountBlockedField;
            }
            set {
                if ((this.CoverageCountBlockedField.Equals(value) != true)) {
                    this.CoverageCountBlockedField = value;
                    this.RaisePropertyChanged("CoverageCountBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountCaution {
            get {
                return this.CoverageCountCautionField;
            }
            set {
                if ((this.CoverageCountCautionField.Equals(value) != true)) {
                    this.CoverageCountCautionField = value;
                    this.RaisePropertyChanged("CoverageCountCaution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountFailed {
            get {
                return this.CoverageCountFailedField;
            }
            set {
                if ((this.CoverageCountFailedField.Equals(value) != true)) {
                    this.CoverageCountFailedField = value;
                    this.RaisePropertyChanged("CoverageCountFailed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountPassed {
            get {
                return this.CoverageCountPassedField;
            }
            set {
                if ((this.CoverageCountPassedField.Equals(value) != true)) {
                    this.CoverageCountPassedField = value;
                    this.RaisePropertyChanged("CoverageCountPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountTotal {
            get {
                return this.CoverageCountTotalField;
            }
            set {
                if ((this.CoverageCountTotalField.Equals(value) != true)) {
                    this.CoverageCountTotalField = value;
                    this.RaisePropertyChanged("CoverageCountTotal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> EstimatePoints {
            get {
                return this.EstimatePointsField;
            }
            set {
                if ((this.EstimatePointsField.Equals(value) != true)) {
                    this.EstimatePointsField = value;
                    this.RaisePropertyChanged("EstimatePoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedEffort {
            get {
                return this.EstimatedEffortField;
            }
            set {
                if ((this.EstimatedEffortField.Equals(value) != true)) {
                    this.EstimatedEffortField = value;
                    this.RaisePropertyChanged("EstimatedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> GoalId {
            get {
                return this.GoalIdField;
            }
            set {
                if ((this.GoalIdField.Equals(value) != true)) {
                    this.GoalIdField = value;
                    this.RaisePropertyChanged("GoalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ImportanceId {
            get {
                return this.ImportanceIdField;
            }
            set {
                if ((this.ImportanceIdField.Equals(value) != true)) {
                    this.ImportanceIdField = value;
                    this.RaisePropertyChanged("ImportanceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportanceName {
            get {
                return this.ImportanceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportanceNameField, value) != true)) {
                    this.ImportanceNameField = value;
                    this.RaisePropertyChanged("ImportanceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PercentComplete {
            get {
                return this.PercentCompleteField;
            }
            set {
                if ((this.PercentCompleteField.Equals(value) != true)) {
                    this.PercentCompleteField = value;
                    this.RaisePropertyChanged("PercentComplete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseVersionNumber {
            get {
                return this.ReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseVersionNumberField, value) != true)) {
                    this.ReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("ReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequirementId {
            get {
                return this.RequirementIdField;
            }
            set {
                if ((this.RequirementIdField.Equals(value) != true)) {
                    this.RequirementIdField = value;
                    this.RaisePropertyChanged("RequirementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequirementTypeId {
            get {
                return this.RequirementTypeIdField;
            }
            set {
                if ((this.RequirementTypeIdField.Equals(value) != true)) {
                    this.RequirementTypeIdField = value;
                    this.RaisePropertyChanged("RequirementTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequirementTypeName {
            get {
                return this.RequirementTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RequirementTypeNameField, value) != true)) {
                    this.RequirementTypeNameField = value;
                    this.RaisePropertyChanged("RequirementTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteRequirementStep[] Steps {
            get {
                return this.StepsField;
            }
            set {
                if ((object.ReferenceEquals(this.StepsField, value) != true)) {
                    this.StepsField = value;
                    this.RaisePropertyChanged("Steps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((this.SummaryField.Equals(value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskActualEffort {
            get {
                return this.TaskActualEffortField;
            }
            set {
                if ((this.TaskActualEffortField.Equals(value) != true)) {
                    this.TaskActualEffortField = value;
                    this.RaisePropertyChanged("TaskActualEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskCount {
            get {
                return this.TaskCountField;
            }
            set {
                if ((this.TaskCountField.Equals(value) != true)) {
                    this.TaskCountField = value;
                    this.RaisePropertyChanged("TaskCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskEstimatedEffort {
            get {
                return this.TaskEstimatedEffortField;
            }
            set {
                if ((this.TaskEstimatedEffortField.Equals(value) != true)) {
                    this.TaskEstimatedEffortField = value;
                    this.RaisePropertyChanged("TaskEstimatedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ThemeId {
            get {
                return this.ThemeIdField;
            }
            set {
                if ((this.ThemeIdField.Equals(value) != true)) {
                    this.ThemeIdField = value;
                    this.RaisePropertyChanged("ThemeId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteArtifactCustomProperty", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteArtifactCustomProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> BooleanValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateTimeValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> DecimalValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteCustomProperty DefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] IntegerListValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IntegerValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PropertyNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> BooleanValue {
            get {
                return this.BooleanValueField;
            }
            set {
                if ((this.BooleanValueField.Equals(value) != true)) {
                    this.BooleanValueField = value;
                    this.RaisePropertyChanged("BooleanValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateTimeValue {
            get {
                return this.DateTimeValueField;
            }
            set {
                if ((this.DateTimeValueField.Equals(value) != true)) {
                    this.DateTimeValueField = value;
                    this.RaisePropertyChanged("DateTimeValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> DecimalValue {
            get {
                return this.DecimalValueField;
            }
            set {
                if ((this.DecimalValueField.Equals(value) != true)) {
                    this.DecimalValueField = value;
                    this.RaisePropertyChanged("DecimalValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteCustomProperty Definition {
            get {
                return this.DefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.DefinitionField, value) != true)) {
                    this.DefinitionField = value;
                    this.RaisePropertyChanged("Definition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] IntegerListValue {
            get {
                return this.IntegerListValueField;
            }
            set {
                if ((object.ReferenceEquals(this.IntegerListValueField, value) != true)) {
                    this.IntegerListValueField = value;
                    this.RaisePropertyChanged("IntegerListValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IntegerValue {
            get {
                return this.IntegerValueField;
            }
            set {
                if ((this.IntegerValueField.Equals(value) != true)) {
                    this.IntegerValueField = value;
                    this.RaisePropertyChanged("IntegerValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PropertyNumber {
            get {
                return this.PropertyNumberField;
            }
            set {
                if ((this.PropertyNumberField.Equals(value) != true)) {
                    this.PropertyNumberField = value;
                    this.RaisePropertyChanged("PropertyNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCustomProperty", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCustomProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteCustomList CustomListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomPropertyFieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomPropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomPropertyTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomPropertyTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteCustomPropertyOption[] OptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PropertyNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemDataTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteCustomList CustomList {
            get {
                return this.CustomListField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomListField, value) != true)) {
                    this.CustomListField = value;
                    this.RaisePropertyChanged("CustomList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomPropertyFieldName {
            get {
                return this.CustomPropertyFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertyFieldNameField, value) != true)) {
                    this.CustomPropertyFieldNameField = value;
                    this.RaisePropertyChanged("CustomPropertyFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomPropertyId {
            get {
                return this.CustomPropertyIdField;
            }
            set {
                if ((this.CustomPropertyIdField.Equals(value) != true)) {
                    this.CustomPropertyIdField = value;
                    this.RaisePropertyChanged("CustomPropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomPropertyTypeId {
            get {
                return this.CustomPropertyTypeIdField;
            }
            set {
                if ((this.CustomPropertyTypeIdField.Equals(value) != true)) {
                    this.CustomPropertyTypeIdField = value;
                    this.RaisePropertyChanged("CustomPropertyTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomPropertyTypeName {
            get {
                return this.CustomPropertyTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertyTypeNameField, value) != true)) {
                    this.CustomPropertyTypeNameField = value;
                    this.RaisePropertyChanged("CustomPropertyTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteCustomPropertyOption[] Options {
            get {
                return this.OptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionsField, value) != true)) {
                    this.OptionsField = value;
                    this.RaisePropertyChanged("Options");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectTemplateId {
            get {
                return this.ProjectTemplateIdField;
            }
            set {
                if ((this.ProjectTemplateIdField.Equals(value) != true)) {
                    this.ProjectTemplateIdField = value;
                    this.RaisePropertyChanged("ProjectTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PropertyNumber {
            get {
                return this.PropertyNumberField;
            }
            set {
                if ((this.PropertyNumberField.Equals(value) != true)) {
                    this.PropertyNumberField = value;
                    this.RaisePropertyChanged("PropertyNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemDataType {
            get {
                return this.SystemDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemDataTypeField, value) != true)) {
                    this.SystemDataTypeField = value;
                    this.RaisePropertyChanged("SystemDataType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCustomList", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCustomList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomPropertyListIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SortedOnValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteCustomListValue[] ValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomPropertyListId {
            get {
                return this.CustomPropertyListIdField;
            }
            set {
                if ((this.CustomPropertyListIdField.Equals(value) != true)) {
                    this.CustomPropertyListIdField = value;
                    this.RaisePropertyChanged("CustomPropertyListId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectTemplateId {
            get {
                return this.ProjectTemplateIdField;
            }
            set {
                if ((this.ProjectTemplateIdField.Equals(value) != true)) {
                    this.ProjectTemplateIdField = value;
                    this.RaisePropertyChanged("ProjectTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SortedOnValue {
            get {
                return this.SortedOnValueField;
            }
            set {
                if ((this.SortedOnValueField.Equals(value) != true)) {
                    this.SortedOnValueField = value;
                    this.RaisePropertyChanged("SortedOnValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteCustomListValue[] Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCustomPropertyOption", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCustomPropertyOption : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomPropertyOptionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomPropertyOptionId {
            get {
                return this.CustomPropertyOptionIdField;
            }
            set {
                if ((this.CustomPropertyOptionIdField.Equals(value) != true)) {
                    this.CustomPropertyOptionIdField = value;
                    this.RaisePropertyChanged("CustomPropertyOptionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCustomListValue", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCustomListValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomPropertyListIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomPropertyValueIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentCustomPropertyValueIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomPropertyListId {
            get {
                return this.CustomPropertyListIdField;
            }
            set {
                if ((this.CustomPropertyListIdField.Equals(value) != true)) {
                    this.CustomPropertyListIdField = value;
                    this.RaisePropertyChanged("CustomPropertyListId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomPropertyValueId {
            get {
                return this.CustomPropertyValueIdField;
            }
            set {
                if ((this.CustomPropertyValueIdField.Equals(value) != true)) {
                    this.CustomPropertyValueIdField = value;
                    this.RaisePropertyChanged("CustomPropertyValueId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentCustomPropertyValueId {
            get {
                return this.ParentCustomPropertyValueIdField;
            }
            set {
                if ((this.ParentCustomPropertyValueIdField.Equals(value) != true)) {
                    this.ParentCustomPropertyValueIdField = value;
                    this.RaisePropertyChanged("ParentCustomPropertyValueId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestRunStep", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestRunStep : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActualResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExecutionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpectedResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestRunIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestRunStepIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestStepIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActualResult {
            get {
                return this.ActualResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ActualResultField, value) != true)) {
                    this.ActualResultField = value;
                    this.RaisePropertyChanged("ActualResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExecutionStatusId {
            get {
                return this.ExecutionStatusIdField;
            }
            set {
                if ((this.ExecutionStatusIdField.Equals(value) != true)) {
                    this.ExecutionStatusIdField = value;
                    this.RaisePropertyChanged("ExecutionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExpectedResult {
            get {
                return this.ExpectedResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpectedResultField, value) != true)) {
                    this.ExpectedResultField = value;
                    this.RaisePropertyChanged("ExpectedResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleData {
            get {
                return this.SampleDataField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleDataField, value) != true)) {
                    this.SampleDataField = value;
                    this.RaisePropertyChanged("SampleData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestRunId {
            get {
                return this.TestRunIdField;
            }
            set {
                if ((this.TestRunIdField.Equals(value) != true)) {
                    this.TestRunIdField = value;
                    this.RaisePropertyChanged("TestRunId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestRunStepId {
            get {
                return this.TestRunStepIdField;
            }
            set {
                if ((this.TestRunStepIdField.Equals(value) != true)) {
                    this.TestRunStepIdField = value;
                    this.RaisePropertyChanged("TestRunStepId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestStepId {
            get {
                return this.TestStepIdField;
            }
            set {
                if ((this.TestStepIdField.Equals(value) != true)) {
                    this.TestStepIdField = value;
                    this.RaisePropertyChanged("TestStepId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSetTestCaseParameter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSetTestCaseParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseParameterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetTestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseParameterId {
            get {
                return this.TestCaseParameterIdField;
            }
            set {
                if ((this.TestCaseParameterIdField.Equals(value) != true)) {
                    this.TestCaseParameterIdField = value;
                    this.RaisePropertyChanged("TestCaseParameterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetTestCaseId {
            get {
                return this.TestSetTestCaseIdField;
            }
            set {
                if ((this.TestSetTestCaseIdField.Equals(value) != true)) {
                    this.TestSetTestCaseIdField = value;
                    this.RaisePropertyChanged("TestSetTestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteLinkedArtifact", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteLinkedArtifact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactId {
            get {
                return this.ArtifactIdField;
            }
            set {
                if ((this.ArtifactIdField.Equals(value) != true)) {
                    this.ArtifactIdField = value;
                    this.RaisePropertyChanged("ArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDocumentVersion", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDocumentVersion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AttachmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AttachmentVersionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilenameOrUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UploadDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AttachmentId {
            get {
                return this.AttachmentIdField;
            }
            set {
                if ((this.AttachmentIdField.Equals(value) != true)) {
                    this.AttachmentIdField = value;
                    this.RaisePropertyChanged("AttachmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AttachmentVersionId {
            get {
                return this.AttachmentVersionIdField;
            }
            set {
                if ((this.AttachmentVersionIdField.Equals(value) != true)) {
                    this.AttachmentVersionIdField = value;
                    this.RaisePropertyChanged("AttachmentVersionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilenameOrUrl {
            get {
                return this.FilenameOrUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FilenameOrUrlField, value) != true)) {
                    this.FilenameOrUrlField = value;
                    this.RaisePropertyChanged("FilenameOrUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UploadDate {
            get {
                return this.UploadDateField;
            }
            set {
                if ((this.UploadDateField.Equals(value) != true)) {
                    this.UploadDateField = value;
                    this.RaisePropertyChanged("UploadDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionNumber {
            get {
                return this.VersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionNumberField, value) != true)) {
                    this.VersionNumberField = value;
                    this.RaisePropertyChanged("VersionNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirementStep", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirementStep : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ConcurrencyDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequirementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequirementStepIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ConcurrencyDate {
            get {
                return this.ConcurrencyDateField;
            }
            set {
                if ((this.ConcurrencyDateField.Equals(value) != true)) {
                    this.ConcurrencyDateField = value;
                    this.RaisePropertyChanged("ConcurrencyDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementId {
            get {
                return this.RequirementIdField;
            }
            set {
                if ((this.RequirementIdField.Equals(value) != true)) {
                    this.RequirementIdField = value;
                    this.RaisePropertyChanged("RequirementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequirementStepId {
            get {
                return this.RequirementStepIdField;
            }
            set {
                if ((this.RequirementStepIdField.Equals(value) != true)) {
                    this.RequirementStepIdField = value;
                    this.RaisePropertyChanged("RequirementStepId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
    [System.SerializableAttribute()]
    public partial struct ValidationFaultMessage : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.ValidationFaultMessageItem[] MessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummaryField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.ValidationFaultMessageItem[] Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryField, value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidationFaultMessageItem", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
    [System.SerializableAttribute()]
    public partial struct ValidationFaultMessageItem : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteAutomationEngine", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteAutomationEngine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationEngineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationEngineId {
            get {
                return this.AutomationEngineIdField;
            }
            set {
                if ((this.AutomationEngineIdField.Equals(value) != true)) {
                    this.AutomationEngineIdField = value;
                    this.RaisePropertyChanged("AutomationEngineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteComponent", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteComponent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ComponentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ComponentId {
            get {
                return this.ComponentIdField;
            }
            set {
                if ((this.ComponentIdField.Equals(value) != true)) {
                    this.ComponentIdField = value;
                    this.RaisePropertyChanged("ComponentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteBuild", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteBuild : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BuildStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BuildStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteBuildSourceCode[] RevisionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BuildId {
            get {
                return this.BuildIdField;
            }
            set {
                if ((this.BuildIdField.Equals(value) != true)) {
                    this.BuildIdField = value;
                    this.RaisePropertyChanged("BuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BuildStatusId {
            get {
                return this.BuildStatusIdField;
            }
            set {
                if ((this.BuildStatusIdField.Equals(value) != true)) {
                    this.BuildStatusIdField = value;
                    this.RaisePropertyChanged("BuildStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BuildStatusName {
            get {
                return this.BuildStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BuildStatusNameField, value) != true)) {
                    this.BuildStatusNameField = value;
                    this.RaisePropertyChanged("BuildStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteBuildSourceCode[] Revisions {
            get {
                return this.RevisionsField;
            }
            set {
                if ((object.ReferenceEquals(this.RevisionsField, value) != true)) {
                    this.RevisionsField = value;
                    this.RaisePropertyChanged("Revisions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteBuildSourceCode", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteBuildSourceCode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RevisionKeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BuildId {
            get {
                return this.BuildIdField;
            }
            set {
                if ((this.BuildIdField.Equals(value) != true)) {
                    this.BuildIdField = value;
                    this.RaisePropertyChanged("BuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RevisionKey {
            get {
                return this.RevisionKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.RevisionKeyField, value) != true)) {
                    this.RevisionKeyField = value;
                    this.RaisePropertyChanged("RevisionKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSourceCodeBranch", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSourceCodeBranch : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDefault {
            get {
                return this.IsDefaultField;
            }
            set {
                if ((this.IsDefaultField.Equals(value) != true)) {
                    this.IsDefaultField = value;
                    this.RaisePropertyChanged("IsDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSourceCodeFolder", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSourceCodeFolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteSourceCodeFolder[] FoldersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRootField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteSourceCodeFolder ParentFolderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeFolder[] Folders {
            get {
                return this.FoldersField;
            }
            set {
                if ((object.ReferenceEquals(this.FoldersField, value) != true)) {
                    this.FoldersField = value;
                    this.RaisePropertyChanged("Folders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRoot {
            get {
                return this.IsRootField;
            }
            set {
                if ((this.IsRootField.Equals(value) != true)) {
                    this.IsRootField = value;
                    this.RaisePropertyChanged("IsRoot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeFolder ParentFolder {
            get {
                return this.ParentFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentFolderField, value) != true)) {
                    this.ParentFolderField = value;
                    this.RaisePropertyChanged("ParentFolder");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSourceCodeFile", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSourceCodeFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision LastRevisionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteLinkedArtifact[] LinkedArtifactsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteSourceCodeFolder ParentFolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision LastRevision {
            get {
                return this.LastRevisionField;
            }
            set {
                if ((object.ReferenceEquals(this.LastRevisionField, value) != true)) {
                    this.LastRevisionField = value;
                    this.RaisePropertyChanged("LastRevision");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteLinkedArtifact[] LinkedArtifacts {
            get {
                return this.LinkedArtifactsField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkedArtifactsField, value) != true)) {
                    this.LinkedArtifactsField = value;
                    this.RaisePropertyChanged("LinkedArtifacts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeFolder ParentFolder {
            get {
                return this.ParentFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentFolderField, value) != true)) {
                    this.ParentFolderField = value;
                    this.RaisePropertyChanged("ParentFolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSourceCodeRevision", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSourceCodeRevision : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ContentChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PropertiesChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UpdateDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ContentChanged {
            get {
                return this.ContentChangedField;
            }
            set {
                if ((this.ContentChangedField.Equals(value) != true)) {
                    this.ContentChangedField = value;
                    this.RaisePropertyChanged("ContentChanged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PropertiesChanged {
            get {
                return this.PropertiesChangedField;
            }
            set {
                if ((this.PropertiesChangedField.Equals(value) != true)) {
                    this.PropertiesChangedField = value;
                    this.RaisePropertyChanged("PropertiesChanged");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdateDate {
            get {
                return this.UpdateDateField;
            }
            set {
                if ((this.UpdateDateField.Equals(value) != true)) {
                    this.UpdateDateField = value;
                    this.RaisePropertyChanged("UpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteMessageInfo", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteMessageInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] OnlineUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UnreadMessagesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] OnlineUsers {
            get {
                return this.OnlineUsersField;
            }
            set {
                if ((object.ReferenceEquals(this.OnlineUsersField, value) != true)) {
                    this.OnlineUsersField = value;
                    this.RaisePropertyChanged("OnlineUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UnreadMessages {
            get {
                return this.UnreadMessagesField;
            }
            set {
                if ((this.UnreadMessagesField.Equals(value) != true)) {
                    this.UnreadMessagesField = value;
                    this.RaisePropertyChanged("UnreadMessages");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteUserMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteUserMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnreadMessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnreadMessages {
            get {
                return this.UnreadMessagesField;
            }
            set {
                if ((this.UnreadMessagesField.Equals(value) != true)) {
                    this.UnreadMessagesField = value;
                    this.RaisePropertyChanged("UnreadMessages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsReadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long MessageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteLinkedArtifact RecipientArtifactField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteUser RecipientUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteUser SenderUserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRead {
            get {
                return this.IsReadField;
            }
            set {
                if ((this.IsReadField.Equals(value) != true)) {
                    this.IsReadField = value;
                    this.RaisePropertyChanged("IsRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long MessageId {
            get {
                return this.MessageIdField;
            }
            set {
                if ((this.MessageIdField.Equals(value) != true)) {
                    this.MessageIdField = value;
                    this.RaisePropertyChanged("MessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteLinkedArtifact RecipientArtifact {
            get {
                return this.RecipientArtifactField;
            }
            set {
                if ((object.ReferenceEquals(this.RecipientArtifactField, value) != true)) {
                    this.RecipientArtifactField = value;
                    this.RaisePropertyChanged("RecipientArtifact");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteUser RecipientUser {
            get {
                return this.RecipientUserField;
            }
            set {
                if ((object.ReferenceEquals(this.RecipientUserField, value) != true)) {
                    this.RecipientUserField = value;
                    this.RaisePropertyChanged("RecipientUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteUser SenderUser {
            get {
                return this.SenderUserField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderUserField, value) != true)) {
                    this.SenderUserField = value;
                    this.RaisePropertyChanged("SenderUser");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteHistoryChange", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteHistoryChange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ArtifactFieldIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteHistoryChangeSet ChangeSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ChangeSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomPropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldCaptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long HistoryChangeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NewValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OldValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ArtifactFieldId {
            get {
                return this.ArtifactFieldIdField;
            }
            set {
                if ((this.ArtifactFieldIdField.Equals(value) != true)) {
                    this.ArtifactFieldIdField = value;
                    this.RaisePropertyChanged("ArtifactFieldId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteHistoryChangeSet ChangeSet {
            get {
                return this.ChangeSetField;
            }
            set {
                if ((object.ReferenceEquals(this.ChangeSetField, value) != true)) {
                    this.ChangeSetField = value;
                    this.RaisePropertyChanged("ChangeSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ChangeSetId {
            get {
                return this.ChangeSetIdField;
            }
            set {
                if ((this.ChangeSetIdField.Equals(value) != true)) {
                    this.ChangeSetIdField = value;
                    this.RaisePropertyChanged("ChangeSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomPropertyId {
            get {
                return this.CustomPropertyIdField;
            }
            set {
                if ((this.CustomPropertyIdField.Equals(value) != true)) {
                    this.CustomPropertyIdField = value;
                    this.RaisePropertyChanged("CustomPropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldCaption {
            get {
                return this.FieldCaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldCaptionField, value) != true)) {
                    this.FieldCaptionField = value;
                    this.RaisePropertyChanged("FieldCaption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long HistoryChangeId {
            get {
                return this.HistoryChangeIdField;
            }
            set {
                if ((this.HistoryChangeIdField.Equals(value) != true)) {
                    this.HistoryChangeIdField = value;
                    this.RaisePropertyChanged("HistoryChangeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NewValue {
            get {
                return this.NewValueField;
            }
            set {
                if ((object.ReferenceEquals(this.NewValueField, value) != true)) {
                    this.NewValueField = value;
                    this.RaisePropertyChanged("NewValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OldValue {
            get {
                return this.OldValueField;
            }
            set {
                if ((object.ReferenceEquals(this.OldValueField, value) != true)) {
                    this.OldValueField = value;
                    this.RaisePropertyChanged("OldValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteHistoryChangeSet", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteHistoryChangeSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ChangeDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChangeTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChangeTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteHistoryChange[] ChangesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long HistoryChangeSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeaningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SignedIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserFullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactId {
            get {
                return this.ArtifactIdField;
            }
            set {
                if ((this.ArtifactIdField.Equals(value) != true)) {
                    this.ArtifactIdField = value;
                    this.RaisePropertyChanged("ArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactName {
            get {
                return this.ArtifactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactNameField, value) != true)) {
                    this.ArtifactNameField = value;
                    this.RaisePropertyChanged("ArtifactName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactTypeName {
            get {
                return this.ArtifactTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactTypeNameField, value) != true)) {
                    this.ArtifactTypeNameField = value;
                    this.RaisePropertyChanged("ArtifactTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ChangeDate {
            get {
                return this.ChangeDateField;
            }
            set {
                if ((this.ChangeDateField.Equals(value) != true)) {
                    this.ChangeDateField = value;
                    this.RaisePropertyChanged("ChangeDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChangeTypeId {
            get {
                return this.ChangeTypeIdField;
            }
            set {
                if ((this.ChangeTypeIdField.Equals(value) != true)) {
                    this.ChangeTypeIdField = value;
                    this.RaisePropertyChanged("ChangeTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChangeTypeName {
            get {
                return this.ChangeTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ChangeTypeNameField, value) != true)) {
                    this.ChangeTypeNameField = value;
                    this.RaisePropertyChanged("ChangeTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteHistoryChange[] Changes {
            get {
                return this.ChangesField;
            }
            set {
                if ((object.ReferenceEquals(this.ChangesField, value) != true)) {
                    this.ChangesField = value;
                    this.RaisePropertyChanged("Changes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long HistoryChangeSetId {
            get {
                return this.HistoryChangeSetIdField;
            }
            set {
                if ((this.HistoryChangeSetIdField.Equals(value) != true)) {
                    this.HistoryChangeSetIdField = value;
                    this.RaisePropertyChanged("HistoryChangeSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Meaning {
            get {
                return this.MeaningField;
            }
            set {
                if ((object.ReferenceEquals(this.MeaningField, value) != true)) {
                    this.MeaningField = value;
                    this.RaisePropertyChanged("Meaning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SignedId {
            get {
                return this.SignedIdField;
            }
            set {
                if ((this.SignedIdField.Equals(value) != true)) {
                    this.SignedIdField = value;
                    this.RaisePropertyChanged("SignedId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserFullName {
            get {
                return this.UserFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserFullNameField, value) != true)) {
                    this.UserFullNameField = value;
                    this.RaisePropertyChanged("UserFullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteArtifactSubscription", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteArtifactSubscription : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserFullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactDescription {
            get {
                return this.ArtifactDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactDescriptionField, value) != true)) {
                    this.ArtifactDescriptionField = value;
                    this.RaisePropertyChanged("ArtifactDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactId {
            get {
                return this.ArtifactIdField;
            }
            set {
                if ((this.ArtifactIdField.Equals(value) != true)) {
                    this.ArtifactIdField = value;
                    this.RaisePropertyChanged("ArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactName {
            get {
                return this.ArtifactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactNameField, value) != true)) {
                    this.ArtifactNameField = value;
                    this.RaisePropertyChanged("ArtifactName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactTypeName {
            get {
                return this.ArtifactTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactTypeNameField, value) != true)) {
                    this.ArtifactTypeNameField = value;
                    this.RaisePropertyChanged("ArtifactTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserFullName {
            get {
                return this.UserFullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserFullNameField, value) != true)) {
                    this.UserFullNameField = value;
                    this.RaisePropertyChanged("UserFullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSavedFilter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSavedFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteFilter[] FiltersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSharedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SavedFilterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteSort SortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactTypeName {
            get {
                return this.ArtifactTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactTypeNameField, value) != true)) {
                    this.ArtifactTypeNameField = value;
                    this.RaisePropertyChanged("ArtifactTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteFilter[] Filters {
            get {
                return this.FiltersField;
            }
            set {
                if ((object.ReferenceEquals(this.FiltersField, value) != true)) {
                    this.FiltersField = value;
                    this.RaisePropertyChanged("Filters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsShared {
            get {
                return this.IsSharedField;
            }
            set {
                if ((this.IsSharedField.Equals(value) != true)) {
                    this.IsSharedField = value;
                    this.RaisePropertyChanged("IsShared");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SavedFilterId {
            get {
                return this.SavedFilterIdField;
            }
            set {
                if ((this.SavedFilterIdField.Equals(value) != true)) {
                    this.SavedFilterIdField = value;
                    this.RaisePropertyChanged("SavedFilterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteSort Sort {
            get {
                return this.SortField;
            }
            set {
                if ((object.ReferenceEquals(this.SortField, value) != true)) {
                    this.SortField = value;
                    this.RaisePropertyChanged("Sort");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTableData", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTableData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteTableColumn[] ColumnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteTableRow[] RowsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteTableColumn[] Columns {
            get {
                return this.ColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnsField, value) != true)) {
                    this.ColumnsField = value;
                    this.RaisePropertyChanged("Columns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteTableRow[] Rows {
            get {
                return this.RowsField;
            }
            set {
                if ((object.ReferenceEquals(this.RowsField, value) != true)) {
                    this.RowsField = value;
                    this.RaisePropertyChanged("Rows");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTableColumn", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTableColumn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CaptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNameSpaceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Caption {
            get {
                return this.CaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CaptionField, value) != true)) {
                    this.CaptionField = value;
                    this.RaisePropertyChanged("Caption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeNameSpace {
            get {
                return this.TypeNameSpaceField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameSpaceField, value) != true)) {
                    this.TypeNameSpaceField = value;
                    this.RaisePropertyChanged("TypeNameSpace");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTableRow", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTableRow : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteTableRowItem[] ItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteTableRowItem[] Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemsField, value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RowNumber {
            get {
                return this.RowNumberField;
            }
            set {
                if ((this.RowNumberField.Equals(value) != true)) {
                    this.RowNumberField = value;
                    this.RaisePropertyChanged("RowNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTableRowItem", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteCredentials))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestConfigurationEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestConfigurationEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestConfigurationParameterValue[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestConfigurationParameterValue))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteUser))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteUser[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteFilter[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.DateRange))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.MultiValueFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSort))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteAutomationHost[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteAutomationHost))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteArtifact))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteArtifactCustomProperty[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteArtifactCustomProperty))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteCustomProperty))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteCustomList))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteCustomListValue[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteCustomListValue))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteCustomPropertyOption[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteCustomPropertyOption))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteAutomationEngine))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteAutomationEngine[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteComponent[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteComponent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteBuild[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteBuild))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteBuildSourceCode[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteBuildSourceCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSourceCodeBranch[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSourceCodeBranch))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSourceCodeFolder[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSourceCodeFolder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSourceCodeFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteLinkedArtifact[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteLinkedArtifact))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteMessageInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteUserMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteUserMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteMessage[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteHistoryChange[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteHistoryChange))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteHistoryChangeSet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteArtifactSubscription[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteArtifactSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSavedFilter[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSavedFilter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTableData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTableColumn[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTableColumn))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTableRow[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTableRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTableRowItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSavedReport[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSavedReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteComment[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteComment))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirementStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirementStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirementType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirementType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirementImportance[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirementImportance))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteWorkflowField[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteWorkflowField))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteWorkflowTransition))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirementStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirementStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSetting[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteSetting))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTask[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTaskStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTaskStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTaskType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTaskType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTaskPriority[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTaskPriority))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTaskFolder[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTaskFolder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCaseFolder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCaseParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCaseParameter[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestStepParameter[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestStepParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCase[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCaseFolder[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCaseStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCaseType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCaseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCasePriority[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestCasePriority))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteManualTestRun[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteManualTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestRunStep[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestRunStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseParameter[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestRun[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestSet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestSetFolder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestSet[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestSetFolder[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestSetParameter[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteTestSetParameter))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDataSyncSystem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDataSyncSystem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteCustomProperty[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteCustomList[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDataMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDataMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteProjectArtifact[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteProjectArtifact))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDocument))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDocumentVersion[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDocumentVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDocument[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDocumentType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDocumentType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDocumentFolder[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteDocumentFolder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteAssociation))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteAssociation[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteIncidentPriority))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteIncidentSeverity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteIncidentStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteIncidentType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteIncident))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteIncident[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteIncidentPriority[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteIncidentSeverity[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteIncidentStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteIncidentType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteProjectTemplate))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteProjectTemplate[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteProject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteProject[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteProjectUser[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteProjectUser))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteProjectRole[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteProjectRole))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRolePermission[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRolePermission))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRelease))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRelease[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteReleaseStatus[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteReleaseStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteReleaseType[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteReleaseType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirement))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirement[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessageItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessageItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(int[]))]
    public partial class RemoteTableRowItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteTableColumn ColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteTableColumn Column {
            get {
                return this.ColumnField;
            }
            set {
                if ((object.ReferenceEquals(this.ColumnField, value) != true)) {
                    this.ColumnField = value;
                    this.RaisePropertyChanged("Column");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSavedReport", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSavedReport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSharedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReportFormatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SavedReportIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsShared {
            get {
                return this.IsSharedField;
            }
            set {
                if ((this.IsSharedField.Equals(value) != true)) {
                    this.IsSharedField = value;
                    this.RaisePropertyChanged("IsShared");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReportFormatId {
            get {
                return this.ReportFormatIdField;
            }
            set {
                if ((this.ReportFormatIdField.Equals(value) != true)) {
                    this.ReportFormatIdField = value;
                    this.RaisePropertyChanged("ReportFormatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SavedReportId {
            get {
                return this.SavedReportIdField;
            }
            set {
                if ((this.SavedReportIdField.Equals(value) != true)) {
                    this.SavedReportIdField = value;
                    this.RaisePropertyChanged("SavedReportId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteComment", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteComment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CommentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPermanentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactId {
            get {
                return this.ArtifactIdField;
            }
            set {
                if ((this.ArtifactIdField.Equals(value) != true)) {
                    this.ArtifactIdField = value;
                    this.RaisePropertyChanged("ArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CommentId {
            get {
                return this.CommentIdField;
            }
            set {
                if ((this.CommentIdField.Equals(value) != true)) {
                    this.CommentIdField = value;
                    this.RaisePropertyChanged("CommentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPermanent {
            get {
                return this.IsPermanentField;
            }
            set {
                if ((this.IsPermanentField.Equals(value) != true)) {
                    this.IsPermanentField = value;
                    this.RaisePropertyChanged("IsPermanent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirementStatus", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirementStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequirementStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementStatusId {
            get {
                return this.RequirementStatusIdField;
            }
            set {
                if ((this.RequirementStatusIdField.Equals(value) != true)) {
                    this.RequirementStatusIdField = value;
                    this.RaisePropertyChanged("RequirementStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirementType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirementType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsStepsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequirementTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDefault {
            get {
                return this.IsDefaultField;
            }
            set {
                if ((this.IsDefaultField.Equals(value) != true)) {
                    this.IsDefaultField = value;
                    this.RaisePropertyChanged("IsDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSteps {
            get {
                return this.IsStepsField;
            }
            set {
                if ((this.IsStepsField.Equals(value) != true)) {
                    this.IsStepsField = value;
                    this.RaisePropertyChanged("IsSteps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementTypeId {
            get {
                return this.RequirementTypeIdField;
            }
            set {
                if ((this.RequirementTypeIdField.Equals(value) != true)) {
                    this.RequirementTypeIdField = value;
                    this.RaisePropertyChanged("RequirementTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirementImportance", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirementImportance : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ImportanceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ImportanceId {
            get {
                return this.ImportanceIdField;
            }
            set {
                if ((this.ImportanceIdField.Equals(value) != true)) {
                    this.ImportanceIdField = value;
                    this.RaisePropertyChanged("ImportanceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteWorkflowField", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteWorkflowField : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldCaptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FieldIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FieldStateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldCaption {
            get {
                return this.FieldCaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldCaptionField, value) != true)) {
                    this.FieldCaptionField = value;
                    this.RaisePropertyChanged("FieldCaption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldId {
            get {
                return this.FieldIdField;
            }
            set {
                if ((this.FieldIdField.Equals(value) != true)) {
                    this.FieldIdField = value;
                    this.RaisePropertyChanged("FieldId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldStateId {
            get {
                return this.FieldStateIdField;
            }
            set {
                if ((this.FieldStateIdField.Equals(value) != true)) {
                    this.FieldStateIdField = value;
                    this.RaisePropertyChanged("FieldStateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteWorkflowTransition", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteWorkflowTransition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExecuteByCreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExecuteByOwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RequireSignatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusId_InputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusId_OutputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusName_InputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusName_OutputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TransitionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExecuteByCreator {
            get {
                return this.ExecuteByCreatorField;
            }
            set {
                if ((this.ExecuteByCreatorField.Equals(value) != true)) {
                    this.ExecuteByCreatorField = value;
                    this.RaisePropertyChanged("ExecuteByCreator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExecuteByOwner {
            get {
                return this.ExecuteByOwnerField;
            }
            set {
                if ((this.ExecuteByOwnerField.Equals(value) != true)) {
                    this.ExecuteByOwnerField = value;
                    this.RaisePropertyChanged("ExecuteByOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RequireSignature {
            get {
                return this.RequireSignatureField;
            }
            set {
                if ((this.RequireSignatureField.Equals(value) != true)) {
                    this.RequireSignatureField = value;
                    this.RaisePropertyChanged("RequireSignature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId_Input {
            get {
                return this.StatusId_InputField;
            }
            set {
                if ((this.StatusId_InputField.Equals(value) != true)) {
                    this.StatusId_InputField = value;
                    this.RaisePropertyChanged("StatusId_Input");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusId_Output {
            get {
                return this.StatusId_OutputField;
            }
            set {
                if ((this.StatusId_OutputField.Equals(value) != true)) {
                    this.StatusId_OutputField = value;
                    this.RaisePropertyChanged("StatusId_Output");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName_Input {
            get {
                return this.StatusName_InputField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusName_InputField, value) != true)) {
                    this.StatusName_InputField = value;
                    this.RaisePropertyChanged("StatusName_Input");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName_Output {
            get {
                return this.StatusName_OutputField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusName_OutputField, value) != true)) {
                    this.StatusName_OutputField = value;
                    this.RaisePropertyChanged("StatusName_Output");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransitionId {
            get {
                return this.TransitionIdField;
            }
            set {
                if ((this.TransitionIdField.Equals(value) != true)) {
                    this.TransitionIdField = value;
                    this.RaisePropertyChanged("TransitionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteWorkflowCustomProperty", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteWorkflowCustomProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomPropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldCaptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FieldStateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomPropertyId {
            get {
                return this.CustomPropertyIdField;
            }
            set {
                if ((this.CustomPropertyIdField.Equals(value) != true)) {
                    this.CustomPropertyIdField = value;
                    this.RaisePropertyChanged("CustomPropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldCaption {
            get {
                return this.FieldCaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldCaptionField, value) != true)) {
                    this.FieldCaptionField = value;
                    this.RaisePropertyChanged("FieldCaption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldStateId {
            get {
                return this.FieldStateIdField;
            }
            set {
                if ((this.FieldStateIdField.Equals(value) != true)) {
                    this.FieldStateIdField = value;
                    this.RaisePropertyChanged("FieldStateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirementTestStepMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirementTestStepMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequirementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestStepIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementId {
            get {
                return this.RequirementIdField;
            }
            set {
                if ((this.RequirementIdField.Equals(value) != true)) {
                    this.RequirementIdField = value;
                    this.RaisePropertyChanged("RequirementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestStepId {
            get {
                return this.TestStepIdField;
            }
            set {
                if ((this.TestStepIdField.Equals(value) != true)) {
                    this.TestStepIdField = value;
                    this.RaisePropertyChanged("TestStepId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteVersion", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteVersion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Patch {
            get {
                return this.PatchField;
            }
            set {
                if ((this.PatchField.Equals(value) != true)) {
                    this.PatchField = value;
                    this.RaisePropertyChanged("Patch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSetting", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSetting : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTaskStatus", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTaskStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskStatusId {
            get {
                return this.TaskStatusIdField;
            }
            set {
                if ((this.TaskStatusIdField.Equals(value) != true)) {
                    this.TaskStatusIdField = value;
                    this.RaisePropertyChanged("TaskStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTaskType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTaskType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCodeReviewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPullRequestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCodeReview {
            get {
                return this.IsCodeReviewField;
            }
            set {
                if ((this.IsCodeReviewField.Equals(value) != true)) {
                    this.IsCodeReviewField = value;
                    this.RaisePropertyChanged("IsCodeReview");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDefault {
            get {
                return this.IsDefaultField;
            }
            set {
                if ((this.IsDefaultField.Equals(value) != true)) {
                    this.IsDefaultField = value;
                    this.RaisePropertyChanged("IsDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPullRequest {
            get {
                return this.IsPullRequestField;
            }
            set {
                if ((this.IsPullRequestField.Equals(value) != true)) {
                    this.IsPullRequestField = value;
                    this.RaisePropertyChanged("IsPullRequest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskTypeId {
            get {
                return this.TaskTypeIdField;
            }
            set {
                if ((this.TaskTypeIdField.Equals(value) != true)) {
                    this.TaskTypeIdField = value;
                    this.RaisePropertyChanged("TaskTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTaskPriority", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTaskPriority : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PriorityId {
            get {
                return this.PriorityIdField;
            }
            set {
                if ((this.PriorityIdField.Equals(value) != true)) {
                    this.PriorityIdField = value;
                    this.RaisePropertyChanged("PriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTaskFolder", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTaskFolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentTaskFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskFolderIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentTaskFolderId {
            get {
                return this.ParentTaskFolderIdField;
            }
            set {
                if ((this.ParentTaskFolderIdField.Equals(value) != true)) {
                    this.ParentTaskFolderIdField = value;
                    this.RaisePropertyChanged("ParentTaskFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskFolderId {
            get {
                return this.TaskFolderIdField;
            }
            set {
                if ((this.TaskFolderIdField.Equals(value) != true)) {
                    this.TaskFolderIdField = value;
                    this.RaisePropertyChanged("TaskFolderId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCaseFolder", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCaseFolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountCautionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountFailedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountNotApplicableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountNotRunField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExecutionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentTestCaseFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseFolderIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountBlocked {
            get {
                return this.CountBlockedField;
            }
            set {
                if ((this.CountBlockedField.Equals(value) != true)) {
                    this.CountBlockedField = value;
                    this.RaisePropertyChanged("CountBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountCaution {
            get {
                return this.CountCautionField;
            }
            set {
                if ((this.CountCautionField.Equals(value) != true)) {
                    this.CountCautionField = value;
                    this.RaisePropertyChanged("CountCaution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountFailed {
            get {
                return this.CountFailedField;
            }
            set {
                if ((this.CountFailedField.Equals(value) != true)) {
                    this.CountFailedField = value;
                    this.RaisePropertyChanged("CountFailed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountNotApplicable {
            get {
                return this.CountNotApplicableField;
            }
            set {
                if ((this.CountNotApplicableField.Equals(value) != true)) {
                    this.CountNotApplicableField = value;
                    this.RaisePropertyChanged("CountNotApplicable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountNotRun {
            get {
                return this.CountNotRunField;
            }
            set {
                if ((this.CountNotRunField.Equals(value) != true)) {
                    this.CountNotRunField = value;
                    this.RaisePropertyChanged("CountNotRun");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountPassed {
            get {
                return this.CountPassedField;
            }
            set {
                if ((this.CountPassedField.Equals(value) != true)) {
                    this.CountPassedField = value;
                    this.RaisePropertyChanged("CountPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExecutionDate {
            get {
                return this.ExecutionDateField;
            }
            set {
                if ((this.ExecutionDateField.Equals(value) != true)) {
                    this.ExecutionDateField = value;
                    this.RaisePropertyChanged("ExecutionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentTestCaseFolderId {
            get {
                return this.ParentTestCaseFolderIdField;
            }
            set {
                if ((this.ParentTestCaseFolderIdField.Equals(value) != true)) {
                    this.ParentTestCaseFolderIdField = value;
                    this.RaisePropertyChanged("ParentTestCaseFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseFolderId {
            get {
                return this.TestCaseFolderIdField;
            }
            set {
                if ((this.TestCaseFolderIdField.Equals(value) != true)) {
                    this.TestCaseFolderIdField = value;
                    this.RaisePropertyChanged("TestCaseFolderId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCaseParameter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCaseParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseParameterIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseParameterId {
            get {
                return this.TestCaseParameterIdField;
            }
            set {
                if ((this.TestCaseParameterIdField.Equals(value) != true)) {
                    this.TestCaseParameterIdField = value;
                    this.RaisePropertyChanged("TestCaseParameterId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestStepParameter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestStepParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCaseStatus", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCaseStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseStatusId {
            get {
                return this.TestCaseStatusIdField;
            }
            set {
                if ((this.TestCaseStatusIdField.Equals(value) != true)) {
                    this.TestCaseStatusIdField = value;
                    this.RaisePropertyChanged("TestCaseStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCaseType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCaseType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsBddField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsExploratoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBdd {
            get {
                return this.IsBddField;
            }
            set {
                if ((this.IsBddField.Equals(value) != true)) {
                    this.IsBddField = value;
                    this.RaisePropertyChanged("IsBdd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDefault {
            get {
                return this.IsDefaultField;
            }
            set {
                if ((this.IsDefaultField.Equals(value) != true)) {
                    this.IsDefaultField = value;
                    this.RaisePropertyChanged("IsDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsExploratory {
            get {
                return this.IsExploratoryField;
            }
            set {
                if ((this.IsExploratoryField.Equals(value) != true)) {
                    this.IsExploratoryField = value;
                    this.RaisePropertyChanged("IsExploratory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseTypeId {
            get {
                return this.TestCaseTypeIdField;
            }
            set {
                if ((this.TestCaseTypeIdField.Equals(value) != true)) {
                    this.TestCaseTypeIdField = value;
                    this.RaisePropertyChanged("TestCaseTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCasePriority", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCasePriority : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PriorityId {
            get {
                return this.PriorityIdField;
            }
            set {
                if ((this.PriorityIdField.Equals(value) != true)) {
                    this.PriorityIdField = value;
                    this.RaisePropertyChanged("PriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSetTestCaseMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSetTestCaseMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSetupTeardownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PlannedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetTestCaseIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSetupTeardown {
            get {
                return this.IsSetupTeardownField;
            }
            set {
                if ((this.IsSetupTeardownField.Equals(value) != true)) {
                    this.IsSetupTeardownField = value;
                    this.RaisePropertyChanged("IsSetupTeardown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PlannedDate {
            get {
                return this.PlannedDateField;
            }
            set {
                if ((this.PlannedDateField.Equals(value) != true)) {
                    this.PlannedDateField = value;
                    this.RaisePropertyChanged("PlannedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetId {
            get {
                return this.TestSetIdField;
            }
            set {
                if ((this.TestSetIdField.Equals(value) != true)) {
                    this.TestSetIdField = value;
                    this.RaisePropertyChanged("TestSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetTestCaseId {
            get {
                return this.TestSetTestCaseIdField;
            }
            set {
                if ((this.TestSetTestCaseIdField.Equals(value) != true)) {
                    this.TestSetTestCaseIdField = value;
                    this.RaisePropertyChanged("TestSetTestCaseId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSetFolder", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSetFolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountCautionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountFailedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountNotApplicableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountNotRunField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExecutionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentTestSetFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetFolderIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountBlocked {
            get {
                return this.CountBlockedField;
            }
            set {
                if ((this.CountBlockedField.Equals(value) != true)) {
                    this.CountBlockedField = value;
                    this.RaisePropertyChanged("CountBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountCaution {
            get {
                return this.CountCautionField;
            }
            set {
                if ((this.CountCautionField.Equals(value) != true)) {
                    this.CountCautionField = value;
                    this.RaisePropertyChanged("CountCaution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountFailed {
            get {
                return this.CountFailedField;
            }
            set {
                if ((this.CountFailedField.Equals(value) != true)) {
                    this.CountFailedField = value;
                    this.RaisePropertyChanged("CountFailed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountNotApplicable {
            get {
                return this.CountNotApplicableField;
            }
            set {
                if ((this.CountNotApplicableField.Equals(value) != true)) {
                    this.CountNotApplicableField = value;
                    this.RaisePropertyChanged("CountNotApplicable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountNotRun {
            get {
                return this.CountNotRunField;
            }
            set {
                if ((this.CountNotRunField.Equals(value) != true)) {
                    this.CountNotRunField = value;
                    this.RaisePropertyChanged("CountNotRun");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountPassed {
            get {
                return this.CountPassedField;
            }
            set {
                if ((this.CountPassedField.Equals(value) != true)) {
                    this.CountPassedField = value;
                    this.RaisePropertyChanged("CountPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExecutionDate {
            get {
                return this.ExecutionDateField;
            }
            set {
                if ((this.ExecutionDateField.Equals(value) != true)) {
                    this.ExecutionDateField = value;
                    this.RaisePropertyChanged("ExecutionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentTestSetFolderId {
            get {
                return this.ParentTestSetFolderIdField;
            }
            set {
                if ((this.ParentTestSetFolderIdField.Equals(value) != true)) {
                    this.ParentTestSetFolderIdField = value;
                    this.RaisePropertyChanged("ParentTestSetFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetFolderId {
            get {
                return this.TestSetFolderIdField;
            }
            set {
                if ((this.TestSetFolderIdField.Equals(value) != true)) {
                    this.TestSetFolderIdField = value;
                    this.RaisePropertyChanged("TestSetFolderId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSetParameter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSetParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseParameterIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseParameterId {
            get {
                return this.TestCaseParameterIdField;
            }
            set {
                if ((this.TestCaseParameterIdField.Equals(value) != true)) {
                    this.TestCaseParameterIdField = value;
                    this.RaisePropertyChanged("TestCaseParameterId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetId {
            get {
                return this.TestSetIdField;
            }
            set {
                if ((this.TestSetIdField.Equals(value) != true)) {
                    this.TestSetIdField = value;
                    this.RaisePropertyChanged("TestSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDataSyncSystem", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDataSyncSystem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AutoMapUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConnectionStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Custom01Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Custom02Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Custom03Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Custom04Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Custom05Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DataSyncStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataSyncStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DataSyncSystemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastSyncDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeOffsetHoursField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AutoMapUsers {
            get {
                return this.AutoMapUsersField;
            }
            set {
                if ((this.AutoMapUsersField.Equals(value) != true)) {
                    this.AutoMapUsersField = value;
                    this.RaisePropertyChanged("AutoMapUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Custom01 {
            get {
                return this.Custom01Field;
            }
            set {
                if ((object.ReferenceEquals(this.Custom01Field, value) != true)) {
                    this.Custom01Field = value;
                    this.RaisePropertyChanged("Custom01");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Custom02 {
            get {
                return this.Custom02Field;
            }
            set {
                if ((object.ReferenceEquals(this.Custom02Field, value) != true)) {
                    this.Custom02Field = value;
                    this.RaisePropertyChanged("Custom02");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Custom03 {
            get {
                return this.Custom03Field;
            }
            set {
                if ((object.ReferenceEquals(this.Custom03Field, value) != true)) {
                    this.Custom03Field = value;
                    this.RaisePropertyChanged("Custom03");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Custom04 {
            get {
                return this.Custom04Field;
            }
            set {
                if ((object.ReferenceEquals(this.Custom04Field, value) != true)) {
                    this.Custom04Field = value;
                    this.RaisePropertyChanged("Custom04");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Custom05 {
            get {
                return this.Custom05Field;
            }
            set {
                if ((object.ReferenceEquals(this.Custom05Field, value) != true)) {
                    this.Custom05Field = value;
                    this.RaisePropertyChanged("Custom05");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DataSyncStatusId {
            get {
                return this.DataSyncStatusIdField;
            }
            set {
                if ((this.DataSyncStatusIdField.Equals(value) != true)) {
                    this.DataSyncStatusIdField = value;
                    this.RaisePropertyChanged("DataSyncStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataSyncStatusName {
            get {
                return this.DataSyncStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DataSyncStatusNameField, value) != true)) {
                    this.DataSyncStatusNameField = value;
                    this.RaisePropertyChanged("DataSyncStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DataSyncSystemId {
            get {
                return this.DataSyncSystemIdField;
            }
            set {
                if ((this.DataSyncSystemIdField.Equals(value) != true)) {
                    this.DataSyncSystemIdField = value;
                    this.RaisePropertyChanged("DataSyncSystemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastSyncDate {
            get {
                return this.LastSyncDateField;
            }
            set {
                if ((this.LastSyncDateField.Equals(value) != true)) {
                    this.LastSyncDateField = value;
                    this.RaisePropertyChanged("LastSyncDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeOffsetHours {
            get {
                return this.TimeOffsetHoursField;
            }
            set {
                if ((this.TimeOffsetHoursField.Equals(value) != true)) {
                    this.TimeOffsetHoursField = value;
                    this.RaisePropertyChanged("TimeOffsetHours");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDataMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDataMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PrimaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalKey {
            get {
                return this.ExternalKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalKeyField, value) != true)) {
                    this.ExternalKeyField = value;
                    this.RaisePropertyChanged("ExternalKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InternalId {
            get {
                return this.InternalIdField;
            }
            set {
                if ((this.InternalIdField.Equals(value) != true)) {
                    this.InternalIdField = value;
                    this.RaisePropertyChanged("InternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Primary {
            get {
                return this.PrimaryField;
            }
            set {
                if ((this.PrimaryField.Equals(value) != true)) {
                    this.PrimaryField = value;
                    this.RaisePropertyChanged("Primary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteProjectArtifact", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteProjectArtifact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] ArtifactIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] ArtifactIds {
            get {
                return this.ArtifactIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactIdsField, value) != true)) {
                    this.ArtifactIdsField = value;
                    this.RaisePropertyChanged("ArtifactIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDocumentType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDocumentType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DocumentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectTemplateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Default {
            get {
                return this.DefaultField;
            }
            set {
                if ((this.DefaultField.Equals(value) != true)) {
                    this.DefaultField = value;
                    this.RaisePropertyChanged("Default");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DocumentTypeId {
            get {
                return this.DocumentTypeIdField;
            }
            set {
                if ((this.DocumentTypeIdField.Equals(value) != true)) {
                    this.DocumentTypeIdField = value;
                    this.RaisePropertyChanged("DocumentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectTemplateId {
            get {
                return this.ProjectTemplateIdField;
            }
            set {
                if ((this.ProjectTemplateIdField.Equals(value) != true)) {
                    this.ProjectTemplateIdField = value;
                    this.RaisePropertyChanged("ProjectTemplateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDocumentFolder", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDocumentFolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentProjectAttachmentFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectAttachmentFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentProjectAttachmentFolderId {
            get {
                return this.ParentProjectAttachmentFolderIdField;
            }
            set {
                if ((this.ParentProjectAttachmentFolderIdField.Equals(value) != true)) {
                    this.ParentProjectAttachmentFolderIdField = value;
                    this.RaisePropertyChanged("ParentProjectAttachmentFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectAttachmentFolderId {
            get {
                return this.ProjectAttachmentFolderIdField;
            }
            set {
                if ((this.ProjectAttachmentFolderIdField.Equals(value) != true)) {
                    this.ProjectAttachmentFolderIdField = value;
                    this.RaisePropertyChanged("ProjectAttachmentFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteAssociation", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteAssociation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ArtifactLinkIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactLinkTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtifactLinkTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DestArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestArtifactNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DestArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestArtifactTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SourceArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SourceArtifactTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ArtifactLinkId {
            get {
                return this.ArtifactLinkIdField;
            }
            set {
                if ((this.ArtifactLinkIdField.Equals(value) != true)) {
                    this.ArtifactLinkIdField = value;
                    this.RaisePropertyChanged("ArtifactLinkId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactLinkTypeId {
            get {
                return this.ArtifactLinkTypeIdField;
            }
            set {
                if ((this.ArtifactLinkTypeIdField.Equals(value) != true)) {
                    this.ArtifactLinkTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactLinkTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtifactLinkTypeName {
            get {
                return this.ArtifactLinkTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtifactLinkTypeNameField, value) != true)) {
                    this.ArtifactLinkTypeNameField = value;
                    this.RaisePropertyChanged("ArtifactLinkTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorName {
            get {
                return this.CreatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorNameField, value) != true)) {
                    this.CreatorNameField = value;
                    this.RaisePropertyChanged("CreatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DestArtifactId {
            get {
                return this.DestArtifactIdField;
            }
            set {
                if ((this.DestArtifactIdField.Equals(value) != true)) {
                    this.DestArtifactIdField = value;
                    this.RaisePropertyChanged("DestArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestArtifactName {
            get {
                return this.DestArtifactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DestArtifactNameField, value) != true)) {
                    this.DestArtifactNameField = value;
                    this.RaisePropertyChanged("DestArtifactName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DestArtifactTypeId {
            get {
                return this.DestArtifactTypeIdField;
            }
            set {
                if ((this.DestArtifactTypeIdField.Equals(value) != true)) {
                    this.DestArtifactTypeIdField = value;
                    this.RaisePropertyChanged("DestArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestArtifactTypeName {
            get {
                return this.DestArtifactTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DestArtifactTypeNameField, value) != true)) {
                    this.DestArtifactTypeNameField = value;
                    this.RaisePropertyChanged("DestArtifactTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceArtifactId {
            get {
                return this.SourceArtifactIdField;
            }
            set {
                if ((this.SourceArtifactIdField.Equals(value) != true)) {
                    this.SourceArtifactIdField = value;
                    this.RaisePropertyChanged("SourceArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceArtifactTypeId {
            get {
                return this.SourceArtifactTypeIdField;
            }
            set {
                if ((this.SourceArtifactTypeIdField.Equals(value) != true)) {
                    this.SourceArtifactTypeIdField = value;
                    this.RaisePropertyChanged("SourceArtifactTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncidentPriority", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncidentPriority : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PriorityId {
            get {
                return this.PriorityIdField;
            }
            set {
                if ((this.PriorityIdField.Equals(value) != true)) {
                    this.PriorityIdField = value;
                    this.RaisePropertyChanged("PriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncidentSeverity", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncidentSeverity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SeverityIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SeverityId {
            get {
                return this.SeverityIdField;
            }
            set {
                if ((this.SeverityIdField.Equals(value) != true)) {
                    this.SeverityIdField = value;
                    this.RaisePropertyChanged("SeverityId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncidentStatus", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncidentStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OpenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentStatusId {
            get {
                return this.IncidentStatusIdField;
            }
            set {
                if ((this.IncidentStatusIdField.Equals(value) != true)) {
                    this.IncidentStatusIdField = value;
                    this.RaisePropertyChanged("IncidentStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Open {
            get {
                return this.OpenField;
            }
            set {
                if ((this.OpenField.Equals(value) != true)) {
                    this.OpenField = value;
                    this.RaisePropertyChanged("Open");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncidentType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncidentType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IssueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RiskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentTypeId {
            get {
                return this.IncidentTypeIdField;
            }
            set {
                if ((this.IncidentTypeIdField.Equals(value) != true)) {
                    this.IncidentTypeIdField = value;
                    this.RaisePropertyChanged("IncidentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Issue {
            get {
                return this.IssueField;
            }
            set {
                if ((this.IssueField.Equals(value) != true)) {
                    this.IssueField = value;
                    this.RaisePropertyChanged("Issue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Risk {
            get {
                return this.RiskField;
            }
            set {
                if ((this.RiskField.Equals(value) != true)) {
                    this.RiskField = value;
                    this.RaisePropertyChanged("Risk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteProjectTemplate", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteProjectTemplate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectTemplateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectTemplateId {
            get {
                return this.ProjectTemplateIdField;
            }
            set {
                if ((this.ProjectTemplateIdField.Equals(value) != true)) {
                    this.ProjectTemplateIdField = value;
                    this.RaisePropertyChanged("ProjectTemplateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteProject", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteProject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NonWorkingHoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PercentCompleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectTemplateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebsiteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkingDaysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkingHoursField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NonWorkingHours {
            get {
                return this.NonWorkingHoursField;
            }
            set {
                if ((this.NonWorkingHoursField.Equals(value) != true)) {
                    this.NonWorkingHoursField = value;
                    this.RaisePropertyChanged("NonWorkingHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PercentComplete {
            get {
                return this.PercentCompleteField;
            }
            set {
                if ((this.PercentCompleteField.Equals(value) != true)) {
                    this.PercentCompleteField = value;
                    this.RaisePropertyChanged("PercentComplete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectGroupId {
            get {
                return this.ProjectGroupIdField;
            }
            set {
                if ((this.ProjectGroupIdField.Equals(value) != true)) {
                    this.ProjectGroupIdField = value;
                    this.RaisePropertyChanged("ProjectGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectTemplateId {
            get {
                return this.ProjectTemplateIdField;
            }
            set {
                if ((this.ProjectTemplateIdField.Equals(value) != true)) {
                    this.ProjectTemplateIdField = value;
                    this.RaisePropertyChanged("ProjectTemplateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Website {
            get {
                return this.WebsiteField;
            }
            set {
                if ((object.ReferenceEquals(this.WebsiteField, value) != true)) {
                    this.WebsiteField = value;
                    this.RaisePropertyChanged("Website");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkingDays {
            get {
                return this.WorkingDaysField;
            }
            set {
                if ((this.WorkingDaysField.Equals(value) != true)) {
                    this.WorkingDaysField = value;
                    this.RaisePropertyChanged("WorkingDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkingHours {
            get {
                return this.WorkingHoursField;
            }
            set {
                if ((this.WorkingHoursField.Equals(value) != true)) {
                    this.WorkingHoursField = value;
                    this.RaisePropertyChanged("WorkingHours");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteProjectRole", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteProjectRole : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DiscussionsAddField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SampleDataSync.SpiraSoapService.RemoteRolePermission[] PermissionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectRoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SourceCodeViewField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((this.AdminField.Equals(value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DiscussionsAdd {
            get {
                return this.DiscussionsAddField;
            }
            set {
                if ((this.DiscussionsAddField.Equals(value) != true)) {
                    this.DiscussionsAddField = value;
                    this.RaisePropertyChanged("DiscussionsAdd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SampleDataSync.SpiraSoapService.RemoteRolePermission[] Permissions {
            get {
                return this.PermissionsField;
            }
            set {
                if ((object.ReferenceEquals(this.PermissionsField, value) != true)) {
                    this.PermissionsField = value;
                    this.RaisePropertyChanged("Permissions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectRoleId {
            get {
                return this.ProjectRoleIdField;
            }
            set {
                if ((this.ProjectRoleIdField.Equals(value) != true)) {
                    this.ProjectRoleIdField = value;
                    this.RaisePropertyChanged("ProjectRoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SourceCodeView {
            get {
                return this.SourceCodeViewField;
            }
            set {
                if ((this.SourceCodeViewField.Equals(value) != true)) {
                    this.SourceCodeViewField = value;
                    this.RaisePropertyChanged("SourceCodeView");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRolePermission", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRolePermission : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PermissionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectRoleIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PermissionId {
            get {
                return this.PermissionIdField;
            }
            set {
                if ((this.PermissionIdField.Equals(value) != true)) {
                    this.PermissionIdField = value;
                    this.RaisePropertyChanged("PermissionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectRoleId {
            get {
                return this.ProjectRoleIdField;
            }
            set {
                if ((this.ProjectRoleIdField.Equals(value) != true)) {
                    this.ProjectRoleIdField = value;
                    this.RaisePropertyChanged("ProjectRoleId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteReleaseTestCaseMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteReleaseTestCaseMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteReleaseStatus", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteReleaseStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseStatusIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseStatusId {
            get {
                return this.ReleaseStatusIdField;
            }
            set {
                if ((this.ReleaseStatusIdField.Equals(value) != true)) {
                    this.ReleaseStatusIdField = value;
                    this.RaisePropertyChanged("ReleaseStatusId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteReleaseType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteReleaseType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseTypeId {
            get {
                return this.ReleaseTypeIdField;
            }
            set {
                if ((this.ReleaseTypeIdField.Equals(value) != true)) {
                    this.ReleaseTypeIdField = value;
                    this.RaisePropertyChanged("ReleaseTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirementTestCaseMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirementTestCaseMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequirementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementId {
            get {
                return this.RequirementIdField;
            }
            set {
                if ((this.RequirementIdField.Equals(value) != true)) {
                    this.RequirementIdField = value;
                    this.RaisePropertyChanged("RequirementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.inflectra.com/SpiraTest/Services/v6.0/", ConfigurationName="SpiraSoapService.ISoapService")]
    public interface ISoapService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveSets", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveSetsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveSetsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet[] TestConfiguration_RetrieveSets(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveSets", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveSetsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet[]> TestConfiguration_RetrieveSetsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_CreateResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_CreateServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteUser User_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectId, System.Nullable<int> projectRoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_CreateResponse" +
            "")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteUser> User_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectId, System.Nullable<int> projectRoleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveByIdRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveByIdSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteUser User_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveByIdRe" +
            "sponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteUser> User_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveByUser" +
            "Name", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveByUser" +
            "NameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveByUser" +
            "NameServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteUser User_RetrieveByUserName(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string userName, bool includeInactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveByUser" +
            "Name", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveByUser" +
            "NameResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteUser> User_RetrieveByUserNameAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string userName, bool includeInactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_DeleteResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_DeleteServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void User_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_DeleteResponse" +
            "")]
        System.Threading.Tasks.Task User_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_UpdateResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_UpdateServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void User_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteUser remoteUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_UpdateResponse" +
            "")]
        System.Threading.Tasks.Task User_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteUser remoteUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteUser[] User_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveRespon" +
            "se")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteUser[]> User_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveContac" +
            "ts", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveContac" +
            "tsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveContac" +
            "tsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteUser[] User_RetrieveContacts(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveContac" +
            "ts", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RetrieveContac" +
            "tsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteUser[]> User_RetrieveContactsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_AddContact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_AddContactResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_AddContactServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void User_AddContact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_AddContact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_AddContactResp" +
            "onse")]
        System.Threading.Tasks.Task User_AddContactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RemoveContact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RemoveContactR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RemoveContactS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void User_RemoveContact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RemoveContact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/User_RemoveContactR" +
            "esponse")]
        System.Threading.Tasks.Task User_RemoveContactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomationHost[] AutomationHost_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationHost[]> AutomationHost_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomationHost AutomationHost_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int automationHostId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationHost> AutomationHost_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int automationHostId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveByToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveByTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveByTokenServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomationHost AutomationHost_RetrieveByToken(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveByToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Retr" +
            "ieveByTokenResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationHost> AutomationHost_RetrieveByTokenAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Crea" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Crea" +
            "teResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Crea" +
            "teServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Crea" +
            "teValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomationHost AutomationHost_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationHost remoteAutomationHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Crea" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Crea" +
            "teResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationHost> AutomationHost_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationHost remoteAutomationHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Upda" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Upda" +
            "teResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Upda" +
            "teServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Upda" +
            "teValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void AutomationHost_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationHost remoteAutomationHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Upda" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Upda" +
            "teResponse")]
        System.Threading.Tasks.Task AutomationHost_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationHost remoteAutomationHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Dele" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Dele" +
            "teResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Dele" +
            "teServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void AutomationHost_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int automationHostId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Dele" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationHost_Dele" +
            "teResponse")]
        System.Threading.Tasks.Task AutomationHost_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int automationHostId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveByToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveByTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveByTokenServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomationEngine AutomationEngine_RetrieveByToken(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveByToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveByTokenResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationEngine> AutomationEngine_RetrieveByTokenAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomationEngine[] AutomationEngine_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationEngine[]> AutomationEngine_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Cr" +
            "eate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Cr" +
            "eateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Cr" +
            "eateServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomationEngine AutomationEngine_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationEngine remoteEngine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Cr" +
            "eate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Cr" +
            "eateResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationEngine> AutomationEngine_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationEngine remoteEngine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomationEngine AutomationEngine_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int automationEngineId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Re" +
            "trieveByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationEngine> AutomationEngine_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int automationEngineId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Up" +
            "date", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Up" +
            "dateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Up" +
            "dateServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void AutomationEngine_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationEngine remoteEngine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Up" +
            "date", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/AutomationEngine_Up" +
            "dateResponse")]
        System.Threading.Tasks.Task AutomationEngine_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationEngine remoteEngine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_RetrieveR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_RetrieveS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComponent[] Component_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, bool activeOnly, bool includeDeleted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_RetrieveR" +
            "esponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComponent[]> Component_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, bool activeOnly, bool includeDeleted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_RetrieveB" +
            "yId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_RetrieveB" +
            "yIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_RetrieveB" +
            "yIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComponent Component_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int componentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_RetrieveB" +
            "yId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_RetrieveB" +
            "yIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComponent> Component_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int componentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_CreateRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_CreateSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComponent Component_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteComponent remoteComponent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_CreateRes" +
            "ponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComponent> Component_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteComponent remoteComponent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_UpdateRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_UpdateSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Component_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteComponent remoteComponent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_UpdateRes" +
            "ponse")]
        System.Threading.Tasks.Task Component_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteComponent remoteComponent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_DeleteRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_DeleteSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Component_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int componentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_DeleteRes" +
            "ponse")]
        System.Threading.Tasks.Task Component_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int componentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_Undelete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_UndeleteR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_UndeleteS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Component_Undelete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int componentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_Undelete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Component_UndeleteR" +
            "esponse")]
        System.Threading.Tasks.Task Component_UndeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int componentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_RetrieveByRel" +
            "easeId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_RetrieveByRel" +
            "easeIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_RetrieveByRel" +
            "easeIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteBuild[] Build_RetrieveByReleaseId(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_RetrieveByRel" +
            "easeId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_RetrieveByRel" +
            "easeIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteBuild[]> Build_RetrieveByReleaseIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_RetrieveByIdR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_RetrieveByIdS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteBuild Build_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId, int buildId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_RetrieveByIdR" +
            "esponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteBuild> Build_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId, int buildId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_CreateRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_CreateService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteBuild Build_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteBuild remoteBuild);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Build_CreateRespons" +
            "e")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteBuild> Build_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteBuild remoteBuild);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "Branches", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "BranchesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "BranchesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSourceCodeBranch[] SourceCode_RetrieveBranches(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "Branches", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "BranchesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeBranch[]> SourceCode_RetrieveBranchesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FoldersByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FoldersByParentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FoldersByParentServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSourceCodeFolder[] SourceCode_RetrieveFoldersByParent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FoldersByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FoldersByParentResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeFolder[]> SourceCode_RetrieveFoldersByParentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesByFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesByFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesByFolderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[] SourceCode_RetrieveFilesByFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string folderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesByFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesByFolderResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[]> SourceCode_RetrieveFilesByFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string folderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesByRevision", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesByRevisionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesByRevisionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[] SourceCode_RetrieveFilesByRevision(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesByRevision", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesByRevisionResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[]> SourceCode_RetrieveFilesByRevisionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FileById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FileByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FileByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSourceCodeFile SourceCode_RetrieveFileById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FileById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FileByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeFile> SourceCode_RetrieveFileByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesForArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesForArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[] SourceCode_RetrieveFilesForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "FilesForArtifactResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[]> SourceCode_RetrieveFilesForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_OpenFile" +
            "ById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_OpenFile" +
            "ByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_OpenFile" +
            "ByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        byte[] SourceCode_OpenFileById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string fileId, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_OpenFile" +
            "ById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_OpenFile" +
            "ByIdResponse")]
        System.Threading.Tasks.Task<byte[]> SourceCode_OpenFileByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string fileId, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "Revisions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[] SourceCode_RetrieveRevisions(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, int startRow, int numberRows, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "Revisions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[]> SourceCode_RetrieveRevisionsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, int startRow, int numberRows, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForFileServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[] SourceCode_RetrieveRevisionsForFile(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForFileResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[]> SourceCode_RetrieveRevisionsForFileAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision SourceCode_RetrieveRevisionById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision> SourceCode_RetrieveRevisionByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[] SourceCode_RetrieveRevisionsForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "RevisionsForArtifactResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[]> SourceCode_RetrieveRevisionsForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "ArtifactsForRevision", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "ArtifactsForRevisionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "ArtifactsForRevisionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteLinkedArtifact[] SourceCode_RetrieveArtifactsForRevision(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "ArtifactsForRevision", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SourceCode_Retrieve" +
            "ArtifactsForRevisionResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteLinkedArtifact[]> SourceCode_RetrieveArtifactsForRevisionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_GetInfo", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_GetInfoResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_GetInfoServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteMessageInfo Message_GetInfo(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_GetInfo", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_GetInfoResp" +
            "onse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteMessageInfo> Message_GetInfoAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_PostNew", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_PostNewResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_PostNewServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        long Message_PostNew(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int recipientUserId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_PostNew", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_PostNewResp" +
            "onse")]
        System.Threading.Tasks.Task<long> Message_PostNewAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int recipientUserId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_MarkAllAsRe" +
            "ad", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_MarkAllAsRe" +
            "adResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_MarkAllAsRe" +
            "adServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Message_MarkAllAsRead(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int senderUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_MarkAllAsRe" +
            "ad", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_MarkAllAsRe" +
            "adResponse")]
        System.Threading.Tasks.Task Message_MarkAllAsReadAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int senderUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_GetUnreadMe" +
            "ssageSenders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_GetUnreadMe" +
            "ssageSendersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_GetUnreadMe" +
            "ssageSendersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteUserMessage[] Message_GetUnreadMessageSenders(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_GetUnreadMe" +
            "ssageSenders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_GetUnreadMe" +
            "ssageSendersResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteUserMessage[]> Message_GetUnreadMessageSendersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_RetrieveUnr" +
            "ead", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_RetrieveUnr" +
            "eadResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_RetrieveUnr" +
            "eadServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteMessage[] Message_RetrieveUnread(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_RetrieveUnr" +
            "ead", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Message_RetrieveUnr" +
            "eadResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteMessage[]> Message_RetrieveUnreadAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/History_RetrieveFor" +
            "Artifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/History_RetrieveFor" +
            "ArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/History_RetrieveFor" +
            "ArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteHistoryChange[] History_RetrieveForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, int startingRow, int numberOfRows, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/History_RetrieveFor" +
            "Artifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/History_RetrieveFor" +
            "ArtifactResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteHistoryChange[]> History_RetrieveForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, int startingRow, int numberOfRows, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/History_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/History_RetrieveByI" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/History_RetrieveByI" +
            "dServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteHistoryChangeSet History_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int historyChangeSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/History_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/History_RetrieveByI" +
            "dResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteHistoryChangeSet> History_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int historyChangeSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Subscr" +
            "ibeToArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Subscr" +
            "ibeToArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Subscr" +
            "ibeToArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Subscription_SubscribeToArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Subscr" +
            "ibeToArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Subscr" +
            "ibeToArtifactResponse")]
        System.Threading.Tasks.Task Subscription_SubscribeToArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Unsubs" +
            "cribeFromArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Unsubs" +
            "cribeFromArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Unsubs" +
            "cribeFromArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Subscription_UnsubscribeFromArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Unsubs" +
            "cribeFromArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Unsubs" +
            "cribeFromArtifactResponse")]
        System.Threading.Tasks.Task Subscription_UnsubscribeFromArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Retrie" +
            "veForUser", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Retrie" +
            "veForUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Retrie" +
            "veForUserServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteArtifactSubscription[] Subscription_RetrieveForUser(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Retrie" +
            "veForUser", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Retrie" +
            "veForUserResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteArtifactSubscription[]> Subscription_RetrieveForUserAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Retrie" +
            "veForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Retrie" +
            "veForArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Retrie" +
            "veForArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteArtifactSubscription[] Subscription_RetrieveForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Retrie" +
            "veForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Subscription_Retrie" +
            "veForArtifactResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteArtifactSubscription[]> Subscription_RetrieveForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SavedFilter_Retriev" +
            "eForUser", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SavedFilter_Retriev" +
            "eForUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SavedFilter_Retriev" +
            "eForUserServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSavedFilter[] SavedFilter_RetrieveForUser(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SavedFilter_Retriev" +
            "eForUser", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/SavedFilter_Retriev" +
            "eForUserResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSavedFilter[]> SavedFilter_RetrieveForUserAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveCus" +
            "tomGraphData", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveCus" +
            "tomGraphDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveCus" +
            "tomGraphDataServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTableData Reports_RetrieveCustomGraphData(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int customGraphId, System.Nullable<int> projectId, System.Nullable<int> projectGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveCus" +
            "tomGraphData", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveCus" +
            "tomGraphDataResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTableData> Reports_RetrieveCustomGraphDataAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int customGraphId, System.Nullable<int> projectId, System.Nullable<int> projectGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveESQ" +
            "LQueryData", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveESQ" +
            "LQueryDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveESQ" +
            "LQueryDataServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTableData Reports_RetrieveESQLQueryData(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveESQ" +
            "LQueryData", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveESQ" +
            "LQueryDataResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTableData> Reports_RetrieveESQLQueryDataAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveSav" +
            "ed", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveSav" +
            "edResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveSav" +
            "edServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSavedReport[] Reports_RetrieveSaved(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, bool includeShared);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveSav" +
            "ed", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveSav" +
            "edResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSavedReport[]> Reports_RetrieveSavedAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, bool includeShared);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_GenerateSav" +
            "edReport", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_GenerateSav" +
            "edReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_GenerateSav" +
            "edReportServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        System.Guid Reports_GenerateSavedReport(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int savedReportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_GenerateSav" +
            "edReport", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_GenerateSav" +
            "edReportResponse")]
        System.Threading.Tasks.Task<System.Guid> Reports_GenerateSavedReportAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int savedReportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_CheckGenera" +
            "tedReportStatus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_CheckGenera" +
            "tedReportStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_CheckGenera" +
            "tedReportStatusServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        int Reports_CheckGeneratedReportStatus(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Guid reportGenerationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_CheckGenera" +
            "tedReportStatus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_CheckGenera" +
            "tedReportStatusResponse")]
        System.Threading.Tasks.Task<int> Reports_CheckGeneratedReportStatusAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Guid reportGenerationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveGen" +
            "eratedReport", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveGen" +
            "eratedReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveGen" +
            "eratedReportServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        byte[] Reports_RetrieveGeneratedReport(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int generatedReportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveGen" +
            "eratedReport", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Reports_RetrieveGen" +
            "eratedReportResponse")]
        System.Threading.Tasks.Task<byte[]> Reports_RetrieveGeneratedReportAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int generatedReportId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_MoveRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_MoveSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Requirement_Move(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId, System.Nullable<int> destinationRequirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_MoveRes" +
            "ponse")]
        System.Threading.Tasks.Task Requirement_MoveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId, System.Nullable<int> destinationRequirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Indent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_IndentR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_IndentS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Requirement_Indent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Indent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_IndentR" +
            "esponse")]
        System.Threading.Tasks.Task Requirement_IndentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Outdent" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Outdent" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Outdent" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Requirement_Outdent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Outdent" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Outdent" +
            "Response")]
        System.Threading.Tasks.Task Requirement_OutdentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eComments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eCommentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eCommentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComment[] Requirement_RetrieveComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eComments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eCommentsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> Requirement_RetrieveCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_CreateC" +
            "omment", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_CreateC" +
            "ommentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_CreateC" +
            "ommentServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComment Requirement_CreateComment(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_CreateC" +
            "omment", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_CreateC" +
            "ommentResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment> Requirement_CreateCommentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStatuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStatusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStatusesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirementStatus[] Requirement_RetrieveStatuses(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStatuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStatusesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementStatus[]> Requirement_RetrieveStatusesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTypes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTypesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirementType[] Requirement_RetrieveTypes(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTypes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTypesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementType[]> Requirement_RetrieveTypesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eImportances", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eImportancesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eImportancesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirementImportance[] Requirement_RetrieveImportances(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eImportances", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eImportancesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementImportance[]> Requirement_RetrieveImportancesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowFieldsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowField[] Requirement_RetrieveWorkflowFields(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowFieldsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowField[]> Requirement_RetrieveWorkflowFieldsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowTransitionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowTransitionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[] Requirement_RetrieveWorkflowTransitions(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowTransitionsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[]> Requirement_RetrieveWorkflowTransitionsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowCustomPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowCustomPropertiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[] Requirement_RetrieveWorkflowCustomProperties(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eWorkflowCustomPropertiesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[]> Requirement_RetrieveWorkflowCustomPropertiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eSteps", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStepsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStepsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirementStep[] Requirement_RetrieveSteps(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eSteps", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStepsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementStep[]> Requirement_RetrieveStepsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStepById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStepByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStepByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirementStep Requirement_RetrieveStepById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStepById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eStepByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementStep> Requirement_RetrieveStepByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddStep" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddStep" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddStep" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirementStep Requirement_AddStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, System.Nullable<int> existingRequirementStepId, System.Nullable<int> creatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddStep" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddStep" +
            "Response")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementStep> Requirement_AddStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, System.Nullable<int> existingRequirementStepId, System.Nullable<int> creatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_UpdateS" +
            "tep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_UpdateS" +
            "tepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_UpdateS" +
            "tepServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Requirement_UpdateStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementStep remoteRequirementStep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_UpdateS" +
            "tep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_UpdateS" +
            "tepResponse")]
        System.Threading.Tasks.Task Requirement_UpdateStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementStep remoteRequirementStep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_MoveSte" +
            "p", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_MoveSte" +
            "pResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_MoveSte" +
            "pServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Requirement_MoveStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId, int sourceRequirementStepId, System.Nullable<int> destinationRequirementStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_MoveSte" +
            "p", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_MoveSte" +
            "pResponse")]
        System.Threading.Tasks.Task Requirement_MoveStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId, int sourceRequirementStepId, System.Nullable<int> destinationRequirementStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_DeleteS" +
            "tep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_DeleteS" +
            "tepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_DeleteS" +
            "tepServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Requirement_DeleteStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId, int requirementStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_DeleteS" +
            "tep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_DeleteS" +
            "tepResponse")]
        System.Threading.Tasks.Task Requirement_DeleteStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId, int requirementStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddTest" +
            "StepCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddTest" +
            "StepCoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddTest" +
            "StepCoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Requirement_AddTestStepCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping remoteReqTestStepMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddTest" +
            "StepCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddTest" +
            "StepCoverageResponse")]
        System.Threading.Tasks.Task Requirement_AddTestStepCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping remoteReqTestStepMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTestStepCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTestStepCoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTestStepCoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping[] Requirement_RetrieveTestStepCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTestStepCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTestStepCoverageResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping[]> Requirement_RetrieveTestStepCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_RemoveT" +
            "estStepCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_RemoveT" +
            "estStepCoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_RemoveT" +
            "estStepCoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Requirement_RemoveTestStepCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping remoteReqTestStepMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_RemoveT" +
            "estStepCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_RemoveT" +
            "estStepCoverageResponse")]
        System.Threading.Tasks.Task Requirement_RemoveTestStepCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping remoteReqTestStepMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestStep_RetrieveRe" +
            "quirementCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestStep_RetrieveRe" +
            "quirementCoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestStep_RetrieveRe" +
            "quirementCoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping[] TestStep_RetrieveRequirementCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestStep_RetrieveRe" +
            "quirementCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestStep_RetrieveRe" +
            "quirementCoverageResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping[]> TestStep_RetrieveRequirementCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProductVe" +
            "rsion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProductVe" +
            "rsionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProductVe" +
            "rsionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteVersion System_GetProductVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProductVe" +
            "rsion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProductVe" +
            "rsionResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteVersion> System_GetProductVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetSettings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetSettingsR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetSettingsS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteSetting[] System_GetSettings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetSettings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetSettingsR" +
            "esponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSetting[]> System_GetSettingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetArtifactU" +
            "rl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetArtifactU" +
            "rlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetArtifactU" +
            "rlServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        string System_GetArtifactUrl(int navigationLinkId, int projectId, int artifactId, string tabName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetArtifactU" +
            "rl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetArtifactU" +
            "rlResponse")]
        System.Threading.Tasks.Task<string> System_GetArtifactUrlAsync(int navigationLinkId, int projectId, int artifactId, string tabName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProjectId" +
            "ForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProjectId" +
            "ForArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProjectId" +
            "ForArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        int System_GetProjectIdForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProjectId" +
            "ForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProjectId" +
            "ForArtifactResponse")]
        System.Threading.Tasks.Task<int> System_GetProjectIdForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateValidati" +
            "onFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTask Task_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTask remoteTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateResponse" +
            "")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTask> Task_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTask remoteTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTask[] Task_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveRespon" +
            "se")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTask[]> Task_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveByIdRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveByIdSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTask Task_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveByIdRe" +
            "sponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTask> Task_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveForOwn" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveForOwn" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveForOwn" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTask[] Task_RetrieveForOwner(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveForOwn" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveForOwn" +
            "erResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTask[]> Task_RetrieveForOwnerAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveNew", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveNewRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveNewSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTask[] Task_RetrieveNew(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.DateTime creationDate, int startRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveNew", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveNewRes" +
            "ponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTask[]> Task_RetrieveNewAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.DateTime creationDate, int startRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_UpdateResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_UpdateServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_UpdateValidati" +
            "onFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Task_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTask remoteTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_UpdateResponse" +
            "")]
        System.Threading.Tasks.Task Task_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTask remoteTask);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CountResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CountServiceFa" +
            "ultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        long Task_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CountResponse")]
        System.Threading.Tasks.Task<long> Task_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_DeleteResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_DeleteServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Task_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_DeleteResponse" +
            "")]
        System.Threading.Tasks.Task Task_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveCommen" +
            "ts", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveCommen" +
            "tsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveCommen" +
            "tsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComment[] Task_RetrieveComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int TaskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveCommen" +
            "ts", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveCommen" +
            "tsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> Task_RetrieveCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int TaskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateComment", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateCommentR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateCommentS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComment Task_CreateComment(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateComment", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateCommentR" +
            "esponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment> Task_CreateCommentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveStatus" +
            "es", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveStatus" +
            "esResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveStatus" +
            "esServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTaskStatus[] Task_RetrieveStatuses(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveStatus" +
            "es", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveStatus" +
            "esResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskStatus[]> Task_RetrieveStatusesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveTypes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveTypesR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveTypesS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTaskType[] Task_RetrieveTypes(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveTypes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveTypesR" +
            "esponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskType[]> Task_RetrieveTypesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrievePriori" +
            "ties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrievePriori" +
            "tiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrievePriori" +
            "tiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTaskPriority[] Task_RetrievePriorities(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrievePriori" +
            "ties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrievePriori" +
            "tiesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskPriority[]> Task_RetrievePrioritiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owFieldsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowField[] Task_RetrieveWorkflowFields(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owFieldsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowField[]> Task_RetrieveWorkflowFieldsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owTransitionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owTransitionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[] Task_RetrieveWorkflowTransitions(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owTransitionsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[]> Task_RetrieveWorkflowTransitionsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owCustomPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owCustomPropertiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[] Task_RetrieveWorkflowCustomProperties(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveWorkfl" +
            "owCustomPropertiesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[]> Task_RetrieveWorkflowCustomPropertiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "s", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "sResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "sServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTaskFolder[] Task_RetrieveFolders(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "s", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "sResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskFolder[]> Task_RetrieveFoldersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "sByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "sByParentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "sByParentServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTaskFolder[] Task_RetrieveFoldersByParent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentTaskFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "sByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "sByParentResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskFolder[]> Task_RetrieveFoldersByParentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentTaskFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateFolderRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateFolderSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateFolderVa" +
            "lidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTaskFolder Task_CreateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTaskFolder remoteTaskFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_CreateFolderRe" +
            "sponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskFolder> Task_CreateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTaskFolder remoteTaskFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "ById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "ByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "ByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTaskFolder Task_RetrieveFolderById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "ById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_RetrieveFolder" +
            "ByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskFolder> Task_RetrieveFolderByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_DeleteFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_DeleteFolderRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_DeleteFolderSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Task_DeleteFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_DeleteFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_DeleteFolderRe" +
            "sponse")]
        System.Threading.Tasks.Task Task_DeleteFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_UpdateFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_UpdateFolderRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_UpdateFolderSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_UpdateFolderVa" +
            "lidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Task_UpdateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTaskFolder remoteTaskFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_UpdateFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Task_UpdateFolderRe" +
            "sponse")]
        System.Threading.Tasks.Task Task_UpdateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTaskFolder remoteTaskFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateVali" +
            "dationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCase TestCase_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCase remoteTestCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateResp" +
            "onse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCase> TestCase_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCase remoteTestCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateFold" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateFold" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateFold" +
            "erValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCaseFolder TestCase_CreateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateFold" +
            "erResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseFolder> TestCase_CreateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "IdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCase TestCase_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "IdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCase> TestCase_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "lderById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "lderByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "lderByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCaseFolder TestCase_RetrieveFolderById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "lderById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "lderByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseFolder> TestCase_RetrieveFolderByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateVali" +
            "dationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestCase_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCase remoteTestCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateResp" +
            "onse")]
        System.Threading.Tasks.Task TestCase_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCase remoteTestCase);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteFold" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteFold" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestCase_DeleteFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteFold" +
            "erResponse")]
        System.Threading.Tasks.Task TestCase_DeleteFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateFold" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateFold" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateFold" +
            "erValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestCase_UpdateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateFold" +
            "erResponse")]
        System.Threading.Tasks.Task TestCase_UpdateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestCase_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteResp" +
            "onse")]
        System.Threading.Tasks.Task TestCase_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddParamet" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddParamet" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddParamet" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCaseParameter TestCase_AddParameter(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteTestCaseParameter remoteTestCaseParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddParamet" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddParamet" +
            "erResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseParameter> TestCase_AddParameterAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteTestCaseParameter remoteTestCaseParameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreatePara" +
            "meterToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreatePara" +
            "meterTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreatePara" +
            "meterTokenServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        string TestCase_CreateParameterToken(string parameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreatePara" +
            "meterToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreatePara" +
            "meterTokenResponse")]
        System.Threading.Tasks.Task<string> TestCase_CreateParameterTokenAsync(string parameterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrievePa" +
            "rameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrievePa" +
            "rametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrievePa" +
            "rametersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCaseParameter[] TestCase_RetrieveParameters(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrievePa" +
            "rameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrievePa" +
            "rametersResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseParameter[]> TestCase_RetrieveParametersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epParameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epParametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epParametersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestStepParameter[] TestCase_RetrieveStepParameters(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epParameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epParametersResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestStepParameter[]> TestCase_RetrieveStepParametersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "eps", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestStep[] TestCase_RetrieveSteps(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "eps", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestStep[]> TestCase_RetrieveStepsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestStep TestCase_RetrieveStepById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "epByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestStep> TestCase_RetrieveStepByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_MoveStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_MoveStepRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_MoveStepSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestCase_MoveStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_MoveStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_MoveStepRe" +
            "sponse")]
        System.Threading.Tasks.Task TestCase_MoveStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteStep" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteStep" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteStep" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestCase_DeleteStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteStep" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_DeleteStep" +
            "Response")]
        System.Threading.Tasks.Task TestCase_DeleteStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddStepRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddStepSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestStep TestCase_AddStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestStep remoteTestStep, int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddStepRes" +
            "ponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestStep> TestCase_AddStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestStep remoteTestStep, int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateStep" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateStep" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateStep" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestCase_UpdateStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestStep remoteTestStep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateStep" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_UpdateStep" +
            "Response")]
        System.Threading.Tasks.Task TestCase_UpdateStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestStep remoteTestStep);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddLink", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddLinkRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddLinkSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        int TestCase_AddLink(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int position, int linkedTestCaseId, SampleDataSync.SpiraSoapService.RemoteTestStepParameter[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddLink", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddLinkRes" +
            "ponse")]
        System.Threading.Tasks.Task<int> TestCase_AddLinkAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int position, int linkedTestCaseId, SampleDataSync.SpiraSoapService.RemoteTestStepParameter[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddUpdateA" +
            "utomationScript", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddUpdateA" +
            "utomationScriptResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddUpdateA" +
            "utomationScriptServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestCase_AddUpdateAutomationScript(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> documentTypeId, System.Nullable<int> projectAttachmentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddUpdateA" +
            "utomationScript", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_AddUpdateA" +
            "utomationScriptResponse")]
        System.Threading.Tasks.Task TestCase_AddUpdateAutomationScriptAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> documentTypeId, System.Nullable<int> projectAttachmentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CountRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CountServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        long TestCase_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CountRespo" +
            "nse")]
        System.Threading.Tasks.Task<long> TestCase_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CountForFo" +
            "lder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CountForFo" +
            "lderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CountForFo" +
            "lderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        long TestCase_CountForFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testCaseFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CountForFo" +
            "lder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CountForFo" +
            "lderResponse")]
        System.Threading.Tasks.Task<long> TestCase_CountForFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testCaseFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCase[] TestCase_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveRe" +
            "sponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCase[]> TestCase_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "Folder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "FolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "FolderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCase[] TestCase_RetrieveByFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testCaseFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "Folder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "FolderResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCase[]> TestCase_RetrieveByFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testCaseFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "TestSetId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "TestSetIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "TestSetIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCase[] TestCase_RetrieveByTestSetId(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "TestSetId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveBy" +
            "TestSetIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCase[]> TestCase_RetrieveByTestSetIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "rOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "rOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "rOwnerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCase[] TestCase_RetrieveForOwner(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "rOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "rOwnerResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCase[]> TestCase_RetrieveForOwnerAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_MoveRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_MoveServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestCase_Move(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, System.Nullable<int> testCaseFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_MoveRespon" +
            "se")]
        System.Threading.Tasks.Task TestCase_MoveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, System.Nullable<int> testCaseFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "lders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "ldersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "ldersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCaseFolder[] TestCase_RetrieveFolders(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "lders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "ldersResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseFolder[]> TestCase_RetrieveFoldersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "ldersByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "ldersByParentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "ldersByParentServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCaseFolder[] TestCase_RetrieveFoldersByParent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentTestCaseFolderId, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "ldersByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveFo" +
            "ldersByParentResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseFolder[]> TestCase_RetrieveFoldersByParentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentTestCaseFolderId, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveCo" +
            "mments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveCo" +
            "mmentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveCo" +
            "mmentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComment[] TestCase_RetrieveComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int TestCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveCo" +
            "mments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveCo" +
            "mmentsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> TestCase_RetrieveCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int TestCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateComm" +
            "ent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateComm" +
            "entResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateComm" +
            "entServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComment TestCase_CreateComment(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateComm" +
            "ent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_CreateComm" +
            "entResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment> TestCase_CreateCommentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "atuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "atusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "atusesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCaseStatus[] TestCase_RetrieveStatuses(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "atuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveSt" +
            "atusesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseStatus[]> TestCase_RetrieveStatusesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveTy" +
            "pes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveTy" +
            "pesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveTy" +
            "pesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCaseType[] TestCase_RetrieveTypes(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveTy" +
            "pes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveTy" +
            "pesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseType[]> TestCase_RetrieveTypesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrievePr" +
            "iorities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrievePr" +
            "ioritiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrievePr" +
            "ioritiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestCasePriority[] TestCase_RetrievePriorities(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrievePr" +
            "iorities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrievePr" +
            "ioritiesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCasePriority[]> TestCase_RetrievePrioritiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowFieldsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowField[] TestCase_RetrieveWorkflowFields(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowFieldsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowField[]> TestCase_RetrieveWorkflowFieldsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowTransitionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowTransitionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[] TestCase_RetrieveWorkflowTransitions(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowTransitionsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[]> TestCase_RetrieveWorkflowTransitionsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowCustomPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowCustomPropertiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[] TestCase_RetrieveWorkflowCustomProperties(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestCase_RetrieveWo" +
            "rkflowCustomPropertiesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[]> TestCase_RetrieveWorkflowCustomPropertiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateFromT" +
            "estCases", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateFromT" +
            "estCasesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateFromT" +
            "estCasesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteManualTestRun[] TestRun_CreateFromTestCases(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int[] testCaseIds, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateFromT" +
            "estCases", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateFromT" +
            "estCasesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteManualTestRun[]> TestRun_CreateFromTestCasesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int[] testCaseIds, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CountRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CountServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        long TestRun_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CountRespon" +
            "se")]
        System.Threading.Tasks.Task<long> TestRun_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateFromT" +
            "estSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateFromT" +
            "estSetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateFromT" +
            "estSetServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteManualTestRun[] TestRun_CreateFromTestSet(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateFromT" +
            "estSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateFromT" +
            "estSetResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteManualTestRun[]> TestRun_CreateFromTestSetAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_DeleteRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_DeleteServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestRun_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_DeleteRespo" +
            "nse")]
        System.Threading.Tasks.Task TestRun_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateForAu" +
            "tomationHost", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateForAu" +
            "tomationHostResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateForAu" +
            "tomationHostServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_CreateForAutomationHost(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string automationHostToken, SampleDataSync.SpiraSoapService.DateRange dateRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateForAu" +
            "tomationHost", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateForAu" +
            "tomationHostResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[]> TestRun_CreateForAutomationHostAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string automationHostToken, SampleDataSync.SpiraSoapService.DateRange dateRange);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateForAu" +
            "tomatedTestSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateForAu" +
            "tomatedTestSetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateForAu" +
            "tomatedTestSetServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_CreateForAutomatedTestSet(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, string automationHostToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateForAu" +
            "tomatedTestSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_CreateForAu" +
            "tomatedTestSetResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[]> TestRun_CreateForAutomatedTestSetAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, string automationHostToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated1", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated1Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated1ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated1ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun TestRun_RecordAutomated1(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun remoteTestRun);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated1", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated1Response")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun> TestRun_RecordAutomated1Async(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun remoteTestRun);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated2Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated2ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated2ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        int TestRun_RecordAutomated2(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated2Response")]
        System.Threading.Tasks.Task<int> TestRun_RecordAutomated2Async(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated3", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated3Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated3ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated3ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_RecordAutomated3(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[] remoteTestRuns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated3", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RecordAutom" +
            "ated3Response")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[]> TestRun_RecordAutomated3Async(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[] remoteTestRuns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestRun[] TestRun_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveRes" +
            "ponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestRun[]> TestRun_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveMan" +
            "ual", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveMan" +
            "ualResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveMan" +
            "ualServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteManualTestRun[] TestRun_RetrieveManual(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveMan" +
            "ual", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveMan" +
            "ualResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteManualTestRun[]> TestRun_RetrieveManualAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveAut" +
            "omated", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveAut" +
            "omatedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveAut" +
            "omatedServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_RetrieveAutomated(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveAut" +
            "omated", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveAut" +
            "omatedResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[]> TestRun_RetrieveAutomatedAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveByI" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveByI" +
            "dServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestRun TestRun_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveByI" +
            "dResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestRun> TestRun_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveByT" +
            "estCaseId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveByT" +
            "estCaseIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveByT" +
            "estCaseIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestRun[] TestRun_RetrieveByTestCaseId(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveByT" +
            "estCaseId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveByT" +
            "estCaseIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestRun[]> TestRun_RetrieveByTestCaseIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveAut" +
            "omatedById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveAut" +
            "omatedByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveAut" +
            "omatedByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun TestRun_RetrieveAutomatedById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveAut" +
            "omatedById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveAut" +
            "omatedByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun> TestRun_RetrieveAutomatedByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveMan" +
            "ualById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveMan" +
            "ualByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveMan" +
            "ualByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteManualTestRun TestRun_RetrieveManualById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveMan" +
            "ualById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_RetrieveMan" +
            "ualByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteManualTestRun> TestRun_RetrieveManualByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_Save", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_SaveRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_SaveService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_SaveValidat" +
            "ionFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteManualTestRun[] TestRun_Save(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteManualTestRun[] remoteTestRuns, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_Save", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestRun_SaveRespons" +
            "e")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteManualTestRun[]> TestRun_SaveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteManualTestRun[] remoteTestRuns, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_AddTestMapp" +
            "ing", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_AddTestMapp" +
            "ingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_AddTestMapp" +
            "ingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping[] TestSet_AddTestMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseParameter[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_AddTestMapp" +
            "ing", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_AddTestMapp" +
            "ingResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping[]> TestSet_AddTestMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseParameter[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RemoveTestM" +
            "apping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RemoveTestM" +
            "appingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RemoveTestM" +
            "appingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestSet_RemoveTestMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RemoveTestM" +
            "apping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RemoveTestM" +
            "appingResponse")]
        System.Threading.Tasks.Task TestSet_RemoveTestMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseMappingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping[] TestSet_RetrieveTestCaseMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseMappingResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping[]> TestSet_RetrieveTestCaseMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateValid" +
            "ationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSet TestSet_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSet remoteTestSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateRespo" +
            "nse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSet> TestSet_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSet remoteTestSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateFolde" +
            "r", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateFolde" +
            "rResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateFolde" +
            "rServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateFolde" +
            "rValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSetFolder TestSet_CreateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateFolde" +
            "r", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateFolde" +
            "rResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetFolder> TestSet_CreateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CountRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CountServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        long TestSet_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CountRespon" +
            "se")]
        System.Threading.Tasks.Task<long> TestSet_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CountForFol" +
            "der", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CountForFol" +
            "derResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CountForFol" +
            "derServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        long TestSet_CountForFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testSetFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CountForFol" +
            "der", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CountForFol" +
            "derResponse")]
        System.Threading.Tasks.Task<long> TestSet_CountForFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testSetFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSet[] TestSet_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveRes" +
            "ponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSet[]> TestSet_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveByF" +
            "older", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveByF" +
            "olderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveByF" +
            "olderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSet[] TestSet_RetrieveByFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testSetFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveByF" +
            "older", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveByF" +
            "olderResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSet[]> TestSet_RetrieveByFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testSetFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_UpdateRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_UpdateServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_UpdateValid" +
            "ationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestSet_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSet remoteTestSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_UpdateRespo" +
            "nse")]
        System.Threading.Tasks.Task TestSet_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSet remoteTestSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_DeleteRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_DeleteServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestSet_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_DeleteRespo" +
            "nse")]
        System.Threading.Tasks.Task TestSet_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_UpdateFolde" +
            "r", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_UpdateFolde" +
            "rResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_UpdateFolde" +
            "rServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_UpdateFolde" +
            "rValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestSet_UpdateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_UpdateFolde" +
            "r", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_UpdateFolde" +
            "rResponse")]
        System.Threading.Tasks.Task TestSet_UpdateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_DeleteFolde" +
            "r", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_DeleteFolde" +
            "rResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_DeleteFolde" +
            "rServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestSet_DeleteFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_DeleteFolde" +
            "r", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_DeleteFolde" +
            "rResponse")]
        System.Threading.Tasks.Task TestSet_DeleteFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveByI" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveByI" +
            "dServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSet TestSet_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveByI" +
            "dResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSet> TestSet_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "derById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "derByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "derByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSetFolder TestSet_RetrieveFolderById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "derById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "derByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetFolder> TestSet_RetrieveFolderByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "ders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "dersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "dersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSetFolder[] TestSet_RetrieveFolders(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "ders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "dersResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetFolder[]> TestSet_RetrieveFoldersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "dersByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "dersByParentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "dersByParentServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSetFolder[] TestSet_RetrieveFoldersByParent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentTestSetFolderId, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "dersByParent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFol" +
            "dersByParentResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetFolder[]> TestSet_RetrieveFoldersByParentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentTestSetFolderId, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFor" +
            "Owner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFor" +
            "OwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFor" +
            "OwnerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSet[] TestSet_RetrieveForOwner(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFor" +
            "Owner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveFor" +
            "OwnerResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSet[]> TestSet_RetrieveForOwnerAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_MoveRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_MoveService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestSet_Move(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, System.Nullable<int> destinationTestSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_MoveRespons" +
            "e")]
        System.Threading.Tasks.Task TestSet_MoveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, System.Nullable<int> destinationTestSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveCom" +
            "ments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveCom" +
            "mentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveCom" +
            "mentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComment[] TestSet_RetrieveComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int TestSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveCom" +
            "ments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveCom" +
            "mentsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> TestSet_RetrieveCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int TestSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateComme" +
            "nt", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateComme" +
            "ntResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateComme" +
            "ntServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComment TestSet_CreateComment(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateComme" +
            "nt", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CreateComme" +
            "ntResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment> TestSet_CreateCommentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrievePar" +
            "ameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrievePar" +
            "ametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrievePar" +
            "ametersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSetParameter[] TestSet_RetrieveParameters(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrievePar" +
            "ameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrievePar" +
            "ametersResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetParameter[]> TestSet_RetrieveParametersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseParameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseParametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseParametersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseParameter[] TestSet_RetrieveTestCaseParameters(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, int testSetTestCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseParameters", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_RetrieveTes" +
            "tCaseParametersResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseParameter[]> TestSet_RetrieveTestCaseParametersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, int testSetTestCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_SetInUseSta" +
            "tus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_SetInUseSta" +
            "tusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_SetInUseSta" +
            "tusServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void TestSet_SetInUseStatus(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, int testSetTestCaseId, bool isInUse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_SetInUseSta" +
            "tus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_SetInUseSta" +
            "tusResponse")]
        System.Threading.Tasks.Task TestSet_SetInUseStatusAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, int testSetTestCaseId, bool isInUse);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CheckInUseS" +
            "tatus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CheckInUseS" +
            "tatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CheckInUseS" +
            "tatusServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        bool TestSet_CheckInUseStatus(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, int testSetTestCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CheckInUseS" +
            "tatus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestSet_CheckInUseS" +
            "tatusResponse")]
        System.Threading.Tasks.Task<bool> TestSet_CheckInUseStatusAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, int testSetTestCaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveForTestSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveForTestSetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveForTestSetServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet TestConfiguration_RetrieveForTestSet(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveForTestSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveForTestSetResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet> TestConfiguration_RetrieveForTestSetAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveSetById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveSetByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveSetByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet TestConfiguration_RetrieveSetById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testConfigurationSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveSetById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/TestConfiguration_R" +
            "etrieveSetByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet> TestConfiguration_RetrieveSetByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testConfigurationSetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Connection_Authenti" +
            "cate1", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Connection_Authenti" +
            "cate1Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Connection_Authenti" +
            "cate1ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteCredentials Connection_Authenticate1(string userName, string password, string plugInName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Connection_Authenti" +
            "cate1", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Connection_Authenti" +
            "cate1Response")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCredentials> Connection_Authenticate1Async(string userName, string password, string plugInName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Connection_Authenti" +
            "cate2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Connection_Authenti" +
            "cate2Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Connection_Authenti" +
            "cate2ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteCredentials Connection_Authenticate2(string userName, string apiKey, string plugInName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Connection_Authenti" +
            "cate2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Connection_Authenti" +
            "cate2Response")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCredentials> Connection_Authenticate2Async(string userName, string apiKey, string plugInName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProductNa" +
            "me", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProductNa" +
            "meResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProductNa" +
            "meServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        string System_GetProductName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProductNa" +
            "me", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetProductNa" +
            "meResponse")]
        System.Threading.Tasks.Task<string> System_GetProductNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetServerDat" +
            "eTime", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetServerDat" +
            "eTimeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetServerDat" +
            "eTimeServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        System.DateTime System_GetServerDateTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetServerDat" +
            "eTime", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetServerDat" +
            "eTimeResponse")]
        System.Threading.Tasks.Task<System.DateTime> System_GetServerDateTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetWebServer" +
            "Url", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetWebServer" +
            "UrlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetWebServer" +
            "UrlServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        string System_GetWebServerUrl();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetWebServer" +
            "Url", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/System_GetWebServer" +
            "UrlResponse")]
        System.Threading.Tasks.Task<string> System_GetWebServerUrlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Retr" +
            "ieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Retr" +
            "ieveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Retr" +
            "ieveServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDataSyncSystem[] DataSyncSystem_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Retr" +
            "ieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Retr" +
            "ieveResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataSyncSystem[]> DataSyncSystem_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Retr" +
            "ieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Retr" +
            "ieveByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Retr" +
            "ieveByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDataSyncSystem DataSyncSystem_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Retr" +
            "ieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Retr" +
            "ieveByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataSyncSystem> DataSyncSystem_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Crea" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Crea" +
            "teResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Crea" +
            "teServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDataSyncSystem DataSyncSystem_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Crea" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Crea" +
            "teResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataSyncSystem> DataSyncSystem_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Upda" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Upda" +
            "teResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Upda" +
            "teServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void DataSyncSystem_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Upda" +
            "te", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Upda" +
            "teResponse")]
        System.Threading.Tasks.Task DataSyncSystem_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunFailure", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunFailureResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunFailureServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void DataSyncSystem_SaveRunFailure(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunFailure", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunFailureResponse")]
        System.Threading.Tasks.Task DataSyncSystem_SaveRunFailureAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunSuccess", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunSuccessResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunSuccessServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void DataSyncSystem_SaveRunSuccess(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, System.DateTime lastRunDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunSuccess", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunSuccessResponse")]
        System.Threading.Tasks.Task DataSyncSystem_SaveRunSuccessAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, System.DateTime lastRunDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunWarning", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunWarningResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunWarningServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void DataSyncSystem_SaveRunWarning(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, System.DateTime lastRunDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunWarning", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Save" +
            "RunWarningResponse")]
        System.Threading.Tasks.Task DataSyncSystem_SaveRunWarningAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, System.DateTime lastRunDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Writ" +
            "eEvent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Writ" +
            "eEventResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Writ" +
            "eEventServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void DataSyncSystem_WriteEvent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string message, string details, int eventLogEntryType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Writ" +
            "eEvent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataSyncSystem_Writ" +
            "eEventResponse")]
        System.Threading.Tasks.Task DataSyncSystem_WriteEventAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string message, string details, int eventLogEntryType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveForArtifactType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveForArtifactTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveForArtifactTypeServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteCustomProperty[] CustomProperty_RetrieveForArtifactType(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int artifactTypeId, bool includeDeleted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveForArtifactType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveForArtifactTypeResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCustomProperty[]> CustomProperty_RetrieveForArtifactTypeAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int artifactTypeId, bool includeDeleted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddC" +
            "ustomList", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddC" +
            "ustomListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddC" +
            "ustomListServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteCustomList CustomProperty_AddCustomList(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomList remoteCustomList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddC" +
            "ustomList", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddC" +
            "ustomListResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCustomList> CustomProperty_AddCustomListAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomList remoteCustomList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddC" +
            "ustomListValue", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddC" +
            "ustomListValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddC" +
            "ustomListValueServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteCustomListValue CustomProperty_AddCustomListValue(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteCustomListValue remoteCustomListValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddC" +
            "ustomListValue", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddC" +
            "ustomListValueResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCustomListValue> CustomProperty_AddCustomListValueAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteCustomListValue remoteCustomListValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddD" +
            "efinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddD" +
            "efinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddD" +
            "efinitionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteCustomProperty CustomProperty_AddDefinition(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddD" +
            "efinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_AddD" +
            "efinitionResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCustomProperty> CustomProperty_AddDefinitionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Upda" +
            "teDefinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Upda" +
            "teDefinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Upda" +
            "teDefinitionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void CustomProperty_UpdateDefinition(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomProperty remoteCustomProperty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Upda" +
            "teDefinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Upda" +
            "teDefinitionResponse")]
        System.Threading.Tasks.Task CustomProperty_UpdateDefinitionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomProperty remoteCustomProperty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Dele" +
            "teDefinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Dele" +
            "teDefinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Dele" +
            "teDefinitionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void CustomProperty_DeleteDefinition(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int customPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Dele" +
            "teDefinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Dele" +
            "teDefinitionResponse")]
        System.Threading.Tasks.Task CustomProperty_DeleteDefinitionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int customPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteCustomList CustomProperty_RetrieveCustomListById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int customListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCustomList> CustomProperty_RetrieveCustomListByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int customListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomLists", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteCustomList[] CustomProperty_RetrieveCustomLists(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomLists", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Retr" +
            "ieveCustomListsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCustomList[]> CustomProperty_RetrieveCustomListsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Upda" +
            "teCustomList", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Upda" +
            "teCustomListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Upda" +
            "teCustomListServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void CustomProperty_UpdateCustomList(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomList remoteCustomList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Upda" +
            "teCustomList", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/CustomProperty_Upda" +
            "teCustomListResponse")]
        System.Threading.Tasks.Task CustomProperty_UpdateCustomListAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomList remoteCustomList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_AddArti" +
            "factMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_AddArti" +
            "factMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_AddArti" +
            "factMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void DataMapping_AddArtifactMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, SampleDataSync.SpiraSoapService.RemoteDataMapping[] remoteDataMappings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_AddArti" +
            "factMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_AddArti" +
            "factMappingsResponse")]
        System.Threading.Tasks.Task DataMapping_AddArtifactMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, SampleDataSync.SpiraSoapService.RemoteDataMapping[] remoteDataMappings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_AddUser" +
            "Mappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_AddUser" +
            "MappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_AddUser" +
            "MappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void DataMapping_AddUserMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, SampleDataSync.SpiraSoapService.RemoteDataMapping[] remoteDataMappings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_AddUser" +
            "Mappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_AddUser" +
            "MappingsResponse")]
        System.Threading.Tasks.Task DataMapping_AddUserMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, SampleDataSync.SpiraSoapService.RemoteDataMapping[] remoteDataMappings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_RemoveA" +
            "rtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_RemoveA" +
            "rtifactMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_RemoveA" +
            "rtifactMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void DataMapping_RemoveArtifactMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, SampleDataSync.SpiraSoapService.RemoteDataMapping[] remoteDataMappings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_RemoveA" +
            "rtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_RemoveA" +
            "rtifactMappingsResponse")]
        System.Threading.Tasks.Task DataMapping_RemoveArtifactMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, SampleDataSync.SpiraSoapService.RemoteDataMapping[] remoteDataMappings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eArtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eArtifactMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eArtifactMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveArtifactMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eArtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eArtifactMappingsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataMapping[]> DataMapping_RetrieveArtifactMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyMappingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDataMapping DataMapping_RetrieveCustomPropertyMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, int customPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyMappingResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataMapping> DataMapping_RetrieveCustomPropertyMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, int customPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyValueMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyValueMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyValueMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveCustomPropertyValueMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, int customPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyValueMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eCustomPropertyValueMappingsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataMapping[]> DataMapping_RetrieveCustomPropertyValueMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, int customPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eFieldValueMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eFieldValueMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eFieldValueMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveFieldValueMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactFieldId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eFieldValueMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eFieldValueMappingsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataMapping[]> DataMapping_RetrieveFieldValueMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactFieldId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eProjectMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eProjectMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eProjectMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveProjectMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eProjectMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eProjectMappingsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataMapping[]> DataMapping_RetrieveProjectMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eUserMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eUserMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eUserMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveUserMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eUserMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_Retriev" +
            "eUserMappingsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataMapping[]> DataMapping_RetrieveUserMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_SearchA" +
            "rtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_SearchA" +
            "rtifactMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_SearchA" +
            "rtifactMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteProjectArtifact[] DataMapping_SearchArtifactMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, int artifactTypeId, string externalKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_SearchA" +
            "rtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/DataMapping_SearchA" +
            "rtifactMappingsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProjectArtifact[]> DataMapping_SearchArtifactMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, int artifactTypeId, string externalKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_OpenFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_OpenFileRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_OpenFileSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        byte[] Document_OpenFile(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_OpenFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_OpenFileRe" +
            "sponse")]
        System.Threading.Tasks.Task<byte[]> Document_OpenFileAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFileRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFileSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocument Document_AddFile(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocument remoteDocument, byte[] binaryData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFileRes" +
            "ponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocument> Document_AddFileAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocument remoteDocument, byte[] binaryData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddUrl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddUrlResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddUrlServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocument Document_AddUrl(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocument remoteDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddUrl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddUrlResp" +
            "onse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocument> Document_AddUrlAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocument remoteDocument);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFileVer" +
            "sion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFileVer" +
            "sionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFileVer" +
            "sionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocumentVersion Document_AddFileVersion(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFileVer" +
            "sion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFileVer" +
            "sionResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentVersion> Document_AddFileVersionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddUrlVers" +
            "ion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddUrlVers" +
            "ionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddUrlVers" +
            "ionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocumentVersion Document_AddUrlVersion(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddUrlVers" +
            "ion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddUrlVers" +
            "ionResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentVersion> Document_AddUrlVersionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteFrom" +
            "Artifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteFrom" +
            "ArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteFrom" +
            "ArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Document_DeleteFromArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteFrom" +
            "Artifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteFrom" +
            "ArtifactResponse")]
        System.Threading.Tasks.Task Document_DeleteFromArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Document_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteResp" +
            "onse")]
        System.Threading.Tasks.Task Document_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocument[] Document_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveRe" +
            "sponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocument[]> Document_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "rFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "rFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "rFolderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocument[] Document_RetrieveForFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int folderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "rFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "rFolderResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocument[]> Document_RetrieveForFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int folderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "rArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "rArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "rArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocument[] Document_RetrieveForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "rArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "rArtifactResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocument[]> Document_RetrieveForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddToArtif" +
            "actId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddToArtif" +
            "actIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddToArtif" +
            "actIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Document_AddToArtifactId(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddToArtif" +
            "actId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddToArtif" +
            "actIdResponse")]
        System.Threading.Tasks.Task Document_AddToArtifactIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveBy" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveBy" +
            "IdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocument Document_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveBy" +
            "IdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocument> Document_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveTy" +
            "pes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveTy" +
            "pesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveTy" +
            "pesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocumentType[] Document_RetrieveTypes(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveTy" +
            "pes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveTy" +
            "pesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentType[]> Document_RetrieveTypesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "lders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "ldersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "ldersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocumentFolder[] Document_RetrieveFolders(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "lders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "ldersResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentFolder[]> Document_RetrieveFoldersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "lderById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "lderByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "lderByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocumentFolder Document_RetrieveFolderById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int folderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "lderById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "lderByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentFolder> Document_RetrieveFolderByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int folderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "ldersByParentFolderId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "ldersByParentFolderIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "ldersByParentFolderIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocumentFolder[] Document_RetrieveFoldersByParentFolderId(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "ldersByParentFolderId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_RetrieveFo" +
            "ldersByParentFolderIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentFolder[]> Document_RetrieveFoldersByParentFolderIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFolderR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFolderS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteDocumentFolder Document_AddFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_AddFolderR" +
            "esponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentFolder> Document_AddFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteFold" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteFold" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Document_DeleteFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int projectAttachmentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_DeleteFold" +
            "erResponse")]
        System.Threading.Tasks.Task Document_DeleteFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int projectAttachmentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_UpdateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_UpdateFold" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_UpdateFold" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Document_UpdateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_UpdateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Document_UpdateFold" +
            "erResponse")]
        System.Threading.Tasks.Task Document_UpdateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_CreateR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_CreateS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAssociation Association_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteAssociation remoteAssociation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_CreateR" +
            "esponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAssociation> Association_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteAssociation remoteAssociation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_UpdateR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_UpdateS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_UpdateV" +
            "alidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Association_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteAssociation remoteAssociation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_UpdateR" +
            "esponse")]
        System.Threading.Tasks.Task Association_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteAssociation remoteAssociation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_Retriev" +
            "eForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_Retriev" +
            "eForArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_Retriev" +
            "eForArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteAssociation[] Association_RetrieveForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_Retriev" +
            "eForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Association_Retriev" +
            "eForArtifactResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAssociation[]> Association_RetrieveForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddPriorit" +
            "y", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddPriorit" +
            "yResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddPriorit" +
            "yServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncidentPriority Incident_AddPriority(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentPriority remoteIncidentPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddPriorit" +
            "y", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddPriorit" +
            "yResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentPriority> Incident_AddPriorityAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentPriority remoteIncidentPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_CountRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_CountServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        long Incident_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_CountRespo" +
            "nse")]
        System.Threading.Tasks.Task<long> Incident_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddComment" +
            "s", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddComment" +
            "sResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddComment" +
            "sServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComment[] Incident_AddComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment[] remoteComments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddComment" +
            "s", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddComment" +
            "sResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> Incident_AddCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment[] remoteComments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddSeverit" +
            "y", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddSeverit" +
            "yResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddSeverit" +
            "yServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncidentSeverity Incident_AddSeverity(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentSeverity remoteIncidentSeverity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddSeverit" +
            "y", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddSeverit" +
            "yResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentSeverity> Incident_AddSeverityAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentSeverity remoteIncidentSeverity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddStatus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddStatusR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddStatusS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncidentStatus Incident_AddStatus(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentStatus remoteIncidentStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddStatus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddStatusR" +
            "esponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentStatus> Incident_AddStatusAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentStatus remoteIncidentStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddTypeRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddTypeSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncidentType Incident_AddType(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentType remoteIncidentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_AddTypeRes" +
            "ponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentType> Incident_AddTypeAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentType remoteIncidentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_CreateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_CreateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_CreateVali" +
            "dationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncident Incident_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteIncident remoteIncident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_CreateResp" +
            "onse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident> Incident_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteIncident remoteIncident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncident[] Incident_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveRe" +
            "sponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident[]> Incident_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "IdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncident Incident_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int incidentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "IdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident> Incident_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int incidentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestCase", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestCaseServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncident[] Incident_RetrieveByTestCase(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, bool openOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestCase", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestCaseResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident[]> Incident_RetrieveByTestCaseAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, bool openOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestRunStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestRunStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestRunStepServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncident[] Incident_RetrieveByTestRunStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestRunStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestRunStepResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident[]> Incident_RetrieveByTestRunStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestStepServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncident[] Incident_RetrieveByTestStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveBy" +
            "TestStepResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident[]> Incident_RetrieveByTestStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveFo" +
            "rOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveFo" +
            "rOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveFo" +
            "rOwnerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncident[] Incident_RetrieveForOwner(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveFo" +
            "rOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveFo" +
            "rOwnerResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident[]> Incident_RetrieveForOwnerAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveNe" +
            "w", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveNe" +
            "wResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveNe" +
            "wServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncident[] Incident_RetrieveNew(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.DateTime creationDate, int startRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveNe" +
            "w", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveNe" +
            "wResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident[]> Incident_RetrieveNewAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.DateTime creationDate, int startRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrievePr" +
            "iorities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrievePr" +
            "ioritiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrievePr" +
            "ioritiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncidentPriority[] Incident_RetrievePriorities(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrievePr" +
            "iorities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrievePr" +
            "ioritiesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentPriority[]> Incident_RetrievePrioritiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveCo" +
            "mments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveCo" +
            "mmentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveCo" +
            "mmentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComment[] Incident_RetrieveComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int incidentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveCo" +
            "mments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveCo" +
            "mmentsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> Incident_RetrieveCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int incidentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveSe" +
            "verities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveSe" +
            "veritiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveSe" +
            "veritiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncidentSeverity[] Incident_RetrieveSeverities(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveSe" +
            "verities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveSe" +
            "veritiesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentSeverity[]> Incident_RetrieveSeveritiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveSt" +
            "atuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveSt" +
            "atusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveSt" +
            "atusesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncidentStatus[] Incident_RetrieveStatuses(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveSt" +
            "atuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveSt" +
            "atusesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentStatus[]> Incident_RetrieveStatusesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveTy" +
            "pes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveTy" +
            "pesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveTy" +
            "pesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncidentType[] Incident_RetrieveTypes(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveTy" +
            "pes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveTy" +
            "pesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentType[]> Incident_RetrieveTypesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowFieldsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowField[] Incident_RetrieveWorkflowFields(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowFieldsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowField[]> Incident_RetrieveWorkflowFieldsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowTransitionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowTransitionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[] Incident_RetrieveWorkflowTransitions(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isDetector, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowTransitionsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[]> Incident_RetrieveWorkflowTransitionsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isDetector, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowCustomPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowCustomPropertiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[] Incident_RetrieveWorkflowCustomProperties(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveWo" +
            "rkflowCustomPropertiesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[]> Incident_RetrieveWorkflowCustomPropertiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_UpdateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_UpdateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_UpdateVali" +
            "dationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Incident_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteIncident remoteIncident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_UpdateResp" +
            "onse")]
        System.Threading.Tasks.Task Incident_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteIncident remoteIncident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_DeleteResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_DeleteServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Incident_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int incidentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_DeleteResp" +
            "onse")]
        System.Threading.Tasks.Task Incident_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int incidentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveDe" +
            "faultStatus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveDe" +
            "faultStatusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveDe" +
            "faultStatusServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncidentStatus Incident_RetrieveDefaultStatus(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveDe" +
            "faultStatus", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveDe" +
            "faultStatusResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentStatus> Incident_RetrieveDefaultStatusAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveDe" +
            "faultType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveDe" +
            "faultTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveDe" +
            "faultTypeServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteIncidentType Incident_RetrieveDefaultType(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveDe" +
            "faultType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Incident_RetrieveDe" +
            "faultTypeResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentType> Incident_RetrieveDefaultTypeAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Cre" +
            "ate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Cre" +
            "ateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Cre" +
            "ateServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteProjectTemplate ProjectTemplate_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectTemplate remoteProjectTemplate, System.Nullable<int> existingProjectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Cre" +
            "ate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Cre" +
            "ateResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProjectTemplate> ProjectTemplate_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectTemplate remoteProjectTemplate, System.Nullable<int> existingProjectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Del" +
            "ete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Del" +
            "eteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Del" +
            "eteServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void ProjectTemplate_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Del" +
            "ete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Del" +
            "eteResponse")]
        System.Threading.Tasks.Task ProjectTemplate_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Upd" +
            "ate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Upd" +
            "ateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Upd" +
            "ateServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Upd" +
            "ateValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void ProjectTemplate_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectTemplate remoteProjectTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Upd" +
            "ate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Upd" +
            "ateResponse")]
        System.Threading.Tasks.Task ProjectTemplate_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectTemplate remoteProjectTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Ret" +
            "rieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Ret" +
            "rieveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Ret" +
            "rieveServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteProjectTemplate[] ProjectTemplate_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Ret" +
            "rieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Ret" +
            "rieveResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProjectTemplate[]> ProjectTemplate_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Ret" +
            "rieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Ret" +
            "rieveByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Ret" +
            "rieveByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteProjectTemplate ProjectTemplate_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Ret" +
            "rieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectTemplate_Ret" +
            "rieveByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProjectTemplate> ProjectTemplate_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_CreateRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_CreateServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteProject Project_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProject remoteProject, System.Nullable<int> existingProjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_CreateRespo" +
            "nse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProject> Project_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProject remoteProject, System.Nullable<int> existingProjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_DeleteRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_DeleteServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Project_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_DeleteRespo" +
            "nse")]
        System.Threading.Tasks.Task Project_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_UpdateRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_UpdateServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_UpdateValid" +
            "ationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Project_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProject remoteProject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_UpdateRespo" +
            "nse")]
        System.Threading.Tasks.Task Project_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProject remoteProject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteProject[] Project_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveRes" +
            "ponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProject[]> Project_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveByI" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveByI" +
            "dServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteProject Project_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveByI" +
            "dResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProject> Project_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveUse" +
            "rMembership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveUse" +
            "rMembershipResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveUse" +
            "rMembershipServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteProjectUser[] Project_RetrieveUserMembership(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveUse" +
            "rMembership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RetrieveUse" +
            "rMembershipResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProjectUser[]> Project_RetrieveUserMembershipAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RefreshProg" +
            "ressExecutionStatusCaches", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RefreshProg" +
            "ressExecutionStatusCachesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RefreshProg" +
            "ressExecutionStatusCachesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Project_RefreshProgressExecutionStatusCaches(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> releaseId, bool runInBackground);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RefreshProg" +
            "ressExecutionStatusCaches", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RefreshProg" +
            "ressExecutionStatusCachesResponse")]
        System.Threading.Tasks.Task Project_RefreshProgressExecutionStatusCachesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> releaseId, bool runInBackground);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_AddUserMemb" +
            "ership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_AddUserMemb" +
            "ershipResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_AddUserMemb" +
            "ershipServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Project_AddUserMembership(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectUser remoteProjectUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_AddUserMemb" +
            "ership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_AddUserMemb" +
            "ershipResponse")]
        System.Threading.Tasks.Task Project_AddUserMembershipAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectUser remoteProjectUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_UpdateUserM" +
            "embership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_UpdateUserM" +
            "embershipResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_UpdateUserM" +
            "embershipServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Project_UpdateUserMembership(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectUser remoteProjectUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_UpdateUserM" +
            "embership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_UpdateUserM" +
            "embershipResponse")]
        System.Threading.Tasks.Task Project_UpdateUserMembershipAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectUser remoteProjectUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RemoveUserM" +
            "embership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RemoveUserM" +
            "embershipResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RemoveUserM" +
            "embershipServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Project_RemoveUserMembership(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectUser remoteProjectUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RemoveUserM" +
            "embership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Project_RemoveUserM" +
            "embershipResponse")]
        System.Threading.Tasks.Task Project_RemoveUserMembershipAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectUser remoteProjectUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectRole_Retriev" +
            "e", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectRole_Retriev" +
            "eResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectRole_Retriev" +
            "eServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteProjectRole[] ProjectRole_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectRole_Retriev" +
            "e", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/ProjectRole_Retriev" +
            "eResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProjectRole[]> ProjectRole_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_AddTestMapp" +
            "ing", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_AddTestMapp" +
            "ingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_AddTestMapp" +
            "ingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Release_AddTestMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_AddTestMapp" +
            "ing", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_AddTestMapp" +
            "ingResponse")]
        System.Threading.Tasks.Task Release_AddTestMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_AddTestMapp" +
            "ing2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_AddTestMapp" +
            "ing2Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_AddTestMapp" +
            "ing2ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Release_AddTestMapping2(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping[] remoteReleaseTestCaseMappings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_AddTestMapp" +
            "ing2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_AddTestMapp" +
            "ing2Response")]
        System.Threading.Tasks.Task Release_AddTestMapping2Async(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping[] remoteReleaseTestCaseMappings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_CountRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_CountServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        long Release_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_CountRespon" +
            "se")]
        System.Threading.Tasks.Task<long> Release_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_CreateRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_CreateServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_CreateValid" +
            "ationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRelease Release_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_CreateRespo" +
            "nse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRelease> Release_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RemoveTestM" +
            "apping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RemoveTestM" +
            "appingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RemoveTestM" +
            "appingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Release_RemoveTestMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RemoveTestM" +
            "apping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RemoveTestM" +
            "appingResponse")]
        System.Threading.Tasks.Task Release_RemoveTestMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRelease[] Release_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveRes" +
            "ponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRelease[]> Release_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Retrieve2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Retrieve2Re" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Retrieve2Se" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRelease[] Release_Retrieve2(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Retrieve2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Retrieve2Re" +
            "sponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRelease[]> Release_Retrieve2Async(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveByI" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveByI" +
            "dServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRelease Release_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveByI" +
            "d", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveByI" +
            "dResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRelease> Release_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_UpdateRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_UpdateServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_UpdateValid" +
            "ationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Release_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRelease remoteRelease);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_UpdateRespo" +
            "nse")]
        System.Threading.Tasks.Task Release_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRelease remoteRelease);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_DeleteRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_DeleteServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Release_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_DeleteRespo" +
            "nse")]
        System.Threading.Tasks.Task Release_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_MoveRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_MoveService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Release_Move(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId, System.Nullable<int> destinationReleaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_MoveRespons" +
            "e")]
        System.Threading.Tasks.Task Release_MoveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId, System.Nullable<int> destinationReleaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Indent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_IndentRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_IndentServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Release_Indent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Indent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_IndentRespo" +
            "nse")]
        System.Threading.Tasks.Task Release_IndentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Outdent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_OutdentResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_OutdentServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Release_Outdent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_Outdent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_OutdentResp" +
            "onse")]
        System.Threading.Tasks.Task Release_OutdentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveCom" +
            "ments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveCom" +
            "mentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveCom" +
            "mentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComment[] Release_RetrieveComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int ReleaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveCom" +
            "ments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveCom" +
            "mentsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> Release_RetrieveCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int ReleaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveTes" +
            "tMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveTes" +
            "tMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveTes" +
            "tMappingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping[] Release_RetrieveTestMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveTes" +
            "tMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveTes" +
            "tMappingResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping[]> Release_RetrieveTestMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_CreateComme" +
            "nt", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_CreateComme" +
            "ntResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_CreateComme" +
            "ntServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteComment Release_CreateComment(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_CreateComme" +
            "nt", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_CreateComme" +
            "ntResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment> Release_CreateCommentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveSta" +
            "tuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveSta" +
            "tusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveSta" +
            "tusesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteReleaseStatus[] Release_RetrieveStatuses(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveSta" +
            "tuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveSta" +
            "tusesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteReleaseStatus[]> Release_RetrieveStatusesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveTyp" +
            "es", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveTyp" +
            "esResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveTyp" +
            "esServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteReleaseType[] Release_RetrieveTypes(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveTyp" +
            "es", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveTyp" +
            "esResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteReleaseType[]> Release_RetrieveTypesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowFieldsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowField[] Release_RetrieveWorkflowFields(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowFieldsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowField[]> Release_RetrieveWorkflowFieldsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowTransitionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowTransitionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[] Release_RetrieveWorkflowTransitions(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowTransitionsResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[]> Release_RetrieveWorkflowTransitionsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowCustomPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowCustomPropertiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[] Release_RetrieveWorkflowCustomProperties(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Release_RetrieveWor" +
            "kflowCustomPropertiesResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[]> Release_RetrieveWorkflowCustomPropertiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddTest" +
            "Coverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddTest" +
            "CoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddTest" +
            "CoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Requirement_AddTestCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddTest" +
            "Coverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_AddTest" +
            "CoverageResponse")]
        System.Threading.Tasks.Task Requirement_AddTestCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_CountRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_CountSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        long Requirement_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_CountRe" +
            "sponse")]
        System.Threading.Tasks.Task<long> Requirement_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Create1" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Create1" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Create1" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Create1" +
            "ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirement Requirement_Create1(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRequirement remoteRequirement, int indentPosition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Create1" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Create1" +
            "Response")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirement> Requirement_Create1Async(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRequirement remoteRequirement, int indentPosition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Create2" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Create2" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Create2" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Create2" +
            "ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirement Requirement_Create2(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Create2" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Create2" +
            "Response")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirement> Requirement_Create2Async(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_RemoveT" +
            "estCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_RemoveT" +
            "estCoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_RemoveT" +
            "estCoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Requirement_RemoveTestCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_RemoveT" +
            "estCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_RemoveT" +
            "estCoverageResponse")]
        System.Threading.Tasks.Task Requirement_RemoveTestCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "e", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirement[] Requirement_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "e", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirement[]> Requirement_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirement Requirement_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eByIdResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirement> Requirement_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eForOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eForOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eForOwnerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirement[] Requirement_RetrieveForOwner(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eForOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eForOwnerResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirement[]> Requirement_RetrieveForOwnerAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTestCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTestCoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTestCoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping[] Requirement_RetrieveTestCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTestCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Retriev" +
            "eTestCoverageResponse")]
        System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping[]> Requirement_RetrieveTestCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_UpdateR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_UpdateS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_UpdateV" +
            "alidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Requirement_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRequirement remoteRequirement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_UpdateR" +
            "esponse")]
        System.Threading.Tasks.Task Requirement_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRequirement remoteRequirement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_DeleteR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SampleDataSync.SpiraSoapService.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_DeleteS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v6_0")]
        void Requirement_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v6.0/ISoapService/Requirement_DeleteR" +
            "esponse")]
        System.Threading.Tasks.Task Requirement_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISoapServiceChannel : SampleDataSync.SpiraSoapService.ISoapService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SoapServiceClient : System.ServiceModel.ClientBase<SampleDataSync.SpiraSoapService.ISoapService>, SampleDataSync.SpiraSoapService.ISoapService {
        
        public SoapServiceClient() {
        }
        
        public SoapServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SoapServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoapServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoapServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet[] TestConfiguration_RetrieveSets(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.TestConfiguration_RetrieveSets(credentials, projectId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet[]> TestConfiguration_RetrieveSetsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.TestConfiguration_RetrieveSetsAsync(credentials, projectId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteUser User_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectId, System.Nullable<int> projectRoleId) {
            return base.Channel.User_Create(credentials, remoteUser, password, passwordQuestion, passwordAnswer, projectId, projectRoleId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteUser> User_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectId, System.Nullable<int> projectRoleId) {
            return base.Channel.User_CreateAsync(credentials, remoteUser, password, passwordQuestion, passwordAnswer, projectId, projectRoleId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteUser User_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId) {
            return base.Channel.User_RetrieveById(credentials, userId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteUser> User_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId) {
            return base.Channel.User_RetrieveByIdAsync(credentials, userId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteUser User_RetrieveByUserName(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string userName, bool includeInactive) {
            return base.Channel.User_RetrieveByUserName(credentials, userName, includeInactive);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteUser> User_RetrieveByUserNameAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string userName, bool includeInactive) {
            return base.Channel.User_RetrieveByUserNameAsync(credentials, userName, includeInactive);
        }
        
        public void User_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId) {
            base.Channel.User_Delete(credentials, userId);
        }
        
        public System.Threading.Tasks.Task User_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId) {
            return base.Channel.User_DeleteAsync(credentials, userId);
        }
        
        public void User_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteUser remoteUser) {
            base.Channel.User_Update(credentials, remoteUser);
        }
        
        public System.Threading.Tasks.Task User_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteUser remoteUser) {
            return base.Channel.User_UpdateAsync(credentials, remoteUser);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteUser[] User_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.User_Retrieve(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteUser[]> User_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.User_RetrieveAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteUser[] User_RetrieveContacts(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.User_RetrieveContacts(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteUser[]> User_RetrieveContactsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.User_RetrieveContactsAsync(credentials);
        }
        
        public void User_AddContact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId) {
            base.Channel.User_AddContact(credentials, userId);
        }
        
        public System.Threading.Tasks.Task User_AddContactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId) {
            return base.Channel.User_AddContactAsync(credentials, userId);
        }
        
        public void User_RemoveContact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId) {
            base.Channel.User_RemoveContact(credentials, userId);
        }
        
        public System.Threading.Tasks.Task User_RemoveContactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int userId) {
            return base.Channel.User_RemoveContactAsync(credentials, userId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomationHost[] AutomationHost_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.AutomationHost_Retrieve(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationHost[]> AutomationHost_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.AutomationHost_RetrieveAsync(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomationHost AutomationHost_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int automationHostId) {
            return base.Channel.AutomationHost_RetrieveById(credentials, projectId, automationHostId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationHost> AutomationHost_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int automationHostId) {
            return base.Channel.AutomationHost_RetrieveByIdAsync(credentials, projectId, automationHostId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomationHost AutomationHost_RetrieveByToken(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string token) {
            return base.Channel.AutomationHost_RetrieveByToken(credentials, projectId, token);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationHost> AutomationHost_RetrieveByTokenAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string token) {
            return base.Channel.AutomationHost_RetrieveByTokenAsync(credentials, projectId, token);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomationHost AutomationHost_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationHost remoteAutomationHost) {
            return base.Channel.AutomationHost_Create(credentials, remoteAutomationHost);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationHost> AutomationHost_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationHost remoteAutomationHost) {
            return base.Channel.AutomationHost_CreateAsync(credentials, remoteAutomationHost);
        }
        
        public void AutomationHost_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationHost remoteAutomationHost) {
            base.Channel.AutomationHost_Update(credentials, remoteAutomationHost);
        }
        
        public System.Threading.Tasks.Task AutomationHost_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationHost remoteAutomationHost) {
            return base.Channel.AutomationHost_UpdateAsync(credentials, remoteAutomationHost);
        }
        
        public void AutomationHost_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int automationHostId) {
            base.Channel.AutomationHost_Delete(credentials, projectId, automationHostId);
        }
        
        public System.Threading.Tasks.Task AutomationHost_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int automationHostId) {
            return base.Channel.AutomationHost_DeleteAsync(credentials, projectId, automationHostId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomationEngine AutomationEngine_RetrieveByToken(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string token) {
            return base.Channel.AutomationEngine_RetrieveByToken(credentials, token);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationEngine> AutomationEngine_RetrieveByTokenAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string token) {
            return base.Channel.AutomationEngine_RetrieveByTokenAsync(credentials, token);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomationEngine[] AutomationEngine_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, bool activeOnly) {
            return base.Channel.AutomationEngine_Retrieve(credentials, activeOnly);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationEngine[]> AutomationEngine_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, bool activeOnly) {
            return base.Channel.AutomationEngine_RetrieveAsync(credentials, activeOnly);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomationEngine AutomationEngine_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationEngine remoteEngine) {
            return base.Channel.AutomationEngine_Create(credentials, remoteEngine);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationEngine> AutomationEngine_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationEngine remoteEngine) {
            return base.Channel.AutomationEngine_CreateAsync(credentials, remoteEngine);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomationEngine AutomationEngine_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int automationEngineId) {
            return base.Channel.AutomationEngine_RetrieveById(credentials, automationEngineId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomationEngine> AutomationEngine_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int automationEngineId) {
            return base.Channel.AutomationEngine_RetrieveByIdAsync(credentials, automationEngineId);
        }
        
        public void AutomationEngine_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationEngine remoteEngine) {
            base.Channel.AutomationEngine_Update(credentials, remoteEngine);
        }
        
        public System.Threading.Tasks.Task AutomationEngine_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomationEngine remoteEngine) {
            return base.Channel.AutomationEngine_UpdateAsync(credentials, remoteEngine);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComponent[] Component_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, bool activeOnly, bool includeDeleted) {
            return base.Channel.Component_Retrieve(credentials, projectId, activeOnly, includeDeleted);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComponent[]> Component_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, bool activeOnly, bool includeDeleted) {
            return base.Channel.Component_RetrieveAsync(credentials, projectId, activeOnly, includeDeleted);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComponent Component_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int componentId) {
            return base.Channel.Component_RetrieveById(credentials, projectId, componentId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComponent> Component_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int componentId) {
            return base.Channel.Component_RetrieveByIdAsync(credentials, projectId, componentId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComponent Component_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteComponent remoteComponent) {
            return base.Channel.Component_Create(credentials, remoteComponent);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComponent> Component_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteComponent remoteComponent) {
            return base.Channel.Component_CreateAsync(credentials, remoteComponent);
        }
        
        public void Component_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteComponent remoteComponent) {
            base.Channel.Component_Update(credentials, remoteComponent);
        }
        
        public System.Threading.Tasks.Task Component_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteComponent remoteComponent) {
            return base.Channel.Component_UpdateAsync(credentials, remoteComponent);
        }
        
        public void Component_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int componentId) {
            base.Channel.Component_Delete(credentials, projectId, componentId);
        }
        
        public System.Threading.Tasks.Task Component_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int componentId) {
            return base.Channel.Component_DeleteAsync(credentials, projectId, componentId);
        }
        
        public void Component_Undelete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int componentId) {
            base.Channel.Component_Undelete(credentials, projectId, componentId);
        }
        
        public System.Threading.Tasks.Task Component_UndeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int componentId) {
            return base.Channel.Component_UndeleteAsync(credentials, projectId, componentId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteBuild[] Build_RetrieveByReleaseId(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.Build_RetrieveByReleaseId(credentials, projectId, releaseId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteBuild[]> Build_RetrieveByReleaseIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.Build_RetrieveByReleaseIdAsync(credentials, projectId, releaseId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteBuild Build_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId, int buildId) {
            return base.Channel.Build_RetrieveById(credentials, projectId, releaseId, buildId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteBuild> Build_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId, int buildId) {
            return base.Channel.Build_RetrieveByIdAsync(credentials, projectId, releaseId, buildId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteBuild Build_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteBuild remoteBuild) {
            return base.Channel.Build_Create(credentials, remoteBuild);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteBuild> Build_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteBuild remoteBuild) {
            return base.Channel.Build_CreateAsync(credentials, remoteBuild);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeBranch[] SourceCode_RetrieveBranches(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.SourceCode_RetrieveBranches(credentials, projectId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeBranch[]> SourceCode_RetrieveBranchesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.SourceCode_RetrieveBranchesAsync(credentials, projectId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeFolder[] SourceCode_RetrieveFoldersByParent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string parentFolderId) {
            return base.Channel.SourceCode_RetrieveFoldersByParent(credentials, projectId, branchId, parentFolderId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeFolder[]> SourceCode_RetrieveFoldersByParentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string parentFolderId) {
            return base.Channel.SourceCode_RetrieveFoldersByParentAsync(credentials, projectId, branchId, parentFolderId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[] SourceCode_RetrieveFilesByFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string folderId) {
            return base.Channel.SourceCode_RetrieveFilesByFolder(credentials, projectId, branchId, folderId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[]> SourceCode_RetrieveFilesByFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string folderId) {
            return base.Channel.SourceCode_RetrieveFilesByFolderAsync(credentials, projectId, branchId, folderId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[] SourceCode_RetrieveFilesByRevision(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string revisionId) {
            return base.Channel.SourceCode_RetrieveFilesByRevision(credentials, projectId, branchId, revisionId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[]> SourceCode_RetrieveFilesByRevisionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string revisionId) {
            return base.Channel.SourceCode_RetrieveFilesByRevisionAsync(credentials, projectId, branchId, revisionId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeFile SourceCode_RetrieveFileById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string fileId) {
            return base.Channel.SourceCode_RetrieveFileById(credentials, projectId, branchId, fileId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeFile> SourceCode_RetrieveFileByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string fileId) {
            return base.Channel.SourceCode_RetrieveFileByIdAsync(credentials, projectId, branchId, fileId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[] SourceCode_RetrieveFilesForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, int artifactTypeId, int artifactId) {
            return base.Channel.SourceCode_RetrieveFilesForArtifact(credentials, projectId, branchId, artifactTypeId, artifactId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeFile[]> SourceCode_RetrieveFilesForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, int artifactTypeId, int artifactId) {
            return base.Channel.SourceCode_RetrieveFilesForArtifactAsync(credentials, projectId, branchId, artifactTypeId, artifactId);
        }
        
        public byte[] SourceCode_OpenFileById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string fileId, string revisionId) {
            return base.Channel.SourceCode_OpenFileById(credentials, projectId, branchId, fileId, revisionId);
        }
        
        public System.Threading.Tasks.Task<byte[]> SourceCode_OpenFileByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string fileId, string revisionId) {
            return base.Channel.SourceCode_OpenFileByIdAsync(credentials, projectId, branchId, fileId, revisionId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[] SourceCode_RetrieveRevisions(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, int startRow, int numberRows, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.SourceCode_RetrieveRevisions(credentials, projectId, branchId, startRow, numberRows, remoteSort, remoteFilters);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[]> SourceCode_RetrieveRevisionsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, int startRow, int numberRows, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.SourceCode_RetrieveRevisionsAsync(credentials, projectId, branchId, startRow, numberRows, remoteSort, remoteFilters);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[] SourceCode_RetrieveRevisionsForFile(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string fileId) {
            return base.Channel.SourceCode_RetrieveRevisionsForFile(credentials, projectId, branchId, fileId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[]> SourceCode_RetrieveRevisionsForFileAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string fileId) {
            return base.Channel.SourceCode_RetrieveRevisionsForFileAsync(credentials, projectId, branchId, fileId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision SourceCode_RetrieveRevisionById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string revisionId) {
            return base.Channel.SourceCode_RetrieveRevisionById(credentials, projectId, branchId, revisionId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision> SourceCode_RetrieveRevisionByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string revisionId) {
            return base.Channel.SourceCode_RetrieveRevisionByIdAsync(credentials, projectId, branchId, revisionId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[] SourceCode_RetrieveRevisionsForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, int artifactTypeId, int artifactId) {
            return base.Channel.SourceCode_RetrieveRevisionsForArtifact(credentials, projectId, branchId, artifactTypeId, artifactId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSourceCodeRevision[]> SourceCode_RetrieveRevisionsForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, int artifactTypeId, int artifactId) {
            return base.Channel.SourceCode_RetrieveRevisionsForArtifactAsync(credentials, projectId, branchId, artifactTypeId, artifactId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteLinkedArtifact[] SourceCode_RetrieveArtifactsForRevision(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string revisionId) {
            return base.Channel.SourceCode_RetrieveArtifactsForRevision(credentials, projectId, branchId, revisionId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteLinkedArtifact[]> SourceCode_RetrieveArtifactsForRevisionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string branchId, string revisionId) {
            return base.Channel.SourceCode_RetrieveArtifactsForRevisionAsync(credentials, projectId, branchId, revisionId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteMessageInfo Message_GetInfo(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Message_GetInfo(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteMessageInfo> Message_GetInfoAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Message_GetInfoAsync(credentials);
        }
        
        public long Message_PostNew(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int recipientUserId, string message) {
            return base.Channel.Message_PostNew(credentials, recipientUserId, message);
        }
        
        public System.Threading.Tasks.Task<long> Message_PostNewAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int recipientUserId, string message) {
            return base.Channel.Message_PostNewAsync(credentials, recipientUserId, message);
        }
        
        public void Message_MarkAllAsRead(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int senderUserId) {
            base.Channel.Message_MarkAllAsRead(credentials, senderUserId);
        }
        
        public System.Threading.Tasks.Task Message_MarkAllAsReadAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int senderUserId) {
            return base.Channel.Message_MarkAllAsReadAsync(credentials, senderUserId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteUserMessage[] Message_GetUnreadMessageSenders(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Message_GetUnreadMessageSenders(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteUserMessage[]> Message_GetUnreadMessageSendersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Message_GetUnreadMessageSendersAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteMessage[] Message_RetrieveUnread(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Message_RetrieveUnread(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteMessage[]> Message_RetrieveUnreadAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Message_RetrieveUnreadAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteHistoryChange[] History_RetrieveForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, int startingRow, int numberOfRows, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.History_RetrieveForArtifact(credentials, projectId, artifactTypeId, artifactId, startingRow, numberOfRows, remoteSort, remoteFilters);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteHistoryChange[]> History_RetrieveForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, int startingRow, int numberOfRows, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.History_RetrieveForArtifactAsync(credentials, projectId, artifactTypeId, artifactId, startingRow, numberOfRows, remoteSort, remoteFilters);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteHistoryChangeSet History_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int historyChangeSetId) {
            return base.Channel.History_RetrieveById(credentials, projectId, historyChangeSetId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteHistoryChangeSet> History_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int historyChangeSetId) {
            return base.Channel.History_RetrieveByIdAsync(credentials, projectId, historyChangeSetId);
        }
        
        public void Subscription_SubscribeToArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId) {
            base.Channel.Subscription_SubscribeToArtifact(credentials, projectId, artifactTypeId, artifactId);
        }
        
        public System.Threading.Tasks.Task Subscription_SubscribeToArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId) {
            return base.Channel.Subscription_SubscribeToArtifactAsync(credentials, projectId, artifactTypeId, artifactId);
        }
        
        public void Subscription_UnsubscribeFromArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId) {
            base.Channel.Subscription_UnsubscribeFromArtifact(credentials, projectId, artifactTypeId, artifactId);
        }
        
        public System.Threading.Tasks.Task Subscription_UnsubscribeFromArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId) {
            return base.Channel.Subscription_UnsubscribeFromArtifactAsync(credentials, projectId, artifactTypeId, artifactId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteArtifactSubscription[] Subscription_RetrieveForUser(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Subscription_RetrieveForUser(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteArtifactSubscription[]> Subscription_RetrieveForUserAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Subscription_RetrieveForUserAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteArtifactSubscription[] Subscription_RetrieveForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId) {
            return base.Channel.Subscription_RetrieveForArtifact(credentials, projectId, artifactTypeId, artifactId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteArtifactSubscription[]> Subscription_RetrieveForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId) {
            return base.Channel.Subscription_RetrieveForArtifactAsync(credentials, projectId, artifactTypeId, artifactId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSavedFilter[] SavedFilter_RetrieveForUser(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.SavedFilter_RetrieveForUser(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSavedFilter[]> SavedFilter_RetrieveForUserAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.SavedFilter_RetrieveForUserAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTableData Reports_RetrieveCustomGraphData(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int customGraphId, System.Nullable<int> projectId, System.Nullable<int> projectGroupId) {
            return base.Channel.Reports_RetrieveCustomGraphData(credentials, customGraphId, projectId, projectGroupId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTableData> Reports_RetrieveCustomGraphDataAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int customGraphId, System.Nullable<int> projectId, System.Nullable<int> projectGroupId) {
            return base.Channel.Reports_RetrieveCustomGraphDataAsync(credentials, customGraphId, projectId, projectGroupId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTableData Reports_RetrieveESQLQueryData(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string query) {
            return base.Channel.Reports_RetrieveESQLQueryData(credentials, query);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTableData> Reports_RetrieveESQLQueryDataAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string query) {
            return base.Channel.Reports_RetrieveESQLQueryDataAsync(credentials, query);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSavedReport[] Reports_RetrieveSaved(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, bool includeShared) {
            return base.Channel.Reports_RetrieveSaved(credentials, projectId, includeShared);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSavedReport[]> Reports_RetrieveSavedAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, bool includeShared) {
            return base.Channel.Reports_RetrieveSavedAsync(credentials, projectId, includeShared);
        }
        
        public System.Guid Reports_GenerateSavedReport(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int savedReportId) {
            return base.Channel.Reports_GenerateSavedReport(credentials, projectId, savedReportId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> Reports_GenerateSavedReportAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int savedReportId) {
            return base.Channel.Reports_GenerateSavedReportAsync(credentials, projectId, savedReportId);
        }
        
        public int Reports_CheckGeneratedReportStatus(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Guid reportGenerationId) {
            return base.Channel.Reports_CheckGeneratedReportStatus(credentials, projectId, reportGenerationId);
        }
        
        public System.Threading.Tasks.Task<int> Reports_CheckGeneratedReportStatusAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Guid reportGenerationId) {
            return base.Channel.Reports_CheckGeneratedReportStatusAsync(credentials, projectId, reportGenerationId);
        }
        
        public byte[] Reports_RetrieveGeneratedReport(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int generatedReportId) {
            return base.Channel.Reports_RetrieveGeneratedReport(credentials, projectId, generatedReportId);
        }
        
        public System.Threading.Tasks.Task<byte[]> Reports_RetrieveGeneratedReportAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int generatedReportId) {
            return base.Channel.Reports_RetrieveGeneratedReportAsync(credentials, projectId, generatedReportId);
        }
        
        public void Requirement_Move(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId, System.Nullable<int> destinationRequirementId) {
            base.Channel.Requirement_Move(credentials, projectId, requirementId, destinationRequirementId);
        }
        
        public System.Threading.Tasks.Task Requirement_MoveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId, System.Nullable<int> destinationRequirementId) {
            return base.Channel.Requirement_MoveAsync(credentials, projectId, requirementId, destinationRequirementId);
        }
        
        public void Requirement_Indent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            base.Channel.Requirement_Indent(credentials, projectId, requirementId);
        }
        
        public System.Threading.Tasks.Task Requirement_IndentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_IndentAsync(credentials, projectId, requirementId);
        }
        
        public void Requirement_Outdent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            base.Channel.Requirement_Outdent(credentials, projectId, requirementId);
        }
        
        public System.Threading.Tasks.Task Requirement_OutdentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_OutdentAsync(credentials, projectId, requirementId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComment[] Requirement_RetrieveComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_RetrieveComments(credentials, projectId, requirementId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> Requirement_RetrieveCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_RetrieveCommentsAsync(credentials, projectId, requirementId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComment Requirement_CreateComment(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.Requirement_CreateComment(credentials, projectId, remoteComment);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment> Requirement_CreateCommentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.Requirement_CreateCommentAsync(credentials, projectId, remoteComment);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirementStatus[] Requirement_RetrieveStatuses(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Requirement_RetrieveStatuses(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementStatus[]> Requirement_RetrieveStatusesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Requirement_RetrieveStatusesAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirementType[] Requirement_RetrieveTypes(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Requirement_RetrieveTypes(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementType[]> Requirement_RetrieveTypesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Requirement_RetrieveTypesAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirementImportance[] Requirement_RetrieveImportances(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Requirement_RetrieveImportances(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementImportance[]> Requirement_RetrieveImportancesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Requirement_RetrieveImportancesAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowField[] Requirement_RetrieveWorkflowFields(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Requirement_RetrieveWorkflowFields(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowField[]> Requirement_RetrieveWorkflowFieldsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Requirement_RetrieveWorkflowFieldsAsync(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[] Requirement_RetrieveWorkflowTransitions(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            return base.Channel.Requirement_RetrieveWorkflowTransitions(credentials, projectId, currentTypeId, currentStatusId, isCreator, isOwner);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[]> Requirement_RetrieveWorkflowTransitionsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            return base.Channel.Requirement_RetrieveWorkflowTransitionsAsync(credentials, projectId, currentTypeId, currentStatusId, isCreator, isOwner);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[] Requirement_RetrieveWorkflowCustomProperties(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Requirement_RetrieveWorkflowCustomProperties(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[]> Requirement_RetrieveWorkflowCustomPropertiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Requirement_RetrieveWorkflowCustomPropertiesAsync(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirementStep[] Requirement_RetrieveSteps(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_RetrieveSteps(credentials, projectId, requirementId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementStep[]> Requirement_RetrieveStepsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_RetrieveStepsAsync(credentials, projectId, requirementId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirementStep Requirement_RetrieveStepById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementStepId) {
            return base.Channel.Requirement_RetrieveStepById(credentials, projectId, requirementStepId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementStep> Requirement_RetrieveStepByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementStepId) {
            return base.Channel.Requirement_RetrieveStepByIdAsync(credentials, projectId, requirementStepId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirementStep Requirement_AddStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, System.Nullable<int> existingRequirementStepId, System.Nullable<int> creatorId) {
            return base.Channel.Requirement_AddStep(credentials, projectId, remoteRequirementStep, existingRequirementStepId, creatorId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementStep> Requirement_AddStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementStep remoteRequirementStep, System.Nullable<int> existingRequirementStepId, System.Nullable<int> creatorId) {
            return base.Channel.Requirement_AddStepAsync(credentials, projectId, remoteRequirementStep, existingRequirementStepId, creatorId);
        }
        
        public void Requirement_UpdateStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementStep remoteRequirementStep) {
            base.Channel.Requirement_UpdateStep(credentials, projectId, remoteRequirementStep);
        }
        
        public System.Threading.Tasks.Task Requirement_UpdateStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementStep remoteRequirementStep) {
            return base.Channel.Requirement_UpdateStepAsync(credentials, projectId, remoteRequirementStep);
        }
        
        public void Requirement_MoveStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId, int sourceRequirementStepId, System.Nullable<int> destinationRequirementStepId) {
            base.Channel.Requirement_MoveStep(credentials, projectId, requirementId, sourceRequirementStepId, destinationRequirementStepId);
        }
        
        public System.Threading.Tasks.Task Requirement_MoveStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId, int sourceRequirementStepId, System.Nullable<int> destinationRequirementStepId) {
            return base.Channel.Requirement_MoveStepAsync(credentials, projectId, requirementId, sourceRequirementStepId, destinationRequirementStepId);
        }
        
        public void Requirement_DeleteStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId, int requirementStepId) {
            base.Channel.Requirement_DeleteStep(credentials, projectId, requirementId, requirementStepId);
        }
        
        public System.Threading.Tasks.Task Requirement_DeleteStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId, int requirementStepId) {
            return base.Channel.Requirement_DeleteStepAsync(credentials, projectId, requirementId, requirementStepId);
        }
        
        public void Requirement_AddTestStepCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping remoteReqTestStepMapping) {
            base.Channel.Requirement_AddTestStepCoverage(credentials, projectId, remoteReqTestStepMapping);
        }
        
        public System.Threading.Tasks.Task Requirement_AddTestStepCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping remoteReqTestStepMapping) {
            return base.Channel.Requirement_AddTestStepCoverageAsync(credentials, projectId, remoteReqTestStepMapping);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping[] Requirement_RetrieveTestStepCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_RetrieveTestStepCoverage(credentials, projectId, requirementId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping[]> Requirement_RetrieveTestStepCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_RetrieveTestStepCoverageAsync(credentials, projectId, requirementId);
        }
        
        public void Requirement_RemoveTestStepCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping remoteReqTestStepMapping) {
            base.Channel.Requirement_RemoveTestStepCoverage(credentials, projectId, remoteReqTestStepMapping);
        }
        
        public System.Threading.Tasks.Task Requirement_RemoveTestStepCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping remoteReqTestStepMapping) {
            return base.Channel.Requirement_RemoveTestStepCoverageAsync(credentials, projectId, remoteReqTestStepMapping);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping[] TestStep_RetrieveRequirementCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testStepId) {
            return base.Channel.TestStep_RetrieveRequirementCoverage(credentials, projectId, testStepId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementTestStepMapping[]> TestStep_RetrieveRequirementCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testStepId) {
            return base.Channel.TestStep_RetrieveRequirementCoverageAsync(credentials, projectId, testStepId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteVersion System_GetProductVersion() {
            return base.Channel.System_GetProductVersion();
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteVersion> System_GetProductVersionAsync() {
            return base.Channel.System_GetProductVersionAsync();
        }
        
        public SampleDataSync.SpiraSoapService.RemoteSetting[] System_GetSettings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.System_GetSettings(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteSetting[]> System_GetSettingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.System_GetSettingsAsync(credentials);
        }
        
        public string System_GetArtifactUrl(int navigationLinkId, int projectId, int artifactId, string tabName) {
            return base.Channel.System_GetArtifactUrl(navigationLinkId, projectId, artifactId, tabName);
        }
        
        public System.Threading.Tasks.Task<string> System_GetArtifactUrlAsync(int navigationLinkId, int projectId, int artifactId, string tabName) {
            return base.Channel.System_GetArtifactUrlAsync(navigationLinkId, projectId, artifactId, tabName);
        }
        
        public int System_GetProjectIdForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int artifactTypeId, int artifactId) {
            return base.Channel.System_GetProjectIdForArtifact(credentials, artifactTypeId, artifactId);
        }
        
        public System.Threading.Tasks.Task<int> System_GetProjectIdForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int artifactTypeId, int artifactId) {
            return base.Channel.System_GetProjectIdForArtifactAsync(credentials, artifactTypeId, artifactId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTask Task_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTask remoteTask) {
            return base.Channel.Task_Create(credentials, remoteTask);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTask> Task_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTask remoteTask) {
            return base.Channel.Task_CreateAsync(credentials, remoteTask);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTask[] Task_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.Task_Retrieve(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTask[]> Task_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.Task_RetrieveAsync(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTask Task_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskId) {
            return base.Channel.Task_RetrieveById(credentials, projectId, taskId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTask> Task_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskId) {
            return base.Channel.Task_RetrieveByIdAsync(credentials, projectId, taskId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTask[] Task_RetrieveForOwner(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Task_RetrieveForOwner(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTask[]> Task_RetrieveForOwnerAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Task_RetrieveForOwnerAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTask[] Task_RetrieveNew(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.DateTime creationDate, int startRow, int numberOfRows) {
            return base.Channel.Task_RetrieveNew(credentials, projectId, creationDate, startRow, numberOfRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTask[]> Task_RetrieveNewAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.DateTime creationDate, int startRow, int numberOfRows) {
            return base.Channel.Task_RetrieveNewAsync(credentials, projectId, creationDate, startRow, numberOfRows);
        }
        
        public void Task_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTask remoteTask) {
            base.Channel.Task_Update(credentials, remoteTask);
        }
        
        public System.Threading.Tasks.Task Task_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTask remoteTask) {
            return base.Channel.Task_UpdateAsync(credentials, remoteTask);
        }
        
        public long Task_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.Task_Count(credentials, projectId, remoteFilters);
        }
        
        public System.Threading.Tasks.Task<long> Task_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.Task_CountAsync(credentials, projectId, remoteFilters);
        }
        
        public void Task_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskId) {
            base.Channel.Task_Delete(credentials, projectId, taskId);
        }
        
        public System.Threading.Tasks.Task Task_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskId) {
            return base.Channel.Task_DeleteAsync(credentials, projectId, taskId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComment[] Task_RetrieveComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int TaskId) {
            return base.Channel.Task_RetrieveComments(credentials, projectId, TaskId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> Task_RetrieveCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int TaskId) {
            return base.Channel.Task_RetrieveCommentsAsync(credentials, projectId, TaskId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComment Task_CreateComment(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.Task_CreateComment(credentials, projectId, remoteComment);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment> Task_CreateCommentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.Task_CreateCommentAsync(credentials, projectId, remoteComment);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTaskStatus[] Task_RetrieveStatuses(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Task_RetrieveStatuses(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskStatus[]> Task_RetrieveStatusesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Task_RetrieveStatusesAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTaskType[] Task_RetrieveTypes(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Task_RetrieveTypes(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskType[]> Task_RetrieveTypesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Task_RetrieveTypesAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTaskPriority[] Task_RetrievePriorities(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Task_RetrievePriorities(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskPriority[]> Task_RetrievePrioritiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Task_RetrievePrioritiesAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowField[] Task_RetrieveWorkflowFields(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Task_RetrieveWorkflowFields(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowField[]> Task_RetrieveWorkflowFieldsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Task_RetrieveWorkflowFieldsAsync(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[] Task_RetrieveWorkflowTransitions(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            return base.Channel.Task_RetrieveWorkflowTransitions(credentials, projectId, currentTypeId, currentStatusId, isCreator, isOwner);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[]> Task_RetrieveWorkflowTransitionsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            return base.Channel.Task_RetrieveWorkflowTransitionsAsync(credentials, projectId, currentTypeId, currentStatusId, isCreator, isOwner);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[] Task_RetrieveWorkflowCustomProperties(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Task_RetrieveWorkflowCustomProperties(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[]> Task_RetrieveWorkflowCustomPropertiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Task_RetrieveWorkflowCustomPropertiesAsync(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTaskFolder[] Task_RetrieveFolders(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.Task_RetrieveFolders(credentials, projectId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskFolder[]> Task_RetrieveFoldersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.Task_RetrieveFoldersAsync(credentials, projectId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTaskFolder[] Task_RetrieveFoldersByParent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentTaskFolderId) {
            return base.Channel.Task_RetrieveFoldersByParent(credentials, projectId, parentTaskFolderId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskFolder[]> Task_RetrieveFoldersByParentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentTaskFolderId) {
            return base.Channel.Task_RetrieveFoldersByParentAsync(credentials, projectId, parentTaskFolderId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTaskFolder Task_CreateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTaskFolder remoteTaskFolder) {
            return base.Channel.Task_CreateFolder(credentials, remoteTaskFolder);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskFolder> Task_CreateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTaskFolder remoteTaskFolder) {
            return base.Channel.Task_CreateFolderAsync(credentials, remoteTaskFolder);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTaskFolder Task_RetrieveFolderById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskFolderId) {
            return base.Channel.Task_RetrieveFolderById(credentials, projectId, taskFolderId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTaskFolder> Task_RetrieveFolderByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskFolderId) {
            return base.Channel.Task_RetrieveFolderByIdAsync(credentials, projectId, taskFolderId);
        }
        
        public void Task_DeleteFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskFolderId) {
            base.Channel.Task_DeleteFolder(credentials, projectId, taskFolderId);
        }
        
        public System.Threading.Tasks.Task Task_DeleteFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int taskFolderId) {
            return base.Channel.Task_DeleteFolderAsync(credentials, projectId, taskFolderId);
        }
        
        public void Task_UpdateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTaskFolder remoteTaskFolder) {
            base.Channel.Task_UpdateFolder(credentials, remoteTaskFolder);
        }
        
        public System.Threading.Tasks.Task Task_UpdateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTaskFolder remoteTaskFolder) {
            return base.Channel.Task_UpdateFolderAsync(credentials, remoteTaskFolder);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCase TestCase_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCase remoteTestCase) {
            return base.Channel.TestCase_Create(credentials, remoteTestCase);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCase> TestCase_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCase remoteTestCase) {
            return base.Channel.TestCase_CreateAsync(credentials, remoteTestCase);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCaseFolder TestCase_CreateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder) {
            return base.Channel.TestCase_CreateFolder(credentials, remoteTestCaseFolder);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseFolder> TestCase_CreateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder) {
            return base.Channel.TestCase_CreateFolderAsync(credentials, remoteTestCaseFolder);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCase TestCase_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId) {
            return base.Channel.TestCase_RetrieveById(credentials, projectId, testCaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCase> TestCase_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId) {
            return base.Channel.TestCase_RetrieveByIdAsync(credentials, projectId, testCaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCaseFolder TestCase_RetrieveFolderById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseFolderId) {
            return base.Channel.TestCase_RetrieveFolderById(credentials, projectId, testCaseFolderId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseFolder> TestCase_RetrieveFolderByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseFolderId) {
            return base.Channel.TestCase_RetrieveFolderByIdAsync(credentials, projectId, testCaseFolderId);
        }
        
        public void TestCase_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCase remoteTestCase) {
            base.Channel.TestCase_Update(credentials, remoteTestCase);
        }
        
        public System.Threading.Tasks.Task TestCase_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCase remoteTestCase) {
            return base.Channel.TestCase_UpdateAsync(credentials, remoteTestCase);
        }
        
        public void TestCase_DeleteFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseFolderId) {
            base.Channel.TestCase_DeleteFolder(credentials, projectId, testCaseFolderId);
        }
        
        public System.Threading.Tasks.Task TestCase_DeleteFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseFolderId) {
            return base.Channel.TestCase_DeleteFolderAsync(credentials, projectId, testCaseFolderId);
        }
        
        public void TestCase_UpdateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder) {
            base.Channel.TestCase_UpdateFolder(credentials, remoteTestCaseFolder);
        }
        
        public System.Threading.Tasks.Task TestCase_UpdateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestCaseFolder remoteTestCaseFolder) {
            return base.Channel.TestCase_UpdateFolderAsync(credentials, remoteTestCaseFolder);
        }
        
        public void TestCase_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId) {
            base.Channel.TestCase_Delete(credentials, projectId, testCaseId);
        }
        
        public System.Threading.Tasks.Task TestCase_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId) {
            return base.Channel.TestCase_DeleteAsync(credentials, projectId, testCaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCaseParameter TestCase_AddParameter(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteTestCaseParameter remoteTestCaseParameter) {
            return base.Channel.TestCase_AddParameter(credentials, projectId, remoteTestCaseParameter);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseParameter> TestCase_AddParameterAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteTestCaseParameter remoteTestCaseParameter) {
            return base.Channel.TestCase_AddParameterAsync(credentials, projectId, remoteTestCaseParameter);
        }
        
        public string TestCase_CreateParameterToken(string parameterName) {
            return base.Channel.TestCase_CreateParameterToken(parameterName);
        }
        
        public System.Threading.Tasks.Task<string> TestCase_CreateParameterTokenAsync(string parameterName) {
            return base.Channel.TestCase_CreateParameterTokenAsync(parameterName);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCaseParameter[] TestCase_RetrieveParameters(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId) {
            return base.Channel.TestCase_RetrieveParameters(credentials, projectId, testCaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseParameter[]> TestCase_RetrieveParametersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId) {
            return base.Channel.TestCase_RetrieveParametersAsync(credentials, projectId, testCaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestStepParameter[] TestCase_RetrieveStepParameters(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int testStepId) {
            return base.Channel.TestCase_RetrieveStepParameters(credentials, projectId, testCaseId, testStepId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestStepParameter[]> TestCase_RetrieveStepParametersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int testStepId) {
            return base.Channel.TestCase_RetrieveStepParametersAsync(credentials, projectId, testCaseId, testStepId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestStep[] TestCase_RetrieveSteps(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId) {
            return base.Channel.TestCase_RetrieveSteps(credentials, projectId, testCaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestStep[]> TestCase_RetrieveStepsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId) {
            return base.Channel.TestCase_RetrieveStepsAsync(credentials, projectId, testCaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestStep TestCase_RetrieveStepById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testStepId) {
            return base.Channel.TestCase_RetrieveStepById(credentials, projectId, testStepId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestStep> TestCase_RetrieveStepByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testStepId) {
            return base.Channel.TestCase_RetrieveStepByIdAsync(credentials, projectId, testStepId);
        }
        
        public void TestCase_MoveStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId) {
            base.Channel.TestCase_MoveStep(credentials, projectId, testCaseId, sourceTestStepId, destinationTestStepId);
        }
        
        public System.Threading.Tasks.Task TestCase_MoveStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId) {
            return base.Channel.TestCase_MoveStepAsync(credentials, projectId, testCaseId, sourceTestStepId, destinationTestStepId);
        }
        
        public void TestCase_DeleteStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int testStepId) {
            base.Channel.TestCase_DeleteStep(credentials, projectId, testCaseId, testStepId);
        }
        
        public System.Threading.Tasks.Task TestCase_DeleteStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int testStepId) {
            return base.Channel.TestCase_DeleteStepAsync(credentials, projectId, testCaseId, testStepId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestStep TestCase_AddStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestStep remoteTestStep, int testCaseId) {
            return base.Channel.TestCase_AddStep(credentials, remoteTestStep, testCaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestStep> TestCase_AddStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestStep remoteTestStep, int testCaseId) {
            return base.Channel.TestCase_AddStepAsync(credentials, remoteTestStep, testCaseId);
        }
        
        public void TestCase_UpdateStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestStep remoteTestStep) {
            base.Channel.TestCase_UpdateStep(credentials, remoteTestStep);
        }
        
        public System.Threading.Tasks.Task TestCase_UpdateStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestStep remoteTestStep) {
            return base.Channel.TestCase_UpdateStepAsync(credentials, remoteTestStep);
        }
        
        public int TestCase_AddLink(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int position, int linkedTestCaseId, SampleDataSync.SpiraSoapService.RemoteTestStepParameter[] parameters) {
            return base.Channel.TestCase_AddLink(credentials, projectId, testCaseId, position, linkedTestCaseId, parameters);
        }
        
        public System.Threading.Tasks.Task<int> TestCase_AddLinkAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, int position, int linkedTestCaseId, SampleDataSync.SpiraSoapService.RemoteTestStepParameter[] parameters) {
            return base.Channel.TestCase_AddLinkAsync(credentials, projectId, testCaseId, position, linkedTestCaseId, parameters);
        }
        
        public void TestCase_AddUpdateAutomationScript(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> documentTypeId, System.Nullable<int> projectAttachmentFolderId) {
            base.Channel.TestCase_AddUpdateAutomationScript(credentials, projectId, testCaseId, automationEngineId, urlOrFilename, description, binaryData, version, documentTypeId, projectAttachmentFolderId);
        }
        
        public System.Threading.Tasks.Task TestCase_AddUpdateAutomationScriptAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> documentTypeId, System.Nullable<int> projectAttachmentFolderId) {
            return base.Channel.TestCase_AddUpdateAutomationScriptAsync(credentials, projectId, testCaseId, automationEngineId, urlOrFilename, description, binaryData, version, documentTypeId, projectAttachmentFolderId);
        }
        
        public long TestCase_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_Count(credentials, projectId, remoteFilters, releaseId);
        }
        
        public System.Threading.Tasks.Task<long> TestCase_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_CountAsync(credentials, projectId, remoteFilters, releaseId);
        }
        
        public long TestCase_CountForFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testCaseFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_CountForFolder(credentials, projectId, testCaseFolderId, remoteFilters, releaseId);
        }
        
        public System.Threading.Tasks.Task<long> TestCase_CountForFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testCaseFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_CountForFolderAsync(credentials, projectId, testCaseFolderId, remoteFilters, releaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCase[] TestCase_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_Retrieve(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCase[]> TestCase_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_RetrieveAsync(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCase[] TestCase_RetrieveByFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testCaseFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_RetrieveByFolder(credentials, projectId, testCaseFolderId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCase[]> TestCase_RetrieveByFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testCaseFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_RetrieveByFolderAsync(credentials, projectId, testCaseFolderId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCase[] TestCase_RetrieveByTestSetId(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestCase_RetrieveByTestSetId(credentials, projectId, testSetId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCase[]> TestCase_RetrieveByTestSetIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestCase_RetrieveByTestSetIdAsync(credentials, projectId, testSetId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCase[] TestCase_RetrieveForOwner(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.TestCase_RetrieveForOwner(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCase[]> TestCase_RetrieveForOwnerAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.TestCase_RetrieveForOwnerAsync(credentials);
        }
        
        public void TestCase_Move(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, System.Nullable<int> testCaseFolderId) {
            base.Channel.TestCase_Move(credentials, projectId, testCaseId, testCaseFolderId);
        }
        
        public System.Threading.Tasks.Task TestCase_MoveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, System.Nullable<int> testCaseFolderId) {
            return base.Channel.TestCase_MoveAsync(credentials, projectId, testCaseId, testCaseFolderId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCaseFolder[] TestCase_RetrieveFolders(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.TestCase_RetrieveFolders(credentials, projectId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseFolder[]> TestCase_RetrieveFoldersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.TestCase_RetrieveFoldersAsync(credentials, projectId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCaseFolder[] TestCase_RetrieveFoldersByParent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentTestCaseFolderId, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_RetrieveFoldersByParent(credentials, projectId, parentTestCaseFolderId, releaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseFolder[]> TestCase_RetrieveFoldersByParentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentTestCaseFolderId, System.Nullable<int> releaseId) {
            return base.Channel.TestCase_RetrieveFoldersByParentAsync(credentials, projectId, parentTestCaseFolderId, releaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComment[] TestCase_RetrieveComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int TestCaseId) {
            return base.Channel.TestCase_RetrieveComments(credentials, projectId, TestCaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> TestCase_RetrieveCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int TestCaseId) {
            return base.Channel.TestCase_RetrieveCommentsAsync(credentials, projectId, TestCaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComment TestCase_CreateComment(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.TestCase_CreateComment(credentials, projectId, remoteComment);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment> TestCase_CreateCommentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.TestCase_CreateCommentAsync(credentials, projectId, remoteComment);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCaseStatus[] TestCase_RetrieveStatuses(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.TestCase_RetrieveStatuses(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseStatus[]> TestCase_RetrieveStatusesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.TestCase_RetrieveStatusesAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCaseType[] TestCase_RetrieveTypes(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.TestCase_RetrieveTypes(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCaseType[]> TestCase_RetrieveTypesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.TestCase_RetrieveTypesAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestCasePriority[] TestCase_RetrievePriorities(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.TestCase_RetrievePriorities(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestCasePriority[]> TestCase_RetrievePrioritiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.TestCase_RetrievePrioritiesAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowField[] TestCase_RetrieveWorkflowFields(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.TestCase_RetrieveWorkflowFields(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowField[]> TestCase_RetrieveWorkflowFieldsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.TestCase_RetrieveWorkflowFieldsAsync(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[] TestCase_RetrieveWorkflowTransitions(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            return base.Channel.TestCase_RetrieveWorkflowTransitions(credentials, projectId, currentTypeId, currentStatusId, isCreator, isOwner);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[]> TestCase_RetrieveWorkflowTransitionsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            return base.Channel.TestCase_RetrieveWorkflowTransitionsAsync(credentials, projectId, currentTypeId, currentStatusId, isCreator, isOwner);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[] TestCase_RetrieveWorkflowCustomProperties(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.TestCase_RetrieveWorkflowCustomProperties(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[]> TestCase_RetrieveWorkflowCustomPropertiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.TestCase_RetrieveWorkflowCustomPropertiesAsync(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteManualTestRun[] TestRun_CreateFromTestCases(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int[] testCaseIds, System.Nullable<int> releaseId) {
            return base.Channel.TestRun_CreateFromTestCases(credentials, projectId, testCaseIds, releaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteManualTestRun[]> TestRun_CreateFromTestCasesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int[] testCaseIds, System.Nullable<int> releaseId) {
            return base.Channel.TestRun_CreateFromTestCasesAsync(credentials, projectId, testCaseIds, releaseId);
        }
        
        public long TestRun_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.TestRun_Count(credentials, projectId, remoteFilters);
        }
        
        public System.Threading.Tasks.Task<long> TestRun_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.TestRun_CountAsync(credentials, projectId, remoteFilters);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteManualTestRun[] TestRun_CreateFromTestSet(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestRun_CreateFromTestSet(credentials, projectId, testSetId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteManualTestRun[]> TestRun_CreateFromTestSetAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestRun_CreateFromTestSetAsync(credentials, projectId, testSetId);
        }
        
        public void TestRun_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId) {
            base.Channel.TestRun_Delete(credentials, projectId, testRunId);
        }
        
        public System.Threading.Tasks.Task TestRun_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId) {
            return base.Channel.TestRun_DeleteAsync(credentials, projectId, testRunId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_CreateForAutomationHost(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string automationHostToken, SampleDataSync.SpiraSoapService.DateRange dateRange) {
            return base.Channel.TestRun_CreateForAutomationHost(credentials, projectId, automationHostToken, dateRange);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[]> TestRun_CreateForAutomationHostAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, string automationHostToken, SampleDataSync.SpiraSoapService.DateRange dateRange) {
            return base.Channel.TestRun_CreateForAutomationHostAsync(credentials, projectId, automationHostToken, dateRange);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_CreateForAutomatedTestSet(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, string automationHostToken) {
            return base.Channel.TestRun_CreateForAutomatedTestSet(credentials, projectId, testSetId, automationHostToken);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[]> TestRun_CreateForAutomatedTestSetAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, string automationHostToken) {
            return base.Channel.TestRun_CreateForAutomatedTestSetAsync(credentials, projectId, testSetId, automationHostToken);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun TestRun_RecordAutomated1(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun remoteTestRun) {
            return base.Channel.TestRun_RecordAutomated1(credentials, remoteTestRun);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun> TestRun_RecordAutomated1Async(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun remoteTestRun) {
            return base.Channel.TestRun_RecordAutomated1Async(credentials, remoteTestRun);
        }
        
        public int TestRun_RecordAutomated2(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId) {
            return base.Channel.TestRun_RecordAutomated2(userName, password, projectId, testerUserId, testCaseId, releaseId, testSetId, testSetTestCaseId, buildId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, testRunFormatId);
        }
        
        public System.Threading.Tasks.Task<int> TestRun_RecordAutomated2Async(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId) {
            return base.Channel.TestRun_RecordAutomated2Async(userName, password, projectId, testerUserId, testCaseId, releaseId, testSetId, testSetTestCaseId, buildId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, testRunFormatId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_RecordAutomated3(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[] remoteTestRuns) {
            return base.Channel.TestRun_RecordAutomated3(credentials, projectId, remoteTestRuns);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[]> TestRun_RecordAutomated3Async(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[] remoteTestRuns) {
            return base.Channel.TestRun_RecordAutomated3Async(credentials, projectId, remoteTestRuns);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestRun[] TestRun_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_Retrieve(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestRun[]> TestRun_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_RetrieveAsync(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteManualTestRun[] TestRun_RetrieveManual(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_RetrieveManual(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteManualTestRun[]> TestRun_RetrieveManualAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_RetrieveManualAsync(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[] TestRun_RetrieveAutomated(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_RetrieveAutomated(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun[]> TestRun_RetrieveAutomatedAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_RetrieveAutomatedAsync(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestRun TestRun_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId) {
            return base.Channel.TestRun_RetrieveById(credentials, projectId, testRunId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestRun> TestRun_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId) {
            return base.Channel.TestRun_RetrieveByIdAsync(credentials, projectId, testRunId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestRun[] TestRun_RetrieveByTestCaseId(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_RetrieveByTestCaseId(credentials, projectId, testCaseId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestRun[]> TestRun_RetrieveByTestCaseIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_RetrieveByTestCaseIdAsync(credentials, projectId, testCaseId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun TestRun_RetrieveAutomatedById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId) {
            return base.Channel.TestRun_RetrieveAutomatedById(credentials, projectId, testRunId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAutomatedTestRun> TestRun_RetrieveAutomatedByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId) {
            return base.Channel.TestRun_RetrieveAutomatedByIdAsync(credentials, projectId, testRunId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteManualTestRun TestRun_RetrieveManualById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId) {
            return base.Channel.TestRun_RetrieveManualById(credentials, projectId, testRunId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteManualTestRun> TestRun_RetrieveManualByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunId) {
            return base.Channel.TestRun_RetrieveManualByIdAsync(credentials, projectId, testRunId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteManualTestRun[] TestRun_Save(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteManualTestRun[] remoteTestRuns, System.Nullable<System.DateTime> endDate) {
            return base.Channel.TestRun_Save(credentials, projectId, remoteTestRuns, endDate);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteManualTestRun[]> TestRun_SaveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteManualTestRun[] remoteTestRuns, System.Nullable<System.DateTime> endDate) {
            return base.Channel.TestRun_SaveAsync(credentials, projectId, remoteTestRuns, endDate);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping[] TestSet_AddTestMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseParameter[] parameters) {
            return base.Channel.TestSet_AddTestMapping(credentials, projectId, remoteTestSetTestCaseMapping, existingTestSetTestCaseId, parameters);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping[]> TestSet_AddTestMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseParameter[] parameters) {
            return base.Channel.TestSet_AddTestMappingAsync(credentials, projectId, remoteTestSetTestCaseMapping, existingTestSetTestCaseId, parameters);
        }
        
        public void TestSet_RemoveTestMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping) {
            base.Channel.TestSet_RemoveTestMapping(credentials, projectId, remoteTestSetTestCaseMapping);
        }
        
        public System.Threading.Tasks.Task TestSet_RemoveTestMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping) {
            return base.Channel.TestSet_RemoveTestMappingAsync(credentials, projectId, remoteTestSetTestCaseMapping);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping[] TestSet_RetrieveTestCaseMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestSet_RetrieveTestCaseMapping(credentials, projectId, testSetId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseMapping[]> TestSet_RetrieveTestCaseMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestSet_RetrieveTestCaseMappingAsync(credentials, projectId, testSetId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSet TestSet_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSet remoteTestSet) {
            return base.Channel.TestSet_Create(credentials, remoteTestSet);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSet> TestSet_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSet remoteTestSet) {
            return base.Channel.TestSet_CreateAsync(credentials, remoteTestSet);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSetFolder TestSet_CreateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder) {
            return base.Channel.TestSet_CreateFolder(credentials, remoteTestSetFolder);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetFolder> TestSet_CreateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder) {
            return base.Channel.TestSet_CreateFolderAsync(credentials, remoteTestSetFolder);
        }
        
        public long TestSet_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_Count(credentials, projectId, remoteFilters, releaseId);
        }
        
        public System.Threading.Tasks.Task<long> TestSet_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_CountAsync(credentials, projectId, remoteFilters, releaseId);
        }
        
        public long TestSet_CountForFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testSetFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_CountForFolder(credentials, projectId, testSetFolderId, remoteFilters, releaseId);
        }
        
        public System.Threading.Tasks.Task<long> TestSet_CountForFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testSetFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_CountForFolderAsync(credentials, projectId, testSetFolderId, remoteFilters, releaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSet[] TestSet_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_Retrieve(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSet[]> TestSet_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_RetrieveAsync(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSet[] TestSet_RetrieveByFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testSetFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_RetrieveByFolder(credentials, projectId, testSetFolderId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSet[]> TestSet_RetrieveByFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> testSetFolderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_RetrieveByFolderAsync(credentials, projectId, testSetFolderId, remoteFilters, remoteSort, startingRow, numberOfRows, releaseId);
        }
        
        public void TestSet_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSet remoteTestSet) {
            base.Channel.TestSet_Update(credentials, remoteTestSet);
        }
        
        public System.Threading.Tasks.Task TestSet_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSet remoteTestSet) {
            return base.Channel.TestSet_UpdateAsync(credentials, remoteTestSet);
        }
        
        public void TestSet_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            base.Channel.TestSet_Delete(credentials, projectId, testSetId);
        }
        
        public System.Threading.Tasks.Task TestSet_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestSet_DeleteAsync(credentials, projectId, testSetId);
        }
        
        public void TestSet_UpdateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder) {
            base.Channel.TestSet_UpdateFolder(credentials, remoteTestSetFolder);
        }
        
        public System.Threading.Tasks.Task TestSet_UpdateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteTestSetFolder remoteTestSetFolder) {
            return base.Channel.TestSet_UpdateFolderAsync(credentials, remoteTestSetFolder);
        }
        
        public void TestSet_DeleteFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetFolderId) {
            base.Channel.TestSet_DeleteFolder(credentials, projectId, testSetFolderId);
        }
        
        public System.Threading.Tasks.Task TestSet_DeleteFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetFolderId) {
            return base.Channel.TestSet_DeleteFolderAsync(credentials, projectId, testSetFolderId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSet TestSet_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestSet_RetrieveById(credentials, projectId, testSetId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSet> TestSet_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestSet_RetrieveByIdAsync(credentials, projectId, testSetId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSetFolder TestSet_RetrieveFolderById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetFolderId) {
            return base.Channel.TestSet_RetrieveFolderById(credentials, projectId, testSetFolderId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetFolder> TestSet_RetrieveFolderByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetFolderId) {
            return base.Channel.TestSet_RetrieveFolderByIdAsync(credentials, projectId, testSetFolderId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSetFolder[] TestSet_RetrieveFolders(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.TestSet_RetrieveFolders(credentials, projectId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetFolder[]> TestSet_RetrieveFoldersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.TestSet_RetrieveFoldersAsync(credentials, projectId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSetFolder[] TestSet_RetrieveFoldersByParent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentTestSetFolderId, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_RetrieveFoldersByParent(credentials, projectId, parentTestSetFolderId, releaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetFolder[]> TestSet_RetrieveFoldersByParentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentTestSetFolderId, System.Nullable<int> releaseId) {
            return base.Channel.TestSet_RetrieveFoldersByParentAsync(credentials, projectId, parentTestSetFolderId, releaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSet[] TestSet_RetrieveForOwner(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.TestSet_RetrieveForOwner(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSet[]> TestSet_RetrieveForOwnerAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.TestSet_RetrieveForOwnerAsync(credentials);
        }
        
        public void TestSet_Move(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, System.Nullable<int> destinationTestSetId) {
            base.Channel.TestSet_Move(credentials, projectId, testSetId, destinationTestSetId);
        }
        
        public System.Threading.Tasks.Task TestSet_MoveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, System.Nullable<int> destinationTestSetId) {
            return base.Channel.TestSet_MoveAsync(credentials, projectId, testSetId, destinationTestSetId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComment[] TestSet_RetrieveComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int TestSetId) {
            return base.Channel.TestSet_RetrieveComments(credentials, projectId, TestSetId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> TestSet_RetrieveCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int TestSetId) {
            return base.Channel.TestSet_RetrieveCommentsAsync(credentials, projectId, TestSetId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComment TestSet_CreateComment(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.TestSet_CreateComment(credentials, projectId, remoteComment);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment> TestSet_CreateCommentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.TestSet_CreateCommentAsync(credentials, projectId, remoteComment);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSetParameter[] TestSet_RetrieveParameters(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestSet_RetrieveParameters(credentials, projectId, testSetId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetParameter[]> TestSet_RetrieveParametersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestSet_RetrieveParametersAsync(credentials, projectId, testSetId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseParameter[] TestSet_RetrieveTestCaseParameters(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, int testSetTestCaseId) {
            return base.Channel.TestSet_RetrieveTestCaseParameters(credentials, projectId, testSetId, testSetTestCaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestSetTestCaseParameter[]> TestSet_RetrieveTestCaseParametersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, int testSetTestCaseId) {
            return base.Channel.TestSet_RetrieveTestCaseParametersAsync(credentials, projectId, testSetId, testSetTestCaseId);
        }
        
        public void TestSet_SetInUseStatus(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, int testSetTestCaseId, bool isInUse) {
            base.Channel.TestSet_SetInUseStatus(credentials, projectId, testSetId, testSetTestCaseId, isInUse);
        }
        
        public System.Threading.Tasks.Task TestSet_SetInUseStatusAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, int testSetTestCaseId, bool isInUse) {
            return base.Channel.TestSet_SetInUseStatusAsync(credentials, projectId, testSetId, testSetTestCaseId, isInUse);
        }
        
        public bool TestSet_CheckInUseStatus(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, int testSetTestCaseId) {
            return base.Channel.TestSet_CheckInUseStatus(credentials, projectId, testSetId, testSetTestCaseId);
        }
        
        public System.Threading.Tasks.Task<bool> TestSet_CheckInUseStatusAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId, int testSetTestCaseId) {
            return base.Channel.TestSet_CheckInUseStatusAsync(credentials, projectId, testSetId, testSetTestCaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet TestConfiguration_RetrieveForTestSet(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestConfiguration_RetrieveForTestSet(credentials, projectId, testSetId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet> TestConfiguration_RetrieveForTestSetAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testSetId) {
            return base.Channel.TestConfiguration_RetrieveForTestSetAsync(credentials, projectId, testSetId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet TestConfiguration_RetrieveSetById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testConfigurationSetId) {
            return base.Channel.TestConfiguration_RetrieveSetById(credentials, projectId, testConfigurationSetId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteTestConfigurationSet> TestConfiguration_RetrieveSetByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testConfigurationSetId) {
            return base.Channel.TestConfiguration_RetrieveSetByIdAsync(credentials, projectId, testConfigurationSetId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteCredentials Connection_Authenticate1(string userName, string password, string plugInName) {
            return base.Channel.Connection_Authenticate1(userName, password, plugInName);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCredentials> Connection_Authenticate1Async(string userName, string password, string plugInName) {
            return base.Channel.Connection_Authenticate1Async(userName, password, plugInName);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteCredentials Connection_Authenticate2(string userName, string apiKey, string plugInName) {
            return base.Channel.Connection_Authenticate2(userName, apiKey, plugInName);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCredentials> Connection_Authenticate2Async(string userName, string apiKey, string plugInName) {
            return base.Channel.Connection_Authenticate2Async(userName, apiKey, plugInName);
        }
        
        public string System_GetProductName() {
            return base.Channel.System_GetProductName();
        }
        
        public System.Threading.Tasks.Task<string> System_GetProductNameAsync() {
            return base.Channel.System_GetProductNameAsync();
        }
        
        public System.DateTime System_GetServerDateTime() {
            return base.Channel.System_GetServerDateTime();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> System_GetServerDateTimeAsync() {
            return base.Channel.System_GetServerDateTimeAsync();
        }
        
        public string System_GetWebServerUrl() {
            return base.Channel.System_GetWebServerUrl();
        }
        
        public System.Threading.Tasks.Task<string> System_GetWebServerUrlAsync() {
            return base.Channel.System_GetWebServerUrlAsync();
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDataSyncSystem[] DataSyncSystem_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.DataSyncSystem_Retrieve(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataSyncSystem[]> DataSyncSystem_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.DataSyncSystem_RetrieveAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDataSyncSystem DataSyncSystem_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId) {
            return base.Channel.DataSyncSystem_RetrieveById(credentials, dataSyncSystemId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataSyncSystem> DataSyncSystem_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId) {
            return base.Channel.DataSyncSystem_RetrieveByIdAsync(credentials, dataSyncSystemId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDataSyncSystem DataSyncSystem_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem) {
            return base.Channel.DataSyncSystem_Create(credentials, remoteDataSyncSystem);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataSyncSystem> DataSyncSystem_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem) {
            return base.Channel.DataSyncSystem_CreateAsync(credentials, remoteDataSyncSystem);
        }
        
        public void DataSyncSystem_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem) {
            base.Channel.DataSyncSystem_Update(credentials, remoteDataSyncSystem);
        }
        
        public System.Threading.Tasks.Task DataSyncSystem_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDataSyncSystem remoteDataSyncSystem) {
            return base.Channel.DataSyncSystem_UpdateAsync(credentials, remoteDataSyncSystem);
        }
        
        public void DataSyncSystem_SaveRunFailure(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId) {
            base.Channel.DataSyncSystem_SaveRunFailure(credentials, dataSyncSystemId);
        }
        
        public System.Threading.Tasks.Task DataSyncSystem_SaveRunFailureAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId) {
            return base.Channel.DataSyncSystem_SaveRunFailureAsync(credentials, dataSyncSystemId);
        }
        
        public void DataSyncSystem_SaveRunSuccess(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, System.DateTime lastRunDate) {
            base.Channel.DataSyncSystem_SaveRunSuccess(credentials, dataSyncSystemId, lastRunDate);
        }
        
        public System.Threading.Tasks.Task DataSyncSystem_SaveRunSuccessAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, System.DateTime lastRunDate) {
            return base.Channel.DataSyncSystem_SaveRunSuccessAsync(credentials, dataSyncSystemId, lastRunDate);
        }
        
        public void DataSyncSystem_SaveRunWarning(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, System.DateTime lastRunDate) {
            base.Channel.DataSyncSystem_SaveRunWarning(credentials, dataSyncSystemId, lastRunDate);
        }
        
        public System.Threading.Tasks.Task DataSyncSystem_SaveRunWarningAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, System.DateTime lastRunDate) {
            return base.Channel.DataSyncSystem_SaveRunWarningAsync(credentials, dataSyncSystemId, lastRunDate);
        }
        
        public void DataSyncSystem_WriteEvent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string message, string details, int eventLogEntryType) {
            base.Channel.DataSyncSystem_WriteEvent(credentials, message, details, eventLogEntryType);
        }
        
        public System.Threading.Tasks.Task DataSyncSystem_WriteEventAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, string message, string details, int eventLogEntryType) {
            return base.Channel.DataSyncSystem_WriteEventAsync(credentials, message, details, eventLogEntryType);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteCustomProperty[] CustomProperty_RetrieveForArtifactType(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int artifactTypeId, bool includeDeleted) {
            return base.Channel.CustomProperty_RetrieveForArtifactType(credentials, projectTemplateId, artifactTypeId, includeDeleted);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCustomProperty[]> CustomProperty_RetrieveForArtifactTypeAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int artifactTypeId, bool includeDeleted) {
            return base.Channel.CustomProperty_RetrieveForArtifactTypeAsync(credentials, projectTemplateId, artifactTypeId, includeDeleted);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteCustomList CustomProperty_AddCustomList(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomList remoteCustomList) {
            return base.Channel.CustomProperty_AddCustomList(credentials, remoteCustomList);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCustomList> CustomProperty_AddCustomListAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomList remoteCustomList) {
            return base.Channel.CustomProperty_AddCustomListAsync(credentials, remoteCustomList);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteCustomListValue CustomProperty_AddCustomListValue(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteCustomListValue remoteCustomListValue) {
            return base.Channel.CustomProperty_AddCustomListValue(credentials, projectTemplateId, remoteCustomListValue);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCustomListValue> CustomProperty_AddCustomListValueAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteCustomListValue remoteCustomListValue) {
            return base.Channel.CustomProperty_AddCustomListValueAsync(credentials, projectTemplateId, remoteCustomListValue);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteCustomProperty CustomProperty_AddDefinition(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId) {
            return base.Channel.CustomProperty_AddDefinition(credentials, remoteCustomProperty, customListId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCustomProperty> CustomProperty_AddDefinitionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId) {
            return base.Channel.CustomProperty_AddDefinitionAsync(credentials, remoteCustomProperty, customListId);
        }
        
        public void CustomProperty_UpdateDefinition(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomProperty remoteCustomProperty) {
            base.Channel.CustomProperty_UpdateDefinition(credentials, remoteCustomProperty);
        }
        
        public System.Threading.Tasks.Task CustomProperty_UpdateDefinitionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomProperty remoteCustomProperty) {
            return base.Channel.CustomProperty_UpdateDefinitionAsync(credentials, remoteCustomProperty);
        }
        
        public void CustomProperty_DeleteDefinition(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int customPropertyId) {
            base.Channel.CustomProperty_DeleteDefinition(credentials, projectTemplateId, customPropertyId);
        }
        
        public System.Threading.Tasks.Task CustomProperty_DeleteDefinitionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int customPropertyId) {
            return base.Channel.CustomProperty_DeleteDefinitionAsync(credentials, projectTemplateId, customPropertyId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteCustomList CustomProperty_RetrieveCustomListById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int customListId) {
            return base.Channel.CustomProperty_RetrieveCustomListById(credentials, projectTemplateId, customListId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCustomList> CustomProperty_RetrieveCustomListByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int customListId) {
            return base.Channel.CustomProperty_RetrieveCustomListByIdAsync(credentials, projectTemplateId, customListId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteCustomList[] CustomProperty_RetrieveCustomLists(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.CustomProperty_RetrieveCustomLists(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteCustomList[]> CustomProperty_RetrieveCustomListsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.CustomProperty_RetrieveCustomListsAsync(credentials, projectTemplateId);
        }
        
        public void CustomProperty_UpdateCustomList(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomList remoteCustomList) {
            base.Channel.CustomProperty_UpdateCustomList(credentials, remoteCustomList);
        }
        
        public System.Threading.Tasks.Task CustomProperty_UpdateCustomListAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteCustomList remoteCustomList) {
            return base.Channel.CustomProperty_UpdateCustomListAsync(credentials, remoteCustomList);
        }
        
        public void DataMapping_AddArtifactMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, SampleDataSync.SpiraSoapService.RemoteDataMapping[] remoteDataMappings) {
            base.Channel.DataMapping_AddArtifactMappings(credentials, projectId, dataSyncSystemId, artifactTypeId, remoteDataMappings);
        }
        
        public System.Threading.Tasks.Task DataMapping_AddArtifactMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, SampleDataSync.SpiraSoapService.RemoteDataMapping[] remoteDataMappings) {
            return base.Channel.DataMapping_AddArtifactMappingsAsync(credentials, projectId, dataSyncSystemId, artifactTypeId, remoteDataMappings);
        }
        
        public void DataMapping_AddUserMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, SampleDataSync.SpiraSoapService.RemoteDataMapping[] remoteDataMappings) {
            base.Channel.DataMapping_AddUserMappings(credentials, dataSyncSystemId, remoteDataMappings);
        }
        
        public System.Threading.Tasks.Task DataMapping_AddUserMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, SampleDataSync.SpiraSoapService.RemoteDataMapping[] remoteDataMappings) {
            return base.Channel.DataMapping_AddUserMappingsAsync(credentials, dataSyncSystemId, remoteDataMappings);
        }
        
        public void DataMapping_RemoveArtifactMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, SampleDataSync.SpiraSoapService.RemoteDataMapping[] remoteDataMappings) {
            base.Channel.DataMapping_RemoveArtifactMappings(credentials, projectId, dataSyncSystemId, artifactTypeId, remoteDataMappings);
        }
        
        public System.Threading.Tasks.Task DataMapping_RemoveArtifactMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, SampleDataSync.SpiraSoapService.RemoteDataMapping[] remoteDataMappings) {
            return base.Channel.DataMapping_RemoveArtifactMappingsAsync(credentials, projectId, dataSyncSystemId, artifactTypeId, remoteDataMappings);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveArtifactMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId) {
            return base.Channel.DataMapping_RetrieveArtifactMappings(credentials, projectId, dataSyncSystemId, artifactTypeId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataMapping[]> DataMapping_RetrieveArtifactMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId) {
            return base.Channel.DataMapping_RetrieveArtifactMappingsAsync(credentials, projectId, dataSyncSystemId, artifactTypeId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDataMapping DataMapping_RetrieveCustomPropertyMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, int customPropertyId) {
            return base.Channel.DataMapping_RetrieveCustomPropertyMapping(credentials, projectId, dataSyncSystemId, artifactTypeId, customPropertyId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataMapping> DataMapping_RetrieveCustomPropertyMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, int customPropertyId) {
            return base.Channel.DataMapping_RetrieveCustomPropertyMappingAsync(credentials, projectId, dataSyncSystemId, artifactTypeId, customPropertyId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveCustomPropertyValueMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, int customPropertyId) {
            return base.Channel.DataMapping_RetrieveCustomPropertyValueMappings(credentials, projectId, dataSyncSystemId, artifactTypeId, customPropertyId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataMapping[]> DataMapping_RetrieveCustomPropertyValueMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactTypeId, int customPropertyId) {
            return base.Channel.DataMapping_RetrieveCustomPropertyValueMappingsAsync(credentials, projectId, dataSyncSystemId, artifactTypeId, customPropertyId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveFieldValueMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactFieldId) {
            return base.Channel.DataMapping_RetrieveFieldValueMappings(credentials, projectId, dataSyncSystemId, artifactFieldId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataMapping[]> DataMapping_RetrieveFieldValueMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int dataSyncSystemId, int artifactFieldId) {
            return base.Channel.DataMapping_RetrieveFieldValueMappingsAsync(credentials, projectId, dataSyncSystemId, artifactFieldId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveProjectMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId) {
            return base.Channel.DataMapping_RetrieveProjectMappings(credentials, dataSyncSystemId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataMapping[]> DataMapping_RetrieveProjectMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId) {
            return base.Channel.DataMapping_RetrieveProjectMappingsAsync(credentials, dataSyncSystemId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDataMapping[] DataMapping_RetrieveUserMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId) {
            return base.Channel.DataMapping_RetrieveUserMappings(credentials, dataSyncSystemId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDataMapping[]> DataMapping_RetrieveUserMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId) {
            return base.Channel.DataMapping_RetrieveUserMappingsAsync(credentials, dataSyncSystemId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteProjectArtifact[] DataMapping_SearchArtifactMappings(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, int artifactTypeId, string externalKey) {
            return base.Channel.DataMapping_SearchArtifactMappings(credentials, dataSyncSystemId, artifactTypeId, externalKey);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProjectArtifact[]> DataMapping_SearchArtifactMappingsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int dataSyncSystemId, int artifactTypeId, string externalKey) {
            return base.Channel.DataMapping_SearchArtifactMappingsAsync(credentials, dataSyncSystemId, artifactTypeId, externalKey);
        }
        
        public byte[] Document_OpenFile(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId) {
            return base.Channel.Document_OpenFile(credentials, projectId, attachmentId);
        }
        
        public System.Threading.Tasks.Task<byte[]> Document_OpenFileAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId) {
            return base.Channel.Document_OpenFileAsync(credentials, projectId, attachmentId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocument Document_AddFile(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocument remoteDocument, byte[] binaryData) {
            return base.Channel.Document_AddFile(credentials, remoteDocument, binaryData);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocument> Document_AddFileAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocument remoteDocument, byte[] binaryData) {
            return base.Channel.Document_AddFileAsync(credentials, remoteDocument, binaryData);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocument Document_AddUrl(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocument remoteDocument) {
            return base.Channel.Document_AddUrl(credentials, remoteDocument);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocument> Document_AddUrlAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocument remoteDocument) {
            return base.Channel.Document_AddUrlAsync(credentials, remoteDocument);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocumentVersion Document_AddFileVersion(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent) {
            return base.Channel.Document_AddFileVersion(credentials, projectId, remoteDocumentVersion, binaryData, makeCurrent);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentVersion> Document_AddFileVersionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent) {
            return base.Channel.Document_AddFileVersionAsync(credentials, projectId, remoteDocumentVersion, binaryData, makeCurrent);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocumentVersion Document_AddUrlVersion(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent) {
            return base.Channel.Document_AddUrlVersion(credentials, projectId, remoteDocumentVersion, makeCurrent);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentVersion> Document_AddUrlVersionAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent) {
            return base.Channel.Document_AddUrlVersionAsync(credentials, projectId, remoteDocumentVersion, makeCurrent);
        }
        
        public void Document_DeleteFromArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId, int artifactTypeId, int artifactId) {
            base.Channel.Document_DeleteFromArtifact(credentials, projectId, attachmentId, artifactTypeId, artifactId);
        }
        
        public System.Threading.Tasks.Task Document_DeleteFromArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId, int artifactTypeId, int artifactId) {
            return base.Channel.Document_DeleteFromArtifactAsync(credentials, projectId, attachmentId, artifactTypeId, artifactId);
        }
        
        public void Document_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId) {
            base.Channel.Document_Delete(credentials, projectId, attachmentId);
        }
        
        public System.Threading.Tasks.Task Document_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId) {
            return base.Channel.Document_DeleteAsync(credentials, projectId, attachmentId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocument[] Document_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows) {
            return base.Channel.Document_Retrieve(credentials, projectId, remoteFilters, remoteSort, startingRow, numberRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocument[]> Document_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows) {
            return base.Channel.Document_RetrieveAsync(credentials, projectId, remoteFilters, remoteSort, startingRow, numberRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocument[] Document_RetrieveForFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int folderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows) {
            return base.Channel.Document_RetrieveForFolder(credentials, projectId, folderId, remoteFilters, remoteSort, startingRow, numberRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocument[]> Document_RetrieveForFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int folderId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberRows) {
            return base.Channel.Document_RetrieveForFolderAsync(credentials, projectId, folderId, remoteFilters, remoteSort, startingRow, numberRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocument[] Document_RetrieveForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort) {
            return base.Channel.Document_RetrieveForArtifact(credentials, projectId, artifactTypeId, artifactId, remoteFilters, remoteSort);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocument[]> Document_RetrieveForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort) {
            return base.Channel.Document_RetrieveForArtifactAsync(credentials, projectId, artifactTypeId, artifactId, remoteFilters, remoteSort);
        }
        
        public void Document_AddToArtifactId(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, int attachmentId) {
            base.Channel.Document_AddToArtifactId(credentials, projectId, artifactTypeId, artifactId, attachmentId);
        }
        
        public System.Threading.Tasks.Task Document_AddToArtifactIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, int attachmentId) {
            return base.Channel.Document_AddToArtifactIdAsync(credentials, projectId, artifactTypeId, artifactId, attachmentId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocument Document_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId) {
            return base.Channel.Document_RetrieveById(credentials, projectId, attachmentId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocument> Document_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int attachmentId) {
            return base.Channel.Document_RetrieveByIdAsync(credentials, projectId, attachmentId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocumentType[] Document_RetrieveTypes(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, bool activeOnly) {
            return base.Channel.Document_RetrieveTypes(credentials, projectTemplateId, activeOnly);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentType[]> Document_RetrieveTypesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, bool activeOnly) {
            return base.Channel.Document_RetrieveTypesAsync(credentials, projectTemplateId, activeOnly);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocumentFolder[] Document_RetrieveFolders(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.Document_RetrieveFolders(credentials, projectId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentFolder[]> Document_RetrieveFoldersAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.Document_RetrieveFoldersAsync(credentials, projectId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocumentFolder Document_RetrieveFolderById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int folderId) {
            return base.Channel.Document_RetrieveFolderById(credentials, projectId, folderId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentFolder> Document_RetrieveFolderByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int folderId) {
            return base.Channel.Document_RetrieveFolderByIdAsync(credentials, projectId, folderId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocumentFolder[] Document_RetrieveFoldersByParentFolderId(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentFolderId) {
            return base.Channel.Document_RetrieveFoldersByParentFolderId(credentials, projectId, parentFolderId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentFolder[]> Document_RetrieveFoldersByParentFolderIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> parentFolderId) {
            return base.Channel.Document_RetrieveFoldersByParentFolderIdAsync(credentials, projectId, parentFolderId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteDocumentFolder Document_AddFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder) {
            return base.Channel.Document_AddFolder(credentials, remoteDocumentFolder);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteDocumentFolder> Document_AddFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder) {
            return base.Channel.Document_AddFolderAsync(credentials, remoteDocumentFolder);
        }
        
        public void Document_DeleteFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int projectAttachmentFolderId) {
            base.Channel.Document_DeleteFolder(credentials, projectId, projectAttachmentFolderId);
        }
        
        public System.Threading.Tasks.Task Document_DeleteFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int projectAttachmentFolderId) {
            return base.Channel.Document_DeleteFolderAsync(credentials, projectId, projectAttachmentFolderId);
        }
        
        public void Document_UpdateFolder(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder) {
            base.Channel.Document_UpdateFolder(credentials, remoteDocumentFolder);
        }
        
        public System.Threading.Tasks.Task Document_UpdateFolderAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteDocumentFolder remoteDocumentFolder) {
            return base.Channel.Document_UpdateFolderAsync(credentials, remoteDocumentFolder);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAssociation Association_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteAssociation remoteAssociation) {
            return base.Channel.Association_Create(credentials, projectId, remoteAssociation);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAssociation> Association_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteAssociation remoteAssociation) {
            return base.Channel.Association_CreateAsync(credentials, projectId, remoteAssociation);
        }
        
        public void Association_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteAssociation remoteAssociation) {
            base.Channel.Association_Update(credentials, projectId, remoteAssociation);
        }
        
        public System.Threading.Tasks.Task Association_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteAssociation remoteAssociation) {
            return base.Channel.Association_UpdateAsync(credentials, projectId, remoteAssociation);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteAssociation[] Association_RetrieveForArtifact(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort) {
            return base.Channel.Association_RetrieveForArtifact(credentials, projectId, artifactTypeId, artifactId, remoteFilters, remoteSort);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteAssociation[]> Association_RetrieveForArtifactAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int artifactTypeId, int artifactId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort) {
            return base.Channel.Association_RetrieveForArtifactAsync(credentials, projectId, artifactTypeId, artifactId, remoteFilters, remoteSort);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncidentPriority Incident_AddPriority(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentPriority remoteIncidentPriority) {
            return base.Channel.Incident_AddPriority(credentials, projectTemplateId, remoteIncidentPriority);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentPriority> Incident_AddPriorityAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentPriority remoteIncidentPriority) {
            return base.Channel.Incident_AddPriorityAsync(credentials, projectTemplateId, remoteIncidentPriority);
        }
        
        public long Incident_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.Incident_Count(credentials, projectId, remoteFilters);
        }
        
        public System.Threading.Tasks.Task<long> Incident_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.Incident_CountAsync(credentials, projectId, remoteFilters);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComment[] Incident_AddComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment[] remoteComments) {
            return base.Channel.Incident_AddComments(credentials, projectId, remoteComments);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> Incident_AddCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment[] remoteComments) {
            return base.Channel.Incident_AddCommentsAsync(credentials, projectId, remoteComments);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncidentSeverity Incident_AddSeverity(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentSeverity remoteIncidentSeverity) {
            return base.Channel.Incident_AddSeverity(credentials, projectTemplateId, remoteIncidentSeverity);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentSeverity> Incident_AddSeverityAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentSeverity remoteIncidentSeverity) {
            return base.Channel.Incident_AddSeverityAsync(credentials, projectTemplateId, remoteIncidentSeverity);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncidentStatus Incident_AddStatus(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentStatus remoteIncidentStatus) {
            return base.Channel.Incident_AddStatus(credentials, projectTemplateId, remoteIncidentStatus);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentStatus> Incident_AddStatusAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentStatus remoteIncidentStatus) {
            return base.Channel.Incident_AddStatusAsync(credentials, projectTemplateId, remoteIncidentStatus);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncidentType Incident_AddType(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentType remoteIncidentType) {
            return base.Channel.Incident_AddType(credentials, projectTemplateId, remoteIncidentType);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentType> Incident_AddTypeAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, SampleDataSync.SpiraSoapService.RemoteIncidentType remoteIncidentType) {
            return base.Channel.Incident_AddTypeAsync(credentials, projectTemplateId, remoteIncidentType);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncident Incident_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteIncident remoteIncident) {
            return base.Channel.Incident_Create(credentials, remoteIncident);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident> Incident_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteIncident remoteIncident) {
            return base.Channel.Incident_CreateAsync(credentials, remoteIncident);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncident[] Incident_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.Incident_Retrieve(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident[]> Incident_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, SampleDataSync.SpiraSoapService.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.Incident_RetrieveAsync(credentials, projectId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncident Incident_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int incidentId) {
            return base.Channel.Incident_RetrieveById(credentials, projectId, incidentId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident> Incident_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int incidentId) {
            return base.Channel.Incident_RetrieveByIdAsync(credentials, projectId, incidentId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncident[] Incident_RetrieveByTestCase(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, bool openOnly) {
            return base.Channel.Incident_RetrieveByTestCase(credentials, projectId, testCaseId, openOnly);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident[]> Incident_RetrieveByTestCaseAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testCaseId, bool openOnly) {
            return base.Channel.Incident_RetrieveByTestCaseAsync(credentials, projectId, testCaseId, openOnly);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncident[] Incident_RetrieveByTestRunStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunStepId) {
            return base.Channel.Incident_RetrieveByTestRunStep(credentials, projectId, testRunStepId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident[]> Incident_RetrieveByTestRunStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testRunStepId) {
            return base.Channel.Incident_RetrieveByTestRunStepAsync(credentials, projectId, testRunStepId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncident[] Incident_RetrieveByTestStep(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testStepId) {
            return base.Channel.Incident_RetrieveByTestStep(credentials, projectId, testStepId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident[]> Incident_RetrieveByTestStepAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int testStepId) {
            return base.Channel.Incident_RetrieveByTestStepAsync(credentials, projectId, testStepId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncident[] Incident_RetrieveForOwner(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Incident_RetrieveForOwner(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident[]> Incident_RetrieveForOwnerAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Incident_RetrieveForOwnerAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncident[] Incident_RetrieveNew(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.DateTime creationDate, int startRow, int numberOfRows) {
            return base.Channel.Incident_RetrieveNew(credentials, projectId, creationDate, startRow, numberOfRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncident[]> Incident_RetrieveNewAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.DateTime creationDate, int startRow, int numberOfRows) {
            return base.Channel.Incident_RetrieveNewAsync(credentials, projectId, creationDate, startRow, numberOfRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncidentPriority[] Incident_RetrievePriorities(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Incident_RetrievePriorities(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentPriority[]> Incident_RetrievePrioritiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Incident_RetrievePrioritiesAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComment[] Incident_RetrieveComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int incidentId) {
            return base.Channel.Incident_RetrieveComments(credentials, projectId, incidentId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> Incident_RetrieveCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int incidentId) {
            return base.Channel.Incident_RetrieveCommentsAsync(credentials, projectId, incidentId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncidentSeverity[] Incident_RetrieveSeverities(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Incident_RetrieveSeverities(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentSeverity[]> Incident_RetrieveSeveritiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Incident_RetrieveSeveritiesAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncidentStatus[] Incident_RetrieveStatuses(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Incident_RetrieveStatuses(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentStatus[]> Incident_RetrieveStatusesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Incident_RetrieveStatusesAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncidentType[] Incident_RetrieveTypes(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Incident_RetrieveTypes(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentType[]> Incident_RetrieveTypesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Incident_RetrieveTypesAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowField[] Incident_RetrieveWorkflowFields(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Incident_RetrieveWorkflowFields(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowField[]> Incident_RetrieveWorkflowFieldsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Incident_RetrieveWorkflowFieldsAsync(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[] Incident_RetrieveWorkflowTransitions(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isDetector, bool isOwner) {
            return base.Channel.Incident_RetrieveWorkflowTransitions(credentials, projectId, currentTypeId, currentStatusId, isDetector, isOwner);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[]> Incident_RetrieveWorkflowTransitionsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isDetector, bool isOwner) {
            return base.Channel.Incident_RetrieveWorkflowTransitionsAsync(credentials, projectId, currentTypeId, currentStatusId, isDetector, isOwner);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[] Incident_RetrieveWorkflowCustomProperties(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Incident_RetrieveWorkflowCustomProperties(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[]> Incident_RetrieveWorkflowCustomPropertiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Incident_RetrieveWorkflowCustomPropertiesAsync(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public void Incident_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteIncident remoteIncident) {
            base.Channel.Incident_Update(credentials, remoteIncident);
        }
        
        public System.Threading.Tasks.Task Incident_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteIncident remoteIncident) {
            return base.Channel.Incident_UpdateAsync(credentials, remoteIncident);
        }
        
        public void Incident_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int incidentId) {
            base.Channel.Incident_Delete(credentials, projectId, incidentId);
        }
        
        public System.Threading.Tasks.Task Incident_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int incidentId) {
            return base.Channel.Incident_DeleteAsync(credentials, projectId, incidentId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncidentStatus Incident_RetrieveDefaultStatus(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Incident_RetrieveDefaultStatus(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentStatus> Incident_RetrieveDefaultStatusAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Incident_RetrieveDefaultStatusAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteIncidentType Incident_RetrieveDefaultType(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Incident_RetrieveDefaultType(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteIncidentType> Incident_RetrieveDefaultTypeAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Incident_RetrieveDefaultTypeAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteProjectTemplate ProjectTemplate_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectTemplate remoteProjectTemplate, System.Nullable<int> existingProjectTemplateId) {
            return base.Channel.ProjectTemplate_Create(credentials, remoteProjectTemplate, existingProjectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProjectTemplate> ProjectTemplate_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectTemplate remoteProjectTemplate, System.Nullable<int> existingProjectTemplateId) {
            return base.Channel.ProjectTemplate_CreateAsync(credentials, remoteProjectTemplate, existingProjectTemplateId);
        }
        
        public void ProjectTemplate_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            base.Channel.ProjectTemplate_Delete(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task ProjectTemplate_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.ProjectTemplate_DeleteAsync(credentials, projectTemplateId);
        }
        
        public void ProjectTemplate_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectTemplate remoteProjectTemplate) {
            base.Channel.ProjectTemplate_Update(credentials, remoteProjectTemplate);
        }
        
        public System.Threading.Tasks.Task ProjectTemplate_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectTemplate remoteProjectTemplate) {
            return base.Channel.ProjectTemplate_UpdateAsync(credentials, remoteProjectTemplate);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteProjectTemplate[] ProjectTemplate_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.ProjectTemplate_Retrieve(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProjectTemplate[]> ProjectTemplate_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.ProjectTemplate_RetrieveAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteProjectTemplate ProjectTemplate_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.ProjectTemplate_RetrieveById(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProjectTemplate> ProjectTemplate_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.ProjectTemplate_RetrieveByIdAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteProject Project_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProject remoteProject, System.Nullable<int> existingProjectId) {
            return base.Channel.Project_Create(credentials, remoteProject, existingProjectId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProject> Project_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProject remoteProject, System.Nullable<int> existingProjectId) {
            return base.Channel.Project_CreateAsync(credentials, remoteProject, existingProjectId);
        }
        
        public void Project_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            base.Channel.Project_Delete(credentials, projectId);
        }
        
        public System.Threading.Tasks.Task Project_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.Project_DeleteAsync(credentials, projectId);
        }
        
        public void Project_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProject remoteProject) {
            base.Channel.Project_Update(credentials, remoteProject);
        }
        
        public System.Threading.Tasks.Task Project_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProject remoteProject) {
            return base.Channel.Project_UpdateAsync(credentials, remoteProject);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteProject[] Project_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Project_Retrieve(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProject[]> Project_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Project_RetrieveAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteProject Project_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.Project_RetrieveById(credentials, projectId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProject> Project_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.Project_RetrieveByIdAsync(credentials, projectId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteProjectUser[] Project_RetrieveUserMembership(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.Project_RetrieveUserMembership(credentials, projectId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProjectUser[]> Project_RetrieveUserMembershipAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId) {
            return base.Channel.Project_RetrieveUserMembershipAsync(credentials, projectId);
        }
        
        public void Project_RefreshProgressExecutionStatusCaches(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> releaseId, bool runInBackground) {
            base.Channel.Project_RefreshProgressExecutionStatusCaches(credentials, projectId, releaseId, runInBackground);
        }
        
        public System.Threading.Tasks.Task Project_RefreshProgressExecutionStatusCachesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, System.Nullable<int> releaseId, bool runInBackground) {
            return base.Channel.Project_RefreshProgressExecutionStatusCachesAsync(credentials, projectId, releaseId, runInBackground);
        }
        
        public void Project_AddUserMembership(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectUser remoteProjectUser) {
            base.Channel.Project_AddUserMembership(credentials, remoteProjectUser);
        }
        
        public System.Threading.Tasks.Task Project_AddUserMembershipAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectUser remoteProjectUser) {
            return base.Channel.Project_AddUserMembershipAsync(credentials, remoteProjectUser);
        }
        
        public void Project_UpdateUserMembership(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectUser remoteProjectUser) {
            base.Channel.Project_UpdateUserMembership(credentials, remoteProjectUser);
        }
        
        public System.Threading.Tasks.Task Project_UpdateUserMembershipAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectUser remoteProjectUser) {
            return base.Channel.Project_UpdateUserMembershipAsync(credentials, remoteProjectUser);
        }
        
        public void Project_RemoveUserMembership(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectUser remoteProjectUser) {
            base.Channel.Project_RemoveUserMembership(credentials, remoteProjectUser);
        }
        
        public System.Threading.Tasks.Task Project_RemoveUserMembershipAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteProjectUser remoteProjectUser) {
            return base.Channel.Project_RemoveUserMembershipAsync(credentials, remoteProjectUser);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteProjectRole[] ProjectRole_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.ProjectRole_Retrieve(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteProjectRole[]> ProjectRole_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.ProjectRole_RetrieveAsync(credentials);
        }
        
        public void Release_AddTestMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping) {
            base.Channel.Release_AddTestMapping(credentials, projectId, remoteReleaseTestCaseMapping);
        }
        
        public System.Threading.Tasks.Task Release_AddTestMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping) {
            return base.Channel.Release_AddTestMappingAsync(credentials, projectId, remoteReleaseTestCaseMapping);
        }
        
        public void Release_AddTestMapping2(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping[] remoteReleaseTestCaseMappings) {
            base.Channel.Release_AddTestMapping2(credentials, projectId, remoteReleaseTestCaseMappings);
        }
        
        public System.Threading.Tasks.Task Release_AddTestMapping2Async(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping[] remoteReleaseTestCaseMappings) {
            return base.Channel.Release_AddTestMapping2Async(credentials, projectId, remoteReleaseTestCaseMappings);
        }
        
        public long Release_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.Release_Count(credentials, projectId, remoteFilters);
        }
        
        public System.Threading.Tasks.Task<long> Release_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.Release_CountAsync(credentials, projectId, remoteFilters);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRelease Release_Create(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId) {
            return base.Channel.Release_Create(credentials, remoteRelease, parentReleaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRelease> Release_CreateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId) {
            return base.Channel.Release_CreateAsync(credentials, remoteRelease, parentReleaseId);
        }
        
        public void Release_RemoveTestMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping) {
            base.Channel.Release_RemoveTestMapping(credentials, projectId, remoteReleaseTestCaseMapping);
        }
        
        public System.Threading.Tasks.Task Release_RemoveTestMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping) {
            return base.Channel.Release_RemoveTestMappingAsync(credentials, projectId, remoteReleaseTestCaseMapping);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRelease[] Release_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, bool activeOnly) {
            return base.Channel.Release_Retrieve(credentials, projectId, activeOnly);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRelease[]> Release_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, bool activeOnly) {
            return base.Channel.Release_RetrieveAsync(credentials, projectId, activeOnly);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRelease[] Release_Retrieve2(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows) {
            return base.Channel.Release_Retrieve2(credentials, projectId, remoteFilters, startingRow, numberOfRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRelease[]> Release_Retrieve2Async(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows) {
            return base.Channel.Release_Retrieve2Async(credentials, projectId, remoteFilters, startingRow, numberOfRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRelease Release_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId) {
            return base.Channel.Release_RetrieveById(credentials, projectId, releaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRelease> Release_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId) {
            return base.Channel.Release_RetrieveByIdAsync(credentials, projectId, releaseId);
        }
        
        public void Release_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRelease remoteRelease) {
            base.Channel.Release_Update(credentials, remoteRelease);
        }
        
        public System.Threading.Tasks.Task Release_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRelease remoteRelease) {
            return base.Channel.Release_UpdateAsync(credentials, remoteRelease);
        }
        
        public void Release_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId) {
            base.Channel.Release_Delete(credentials, projectId, releaseId);
        }
        
        public System.Threading.Tasks.Task Release_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId) {
            return base.Channel.Release_DeleteAsync(credentials, projectId, releaseId);
        }
        
        public void Release_Move(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId, System.Nullable<int> destinationReleaseId) {
            base.Channel.Release_Move(credentials, projectId, releaseId, destinationReleaseId);
        }
        
        public System.Threading.Tasks.Task Release_MoveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId, System.Nullable<int> destinationReleaseId) {
            return base.Channel.Release_MoveAsync(credentials, projectId, releaseId, destinationReleaseId);
        }
        
        public void Release_Indent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId) {
            base.Channel.Release_Indent(credentials, projectId, releaseId);
        }
        
        public System.Threading.Tasks.Task Release_IndentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId) {
            return base.Channel.Release_IndentAsync(credentials, projectId, releaseId);
        }
        
        public void Release_Outdent(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId) {
            base.Channel.Release_Outdent(credentials, projectId, releaseId);
        }
        
        public System.Threading.Tasks.Task Release_OutdentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId) {
            return base.Channel.Release_OutdentAsync(credentials, projectId, releaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComment[] Release_RetrieveComments(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int ReleaseId) {
            return base.Channel.Release_RetrieveComments(credentials, projectId, ReleaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment[]> Release_RetrieveCommentsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int ReleaseId) {
            return base.Channel.Release_RetrieveCommentsAsync(credentials, projectId, ReleaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping[] Release_RetrieveTestMapping(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId) {
            return base.Channel.Release_RetrieveTestMapping(credentials, projectId, releaseId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteReleaseTestCaseMapping[]> Release_RetrieveTestMappingAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int releaseId) {
            return base.Channel.Release_RetrieveTestMappingAsync(credentials, projectId, releaseId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteComment Release_CreateComment(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.Release_CreateComment(credentials, projectId, remoteComment);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteComment> Release_CreateCommentAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteComment remoteComment) {
            return base.Channel.Release_CreateCommentAsync(credentials, projectId, remoteComment);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteReleaseStatus[] Release_RetrieveStatuses(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Release_RetrieveStatuses(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteReleaseStatus[]> Release_RetrieveStatusesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Release_RetrieveStatusesAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteReleaseType[] Release_RetrieveTypes(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Release_RetrieveTypes(credentials, projectTemplateId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteReleaseType[]> Release_RetrieveTypesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId) {
            return base.Channel.Release_RetrieveTypesAsync(credentials, projectTemplateId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowField[] Release_RetrieveWorkflowFields(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Release_RetrieveWorkflowFields(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowField[]> Release_RetrieveWorkflowFieldsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Release_RetrieveWorkflowFieldsAsync(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[] Release_RetrieveWorkflowTransitions(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            return base.Channel.Release_RetrieveWorkflowTransitions(credentials, projectId, currentTypeId, currentStatusId, isCreator, isOwner);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowTransition[]> Release_RetrieveWorkflowTransitionsAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int currentTypeId, int currentStatusId, bool isCreator, bool isOwner) {
            return base.Channel.Release_RetrieveWorkflowTransitionsAsync(credentials, projectId, currentTypeId, currentStatusId, isCreator, isOwner);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[] Release_RetrieveWorkflowCustomProperties(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Release_RetrieveWorkflowCustomProperties(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteWorkflowCustomProperty[]> Release_RetrieveWorkflowCustomPropertiesAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectTemplateId, int currentTypeId, int currentStatusId) {
            return base.Channel.Release_RetrieveWorkflowCustomPropertiesAsync(credentials, projectTemplateId, currentTypeId, currentStatusId);
        }
        
        public void Requirement_AddTestCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping) {
            base.Channel.Requirement_AddTestCoverage(credentials, projectId, remoteReqTestCaseMapping);
        }
        
        public System.Threading.Tasks.Task Requirement_AddTestCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping) {
            return base.Channel.Requirement_AddTestCoverageAsync(credentials, projectId, remoteReqTestCaseMapping);
        }
        
        public long Requirement_Count(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.Requirement_Count(credentials, projectId, remoteFilters);
        }
        
        public System.Threading.Tasks.Task<long> Requirement_CountAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters) {
            return base.Channel.Requirement_CountAsync(credentials, projectId, remoteFilters);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirement Requirement_Create1(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRequirement remoteRequirement, int indentPosition) {
            return base.Channel.Requirement_Create1(credentials, remoteRequirement, indentPosition);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirement> Requirement_Create1Async(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRequirement remoteRequirement, int indentPosition) {
            return base.Channel.Requirement_Create1Async(credentials, remoteRequirement, indentPosition);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirement Requirement_Create2(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId) {
            return base.Channel.Requirement_Create2(credentials, remoteRequirement, parentRequirementId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirement> Requirement_Create2Async(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId) {
            return base.Channel.Requirement_Create2Async(credentials, remoteRequirement, parentRequirementId);
        }
        
        public void Requirement_RemoveTestCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping) {
            base.Channel.Requirement_RemoveTestCoverage(credentials, projectId, remoteReqTestCaseMapping);
        }
        
        public System.Threading.Tasks.Task Requirement_RemoveTestCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping) {
            return base.Channel.Requirement_RemoveTestCoverageAsync(credentials, projectId, remoteReqTestCaseMapping);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirement[] Requirement_Retrieve(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows) {
            return base.Channel.Requirement_Retrieve(credentials, projectId, remoteFilters, startingRow, numberOfRows);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirement[]> Requirement_RetrieveAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, SampleDataSync.SpiraSoapService.RemoteFilter[] remoteFilters, int startingRow, int numberOfRows) {
            return base.Channel.Requirement_RetrieveAsync(credentials, projectId, remoteFilters, startingRow, numberOfRows);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirement Requirement_RetrieveById(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_RetrieveById(credentials, projectId, requirementId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirement> Requirement_RetrieveByIdAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_RetrieveByIdAsync(credentials, projectId, requirementId);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirement[] Requirement_RetrieveForOwner(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Requirement_RetrieveForOwner(credentials);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirement[]> Requirement_RetrieveForOwnerAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials) {
            return base.Channel.Requirement_RetrieveForOwnerAsync(credentials);
        }
        
        public SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping[] Requirement_RetrieveTestCoverage(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_RetrieveTestCoverage(credentials, projectId, requirementId);
        }
        
        public System.Threading.Tasks.Task<SampleDataSync.SpiraSoapService.RemoteRequirementTestCaseMapping[]> Requirement_RetrieveTestCoverageAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_RetrieveTestCoverageAsync(credentials, projectId, requirementId);
        }
        
        public void Requirement_Update(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRequirement remoteRequirement) {
            base.Channel.Requirement_Update(credentials, remoteRequirement);
        }
        
        public System.Threading.Tasks.Task Requirement_UpdateAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, SampleDataSync.SpiraSoapService.RemoteRequirement remoteRequirement) {
            return base.Channel.Requirement_UpdateAsync(credentials, remoteRequirement);
        }
        
        public void Requirement_Delete(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            base.Channel.Requirement_Delete(credentials, projectId, requirementId);
        }
        
        public System.Threading.Tasks.Task Requirement_DeleteAsync(SampleDataSync.SpiraSoapService.RemoteCredentials credentials, int projectId, int requirementId) {
            return base.Channel.Requirement_DeleteAsync(credentials, projectId, requirementId);
        }
    }
}
